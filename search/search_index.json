{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Path (AI-Pi)","text":"<p>Development Progress</p> <p>Total development time: 49.0 hours</p> <p>This counter is automatically updated based on development logs.</p> <p></p> <p>Pushing the boundaries of edge AI gaming on Raspberry Pi hardware.</p> <p>Welcome to The Path (AI-Pi) documentation. This site contains comprehensive information about the project, including technical details, setup guides, development logs, and research objectives.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li> <p>Project Overview</p> </li> <li> <p>Latest Development Log</p> </li> <li> <p>Project Setup</p> </li> </ul>"},{"location":"#latest-updates","title":"Latest Updates","text":"<p>Check our development logs for the most recent changes and social updates for project announcements.</p>"},{"location":"meta/style-guide/","title":"Documentation Style Guide","text":"<p>This guide defines the standard terminology and formatting rules for our documentation.</p>"},{"location":"meta/style-guide/#technical-terms","title":"Technical Terms","text":""},{"location":"meta/style-guide/#ai-model","title":"AI Model","text":"<p>Use: AI model Avoid: neural network, ML model, machine learning model Definition: The core artificial intelligence component that powers game interactions</p>"},{"location":"meta/style-guide/#api-endpoint","title":"API Endpoint","text":"<p>Use: API endpoint Avoid: route, URL, endpoint Definition: A specific URL path that provides access to system functionality</p>"},{"location":"meta/style-guide/#game-state","title":"Game State","text":"<p>Use: game state Avoid: state, game data, world state Definition: The complete representation of the current game situation</p>"},{"location":"meta/style-guide/#health-check","title":"Health Check","text":"<p>Use: health check Avoid: status check, health status, monitoring Definition: System component status verification</p>"},{"location":"meta/style-guide/#websocket-connection","title":"WebSocket Connection","text":"<p>Use: WebSocket connection Avoid: socket, connection, web socket Definition: Real-time communication channel between client and server</p>"},{"location":"meta/style-guide/#hardware-acceleration","title":"Hardware Acceleration","text":"<p>Use: hardware acceleration Avoid: GPU acceleration, hardware boost, acceleration Definition: Using specialized hardware to improve AI performance</p>"},{"location":"meta/style-guide/#cultural-terms","title":"Cultural Terms","text":""},{"location":"meta/style-guide/#the-path","title":"The Path","text":"<p>Use: The Path Avoid: path, the path, Path Definition: The central philosophical and gameplay concept</p>"},{"location":"meta/style-guide/#agenic-context","title":"Agenic Context","text":"<p>Use: Agenic Context Avoid: context, agent context, AI context Definition: The AI's understanding and interpretation of the game world</p>"},{"location":"meta/style-guide/#crystal-vanguard","title":"Crystal Vanguard","text":"<p>Use: Crystal Vanguard Avoid: vanguard, crystal warrior, guardian Definition: A specialized character class focused on crystal manipulation</p>"},{"location":"meta/style-guide/#wraithwood","title":"Wraithwood","text":"<p>Use: Wraithwood Avoid: wraith wood, wraith-wood, shadow forest</p> <p>Definition: A mystical type of wood with unique properties</p>"},{"location":"meta/style-guide/#primal-shift","title":"Primal Shift","text":"<p>Use: Primal Shift Avoid: shift, transformation, primal form Definition: A core gameplay mechanic for character transformation</p>"},{"location":"meta/style-guide/#blessed-resonance","title":"Blessed Resonance","text":"<p>Use: Blessed Resonance Avoid: resonance, blessing, holy resonance Definition: A fundamental force in the game world</p>"},{"location":"meta/style-guide/#document-structure","title":"Document Structure","text":""},{"location":"meta/style-guide/#required-sections","title":"Required Sections","text":"<p>Each document type must include specific sections:</p>"},{"location":"meta/style-guide/#technical-documents","title":"Technical Documents","text":"<ul> <li> <p>Overview: High-level explanation of the component</p> </li> <li> <p>Implementation: Technical details and code examples</p> </li> <li> <p>Usage: How to use the component</p> </li> <li> <p>Configuration: Setup and configuration options</p> </li> </ul>"},{"location":"meta/style-guide/#overview-documents","title":"Overview Documents","text":"<ul> <li> <p>Introduction: Brief introduction to the topic</p> </li> <li> <p>Key Features: Main features or aspects</p> </li> <li> <p>Architecture: System design and relationships</p> </li> </ul>"},{"location":"meta/style-guide/#world-building-documents","title":"World Building Documents","text":"<ul> <li> <p>Overview: Introduction to the concept</p> </li> <li> <p>Mechanics: Gameplay implications</p> </li> <li> <p>Balancing: Balance considerations and limitations</p> </li> </ul>"},{"location":"meta/style-guide/#formatting-guidelines","title":"Formatting Guidelines","text":"<ol> <li>Use sentence case for headings</li> <li>Code blocks should specify language</li> <li>Use relative links for internal references</li> <li>Include alt text for all images</li> <li>Keep line length under 100 characters</li> </ol>"},{"location":"meta/implementation/ai/agenic-context-index/","title":"AI Development Index","text":""},{"location":"meta/implementation/ai/agenic-context-index/#purpose","title":"Purpose","text":"<p>This document serves as the primary navigation aid for AI agents working with The Path (AI-Pi). It provides essential context for decision-making, cross-referencing, and maintaining consistency across the project. Think of it as a map that helps AI agents understand how different parts of the project relate to each other and what guidelines to follow when making changes.</p>"},{"location":"meta/implementation/ai/agenic-context-index/#context-hierarchy","title":"Context Hierarchy","text":"<p>The Context Hierarchy section establishes the foundational structure of our project's documentation. It helps both AI agents and human developers understand where to find critical information and how different documents relate to each other.</p>"},{"location":"meta/implementation/ai/agenic-context-index/#primary-documentation-sources","title":"Primary Documentation Sources","text":"<p>Documentation Sources</p> <p>This section outlines our core documentation, including project scope, research objectives, and development history. These documents serve as the source of truth for project decisions and should be the first reference point for understanding any aspect of the project.</p> <pre><code>Core_Context:\n  project_scope:\n    path: \"overview/project-scope.md\"\n\n    purpose: \"Defines project boundaries and objectives\"\n    key_sections:\n      - \"Project Goals\"\n\n      - \"Technical Constraints\"\n\n      - \"Development Phases\"\n\n  research_objectives:\n    path: \"overview/research-objectives.md\"\n\n    purpose: \"Research goals and methodologies\"\n    key_sections:\n      - \"Research Questions\"\n\n      - \"Success Metrics\"\n\n      - \"Validation Methods\"\n\nDevelopment_History:\n  logs:\n    path: \"meta/logs/*.md\"\n\n    purpose: \"Chronological development decisions\"\n    analysis_priority:\n      - \"Technical Decisions\"\n\n      - \"Implementation Details\"\n\n      - \"Architecture Changes\"\n\n  social_updates:\n    path: \"meta/social/**/*.md\"\n\n    purpose: \"Public communications and announcements\"\n    key_aspects:\n      - \"Feature Announcements\"\n\n      - \"Development Progress\"\n\n      - \"Community Engagement\"\n</code></pre>"},{"location":"meta/implementation/ai/agenic-context-index/#cross-reference-map","title":"Cross-Reference Map","text":"<p>Cross-References</p> <p>The Cross-Reference Map shows how different components of our project influence and depend on each other. This is crucial for maintaining consistency when making changes, as it helps identify which parts of the project might be affected by modifications to a particular component.</p> <pre><code>World_Building:\n  cultural_elements:\n    primary_sources:\n      - path: \"world_building/cultural_foundations.md\"\n\n        influences: [\"game_mechanics\", \"character_design\", \"resource_systems\"]\n    related_mechanics:\n      - path: \"world_building/balance_and_meta.md\"\n\n        validates_against: [\"cultural_foundations\", \"game_balance\"]\n\n  game_mechanics:\n    battle_system:\n      - path: \"world_building/classes.md\"\n\n        dependencies: [\"stats\", \"balance_and_meta\"]\n      - path: \"world_building/stats.md\"\n\n        influences: [\"character_balance\", \"progression\"]\n\nTechnical_Implementation:\n  ai_systems:\n    training:\n      path: \"technical/ai-system/training-pipeline.md\"\n\n      validates_against: [\"game_balance\", \"difficulty_system\"]\n    inference:\n      path: \"technical/ai-system/inference.md\"\n\n      dependencies: [\"hardware_specs\", \"performance_metrics\"]\n</code></pre>"},{"location":"meta/implementation/ai/agenic-context-index/#decision-support","title":"Decision Support","text":"<p>This section provides frameworks and patterns for making informed decisions about project changes. It helps ensure that all modifications align with our project's goals and maintain consistency across different components.</p>"},{"location":"meta/implementation/ai/agenic-context-index/#content-analysis-patterns","title":"Content Analysis Patterns","text":"<p>Analysis Patterns</p> <p>These patterns guide the process of analyzing and updating project documentation. They help maintain consistency and ensure that changes are properly validated against our established criteria.</p> <pre><code>Documentation_Analysis:\n  priority_order:\n    1: \"Check development logs for recent context\"\n    2: \"Cross-reference with world building docs\"\n\n    3: \"Validate against technical specifications\"\n    4: \"Review public communications\"\n\n  consistency_checks:\n    cultural_elements:\n      sources: [\"world_building/*\", \"meta/logs/*\"]\n\n      validation_points:\n        - \"Terminology usage\"\n\n        - \"Cultural accuracy\"\n\n        - \"Implementation details\"\n\n    game_mechanics:\n      sources: [\"world_building/balance_and_meta.md\", \"world_building/classes.md\"]\n      validation_points:\n        - \"Balance considerations\"\n\n        - \"Cultural integration\"\n\n        - \"Technical feasibility\"\n</code></pre>"},{"location":"meta/implementation/ai/agenic-context-index/#implementation-guidelines","title":"Implementation Guidelines","text":"<p>Implementation Guide</p> <p>These guidelines provide concrete patterns for implementing changes in the codebase. They help bridge the gap between documentation and implementation, ensuring that our code reflects our documented intentions.</p> <pre><code>Code_Context:\n  source_patterns:\n    game_logic:\n      - \"src/game/**/*.go\"\n\n      - \"src/battle/**/*.go\"\n\n    ai_components:\n      - \"src/ai/**/*.py\"\n\n      - \"src/inference/**/*.py\"\n\n  cross_referencing:\n    mechanics_to_code:\n      world_building: \"Translates to implementation details\"\n      balance_meta: \"Informs system parameters\"\n    cultural_to_mechanics:\n      traditions: \"Guides feature development\"\n      practices: \"Shapes interaction patterns\"\n</code></pre>"},{"location":"meta/implementation/ai/agenic-context-index/#health-monitoring-context","title":"Health Monitoring Context","text":"<p>Health Monitoring</p> <p>This section defines our approach to system health and performance monitoring. It helps ensure that changes don't negatively impact system performance and that we maintain high standards for both technical and cultural aspects.</p> <pre><code>System_Health:\n  metrics_hierarchy:\n    critical:\n      - \"AI inference performance\"\n\n      - \"Battle system stability\"\n\n      - \"State management integrity\"\n\n    validation:\n      performance:\n        path: \"technical/health/performance.md\"\n        thresholds: \"technical/health/thresholds.md\"\n      cultural:\n        path: \"technical/health/cultural-validation.md\"\n\n        criteria: \"world_building/validation-criteria.md\"\n</code></pre>"},{"location":"meta/implementation/ai/agenic-context-index/#metrics-and-validation","title":"Metrics and Validation","text":"<p>Documentation Health Metrics</p> <p>This section defines key metrics and validation approaches to ensure documentation quality and effectiveness.</p> <pre><code>Documentation_Metrics:\n  health_indicators:\n    coverage:\n      measure: \"Percentage of components with complete documentation\"\n      target: \"&gt;= 95%\"\n      check_frequency: \"Weekly\"\n\n    cross_reference_validity:\n      measure: \"Percentage of valid cross-references\"\n\n      target: \"100%\"\n      validation_script: \"scripts/validate_refs.py\"\n\n    usage_patterns:\n      tracking:\n        - \"Documentation access frequency\"\n\n        - \"Most referenced sections\"\n\n        - \"Update frequency\"\n\n      analysis_period: \"Monthly\"\n\n  validation_rules:\n    cross_references:\n      - \"All links must resolve to existing documents\"\n\n      - \"No circular references\"\n\n      - \"Maximum reference depth of 3\"\n\n    content_quality:\n      - \"All code examples must be validated\"\n\n      - \"Technical terms must be consistent\"\n\n      - \"Cultural references must align with world-building\"\n\n  automated_checks:\n    frequency: \"Daily\"\n    tools:\n      - \"validate_refs.py: Cross-reference validation\"\n\n      - \"doc_health.py: Documentation health metrics\"\n\n      - \"consistency_check.py: Terminology consistency\"\n</code></pre>"},{"location":"meta/implementation/ai/agenic-context-index/#quick-reference-guide","title":"Quick Reference Guide","text":"<p>Common Documentation Patterns</p> <p>Quick reference for frequently used documentation patterns and best practices.</p> <pre><code>Common_Patterns:\n  new_feature_documentation:\n    required_sections:\n      - \"Purpose and Overview\"\n\n      - \"Technical Implementation\"\n\n      - \"Cultural Integration\"\n\n      - \"Testing Guidelines\"\n\n    example: \"world_building/features/crafting.md\"\n\n  system_updates:\n    checklist:\n      - \"Update relevant technical docs\"\n\n      - \"Add entry to development log\"\n\n      - \"Update cross-references\"\n\n      - \"Validate cultural alignment\"\n\n    example: \"meta/logs/2025-01-21.md\"\n\n  best_practices:\n    documentation_style:\n      - \"Use active voice\"\n\n      - \"Include concrete examples\"\n\n      - \"Link to related systems\"\n\n      - \"Provide context for decisions\"\n\n    example: \"world_building/combat_system.md\"\n</code></pre>"},{"location":"meta/implementation/ai/agenic-context-index/#change-tracking","title":"Change Tracking","text":"<p>Index Structure Changes</p> <p>Tracks significant changes to the agenic-context-index structure and organization.</p> <pre><code>Index_Changes:\n  2025_01_21:\n    type: \"Major Enhancement\"\n    changes:\n      - \"Added Documentation Health Metrics section\"\n\n      - \"Implemented Quick Reference Guide\"\n\n      - \"Added Change Tracking system\"\n\n    rationale: \"Improve documentation quality and maintainability\"\n\n  2025_01_14:\n    type: \"Migration\"\n    changes:\n      - \"Moved to meta/implementation/ai/\"\n\n      - \"Consolidated documentation patterns\"\n\n    rationale: \"Better organization and accessibility\"\n</code></pre>"},{"location":"meta/implementation/ai/agenic-context-index/#content-organization","title":"Content Organization","text":"<p>This section helps navigate and maintain our project's extensive documentation. It provides patterns for finding information efficiently and ensuring that updates maintain our established structure.</p>"},{"location":"meta/implementation/ai/agenic-context-index/#search-optimization","title":"Search Optimization","text":"<p>Search Patterns</p> <p>These patterns help quickly locate relevant information across our documentation. They're particularly useful when making changes that might affect multiple aspects of the project.</p> <pre><code>Priority_Paths:\n  world_building: \"Primary source for game mechanics and cultural elements\"\n  technical: \"Implementation details and specifications\"\n  meta/logs: \"Development history and decisions\"\n  meta/social: \"Public communications and announcements\"\n\nSearch_Patterns:\n  mechanics:\n    - \"world_building/*.md\"\n\n    - \"technical/game-systems/*.md\"\n\n  cultural:\n    - \"world_building/cultural*.md\"\n\n    - \"world_building/traditions*.md\"\n\n  development:\n    - \"meta/logs/*.md\"\n\n    - \"meta/implementation/**/*.md\"\n</code></pre>"},{"location":"meta/implementation/ai/agenic-context-index/#version-control-context","title":"Version Control Context","text":"<p>Version Control</p> <p>Guidelines for managing documentation updates and tracking changes. This helps maintain a clear history of decisions and ensures that updates are properly validated.</p> <pre><code>Documentation_Updates:\n  frequency: \"Daily updates in meta/logs\"\n  validation: \"Cross-reference with social updates\"\n\n  consistency: \"Check against world building docs\"\n\nChange_Patterns:\n  high_impact:\n    - \"Cultural element modifications\"\n\n    - \"Game mechanic adjustments\"\n\n    - \"AI system updates\"\n\n  requires_validation:\n    - \"Balance changes\"\n\n    - \"Cultural implementations\"\n\n    - \"System architecture\"\n</code></pre>"},{"location":"meta/implementation/ai/agenic-context-index/#resource-analysis","title":"Resource Analysis","text":"<p>This section helps understand the relationships and dependencies between different project components, ensuring that changes consider the full context of their impact.</p>"},{"location":"meta/implementation/ai/agenic-context-index/#documentation-relationships","title":"Documentation Relationships","text":"<p>Doc Relationships</p> <p>Maps out how different documents influence and depend on each other. This is crucial for maintaining consistency when updating documentation or implementing new features.</p> <pre><code>Inter_Document_Dependencies:\n  world_building:\n    cultural_foundations:\n      influences:\n        - \"character_design\"\n\n        - \"game_mechanics\"\n\n        - \"resource_systems\"\n\n      referenced_by:\n        - \"balance_and_meta.md\"\n\n        - \"classes.md\"\n\n        - \"development_logs\"\n\n    mechanics:\n      dependencies:\n        - \"cultural_foundations\"\n\n        - \"stats_system\"\n\n      influences:\n        - \"ai_behavior\"\n\n        - \"battle_system\"\n\nContent_Flow:\n  research_to_implementation:\n    path: [\"research_notes\", \"design_docs\", \"technical_specs\"]\n    validation_points:\n      - \"Cultural accuracy\"\n\n      - \"Technical feasibility\"\n\n      - \"Performance impact\"\n\n  design_to_code:\n    path: [\"world_building\", \"technical_specs\", \"implementation\"]\n    checkpoints:\n      - \"Feature alignment\"\n\n      - \"Cultural integrity\"\n\n      - \"System compatibility\"\n</code></pre>"},{"location":"meta/implementation/ai/agenic-context-index/#implementation-priorities","title":"Implementation Priorities","text":"<p>Implementation Order</p> <p>Defines the order and importance of different project components. This helps guide development efforts and ensure that we're focusing on the most critical aspects first.</p> <pre><code>Feature_Dependencies:\n  cultural_systems:\n    priority: \"High\"\n    affects: [\"game_mechanics\", \"character_design\"]\n    validation: \"cultural_foundations.md\"\n\n  battle_mechanics:\n    priority: \"High\"\n    affects: [\"ai_behavior\", \"balance\"]\n    validation: \"balance_and_meta.md\"\n\n  ai_systems:\n    priority: \"High\"\n    affects: [\"game_experience\", \"difficulty\"]\n    validation: [\"performance_metrics\", \"cultural_alignment\"]\n\nDevelopment_Order:\n  phase_dependencies:\n    cultural_foundation:\n      must_precede: [\"character_implementation\", \"mechanic_design\"]\n      validates_against: \"cultural_accuracy_criteria\"\n\n    core_mechanics:\n      must_precede: [\"ai_behavior\", \"balance_tuning\"]\n      validates_against: \"gameplay_objectives\"\n</code></pre>"},{"location":"meta/implementation/ai/agenic-context-index/#quality-assurance","title":"Quality Assurance","text":"<p>This section provides frameworks for maintaining high standards across both technical and cultural aspects of the project.</p>"},{"location":"meta/implementation/ai/agenic-context-index/#validation-framework","title":"Validation Framework","text":"<p>Validation Process</p> <p>Defines specific criteria and processes for validating changes. This ensures that all modifications meet our standards for cultural accuracy and technical performance.</p> <pre><code>Cultural_Accuracy:\n  primary_sources:\n    - path: \"world_building/cultural_foundations.md\"\n\n      priority: \"Critical\"\n      aspects: [\"terminology\", \"practices\", \"representations\"]\n\n  validation_process:\n    steps:\n      1: \"Check against primary sources\"\n      2: \"Review implementation context\"\n      3: \"Validate cultural integrity\"\n      4: \"Document decisions\"\n\nTechnical_Implementation:\n  performance_criteria:\n    ai_inference:\n      thresholds:\n        response_time: \"&lt; 100ms\"\n        accuracy: \"&gt; 95%\"\n      validation: \"technical/performance_metrics.md\"\n\n    game_systems:\n      thresholds:\n        state_updates: \"&lt; 50ms\"\n        battle_resolution: \"&lt; 200ms\"\n      validation: \"technical/system_metrics.md\"\n</code></pre>"},{"location":"meta/implementation/ai/agenic-context-index/#consistency-maintenance","title":"Consistency Maintenance","text":"<p>Consistency Checks</p> <p>Provides patterns for maintaining consistency across documentation and implementation. This helps prevent drift between different parts of the project.</p> <pre><code>Cross_Reference_Patterns:\n  documentation:\n    primary_sources:\n      - \"world_building/*.md\"\n\n      - \"technical/specifications/*.md\"\n\n    validation_sources:\n      - \"meta/logs/*.md\"\n\n      - \"meta/implementation/**/*.md\"\n\n  implementation:\n    source_patterns:\n      - \"src/**/*.go\"\n\n      - \"src/**/*.py\"\n\n    validation_patterns:\n      - \"tests/**/*_test.go\"\n\n      - \"tests/**/*_test.py\"\n\nValidation_Workflow:\n  documentation_updates:\n    steps:\n      1: \"Review related documents\"\n      2: \"Check implementation impact\"\n      3: \"Update affected components\"\n      4: \"Validate changes\"\n\n  code_changes:\n    steps:\n      1: \"Check documentation requirements\"\n      2: \"Validate cultural alignment\"\n      3: \"Verify performance impact\"\n      4: \"Update documentation\"\n</code></pre>"},{"location":"meta/implementation/ai/agenic-context-index/#ai-agent-guidelines","title":"AI Agent Guidelines","text":"<p>This section provides specific guidance for AI agents working on the project, helping them make decisions that align with our goals and standards.</p>"},{"location":"meta/implementation/ai/agenic-context-index/#decision-making-framework","title":"Decision Making Framework","text":"<p>Decision Framework</p> <p>Establishes clear priorities and patterns for AI agents to follow when making decisions about project changes. This helps ensure consistent and appropriate choices.</p> <pre><code>Priority_Hierarchy:\n  1_cultural_integrity:\n    check: \"world_building/cultural_foundations.md\"\n    validate: \"cultural_accuracy_criteria\"\n\n  2_gameplay_balance:\n    check: \"world_building/balance_and_meta.md\"\n    validate: \"balance_metrics\"\n\n  3_technical_feasibility:\n    check: \"technical/specifications/*.md\"\n\n    validate: \"performance_requirements\"\n\nAction_Patterns:\n  documentation:\n    search_order:\n      1: \"Check recent logs\"\n      2: \"Review related docs\"\n      3: \"Validate against metrics\"\n      4: \"Update health indicators\"\n    update_requirements:\n      - \"Maintain cultural accuracy\"\n\n      - \"Ensure technical alignment\"\n\n      - \"Document decisions\"\n\n      - \"Update relevant metrics\"\n\n  implementation:\n    validation_order:\n      1: \"Cultural integrity\"\n      2: \"Technical feasibility\"\n      3: \"Performance impact\"\n      4: \"Documentation health\"\n    documentation_requirements:\n      - \"Update affected docs\"\n\n      - \"Log decisions\"\n\n      - \"Cross-reference changes\"\n\n      - \"Run validation checks\"\n</code></pre>"},{"location":"meta/implementation/ai/agenic-context-index/#communication-context","title":"Communication Context","text":"<p>Communication Standards</p> <p>Defines standards for how changes and decisions should be communicated. This helps maintain clear and consistent communication across the project.</p> <pre><code>Style_Guidelines:\n  documentation:\n    tone: \"Professional and clear\"\n    format: \"Markdown with structured sections\"\n    requirements:\n      - \"Include context links\"\n\n      - \"Reference primary sources\"\n\n      - \"Document decisions\"\n\n  social_updates:\n    tone: \"Engaging and authentic\"\n    format: \"Platform-appropriate with consistent branding\"\n\n    requirements:\n      - \"Cultural sensitivity\"\n\n      - \"Technical accuracy\"\n\n      - \"Community focus\"\n\nContent_Patterns:\n  technical_updates:\n    structure:\n      - \"Context and background\"\n\n      - \"Implementation details\"\n\n      - \"Impact and dependencies\"\n\n    validation:\n      - \"Technical accuracy\"\n\n      - \"Documentation alignment\"\n\n  cultural_content:\n    structure:\n      - \"Cultural context\"\n\n      - \"Implementation approach\"\n\n      - \"Validation criteria\"\n\n    validation:\n      - \"Cultural accuracy\"\n\n      - \"Representation integrity\"\n</code></pre>"},{"location":"meta/implementation/ai/agenic-context-index/#technical-infrastructure","title":"Technical Infrastructure","text":"<p>Infrastructure Overview</p> <p>This section defines the technical foundation of the project, including hardware specifications, deployment patterns, and system architecture considerations.</p> <pre><code>Hardware_Context:\n  raspberry_pi:\n    model: \"Raspberry Pi 5\"\n    accelerator: \"AI HAT+\"\n    constraints:\n      memory: \"8GB RAM\"\n      storage: \"64GB minimum\"\n    validation_path: \"technical/hardware/requirements.md\"\n\n  development:\n    primary: \"Mac Mini M1\"\n    requirements:\n      - \"TensorFlow support\"\n\n      - \"Go toolchain\"\n\n      - \"Python 3.9+\"\n\nDeployment_Patterns:\n  model_deployment:\n    source: \"Mac Mini (training)\"\n    target: \"Raspberry Pi (inference)\"\n    validation:\n      - \"Model size constraints\"\n\n      - \"Inference performance\"\n\n      - \"Memory usage\"\n\n  update_process:\n    frequency: \"Post-training\"\n\n    validation_steps:\n      - \"Performance benchmarks\"\n\n      - \"Memory profiling\"\n\n      - \"Cultural alignment check\"\n</code></pre>"},{"location":"meta/implementation/ai/agenic-context-index/#data-schemas","title":"Data Schemas","text":"<p>Schema Documentation</p> <p>Defines the core data structures and their relationships, ensuring consistency across different system components and languages.</p> <pre><code>Core_Schemas:\n  game_state:\n    path: \"technical/data-schemas/game-state.md\"\n\n    implementations:\n      - language: \"Go\"\n\n        usage: \"Server-side state management\"\n\n      - language: \"Python\"\n\n        usage: \"AI model integration\"\n    validation:\n      - \"Type consistency\"\n\n      - \"Cross-language compatibility\"\n\n  ai_models:\n    path: \"technical/data-schemas/ai-models.md\"\n\n    formats:\n      - \"TensorFlow Lite\"\n\n      - \"ONNX (future)\"\n\n    validation:\n      - \"Input/output compatibility\"\n\n      - \"Version tracking\"\n\n      - \"Performance metrics\"\n\nSchema_Dependencies:\n  battle_system:\n    core_types:\n      - \"ID\"\n\n      - \"Timestamp\"\n\n      - \"ActionType\"\n\n    validation:\n      - \"JSON serialization\"\n\n      - \"WebSocket compatibility\"\n\n      - \"Language interop\"\n</code></pre>"},{"location":"meta/implementation/ai/agenic-context-index/#ai-system-integration","title":"AI System Integration","text":"<p>AI Integration</p> <p>Details how AI components integrate with the game systems, including model deployment, inference patterns, and cultural alignment validation.</p> <pre><code>Model_Architecture:\n  inference:\n    platform: \"Raspberry Pi 5 + AI HAT+\"\n    constraints:\n      - \"Memory footprint\"\n\n      - \"Inference latency\"\n\n      - \"Power consumption\"\n\n    validation: \"technical/ai-system/behavior-model.md\"\n\n  training:\n    platform: \"Mac Mini M1\"\n    requirements:\n      - \"TensorFlow environment\"\n\n      - \"Training data pipeline\"\n\n      - \"Validation datasets\"\n\n    documentation: \"technical/ai-system/training-pipeline.md\"\n\nCultural_Integration:\n  behavior_patterns:\n    source: \"world_building/foundations.md\"\n    validation:\n      - \"Cultural authenticity\"\n\n      - \"Gameplay alignment\"\n\n      - \"Player experience\"\n\n  decision_making:\n    frameworks:\n      - \"Hoodoo traditions\"\n\n      - \"Cultural practices\"\n\n      - \"Historical context\"\n\n    validation: \"world_building/cultural_validation.md\"\n</code></pre>"},{"location":"meta/implementation/ai/agenic-context-index/#documentation-generation","title":"Documentation Generation","text":"<p>Doc Generation</p> <p>Defines patterns for maintaining and generating project documentation, ensuring consistency and completeness across all documentation types.</p> <p>```yaml Generation_Patterns:   daily_logs:     script: \"docs/gen_logs.py\"     triggers:       - \"New implementation\"</p> <pre><code>  - \"Design decisions\"\n\n  - \"Cultural additions\"\n\nvalidation:\n  - \"Format consistency\"\n\n  - \"Cross-references\"\n\n  - \"Cultural accuracy\"\n</code></pre> <p>technical_docs:     update_frequency: \"Per sprint\"     key_sections:       - \"API documentation\"</p> <pre><code>  - \"Schema updates\"\n\n  - \"Architecture changes\"\n\nvalidation:\n  - \"Technical accuracy\"\n\n  - \"Implementation alignment\"\n\n  - \"Cultural considerations\"\n</code></pre> <p>Documentation_Flow:   content_hierarchy:     - \"Project overview\"</p> <pre><code>- \"Technical specifications\"\n\n- \"Implementation details\"\n\n- \"Cultural integration\"\n</code></pre> <p>cross_validation:     - \"Technical accuracy\"</p> <pre><code>- \"Cultural alignment\"\n\n- \"Implementation feasibility\"\n</code></pre>"},{"location":"meta/implementation/ai/architecture/","title":"AI Implementation Architecture","text":""},{"location":"meta/implementation/ai/architecture/#overview","title":"Overview","text":"<p>The AI system is implemented in Python, leveraging the Raspberry Pi AI HAT+ for hardware acceleration and Mac Mini M1 for training. The system consists of three main components:</p> <ul> <li> <p>Behavior Model</p> </li> <li> <p>Training Pipeline</p> </li> <li> <p>Difficulty System</p> </li> </ul>"},{"location":"meta/implementation/ai/architecture/#system-architecture","title":"System Architecture","text":"<pre><code>graph TD\n    A[Game State] --&gt; B[State Processor]\n\n    B --&gt; C[Behavior Model]\n\n    C --&gt; D[Action Selector]\n\n    D --&gt; E[Action Validator]\n\n    E --&gt; F[Game Action]\n\n    G[Training Data] --&gt; H[Training Pipeline]\n\n    H --&gt; I[Model Updates]\n\n    I --&gt; C\n\n    J[Difficulty Settings] --&gt; K[Difficulty Manager]\n\n    K --&gt; C\n</code></pre>"},{"location":"meta/implementation/ai/architecture/#core-components","title":"Core Components","text":""},{"location":"meta/implementation/ai/architecture/#1-behavior-model","title":"1. Behavior Model","text":"<pre><code>class BehaviorModel:\n    def __init__(self, config: Dict[str, Any]):\n        self.model = self._load_model()\n        self.processor = StateProcessor()\n        self.validator = ActionValidator()\n\n    def process_state(self, state: GameState) -&gt; Action:\n\n        \"\"\"Process game state and select action.\n\n        Args:\n            state: Current game state\n\n        Returns:\n            Selected action\n        \"\"\"\n        state_vector = self.processor.process(state)\n        action_probs = self.model.predict(state_vector)\n        return self.select_action(action_probs)\n\n    def select_action(self, probs: np.ndarray) -&gt; Action:\n\n        \"\"\"Select action based on probability distribution.\n\n        Args:\n            probs: Action probability distribution\n\n        Returns:\n            Selected action\n        \"\"\"\n        action = self._sample_action(probs)\n        if not self.validator.is_valid(action):\n            return self._get_fallback_action()\n        return action\n</code></pre>"},{"location":"meta/implementation/ai/architecture/#2-training-pipeline","title":"2. Training Pipeline","text":"<pre><code>class TrainingPipeline:\n    def __init__(self, config: Dict[str, Any]):\n        self.model = BehaviorModel(config)\n        self.optimizer = self._create_optimizer()\n        self.data_collector = DataCollector()\n\n    def train(self, episodes: int):\n        \"\"\"Train model on collected gameplay data.\n\n        Args:\n            episodes: Number of episodes to train\n        \"\"\"\n        for episode in range(episodes):\n            batch = self.data_collector.get_batch()\n            loss = self._train_step(batch)\n            self._update_model(loss)\n\n    def _train_step(self, batch: TrainingBatch) -&gt; float:\n\n        \"\"\"Perform single training step.\n\n        Args:\n            batch: Training data batch\n\n        Returns:\n            Training loss\n        \"\"\"\n        state_vectors = self.processor.process_batch(batch.states)\n        action_probs = self.model.predict_batch(state_vectors)\n        loss = self._compute_loss(action_probs, batch.actions)\n        return loss\n</code></pre>"},{"location":"meta/implementation/ai/architecture/#3-difficulty-system","title":"3. Difficulty System","text":"<pre><code>class DifficultyManager:\n    def __init__(self, config: Dict[str, Any]):\n        self.config = config\n        self.current_difficulty = config.get('initial_difficulty', 0.5)\n        self.adaptation_rate = config.get('adaptation_rate', 0.1)\n\n    def adjust_difficulty(self, performance: float):\n        \"\"\"Adjust difficulty based on player performance.\n\n        Args:\n            performance: Player performance metric (0-1)\n\n        \"\"\"\n        target = self._calculate_target(performance)\n        self.current_difficulty = self._smooth_adjust(\n            self.current_difficulty,\n            target,\n            self.adaptation_rate\n        )\n\n    def get_behavior_weights(self) -&gt; Dict[str, float]:\n\n        \"\"\"Get current behavior weights based on difficulty.\n\n        Returns:\n            Dictionary of behavior weights\n        \"\"\"\n        return {\n            'aggression': self._scale_weight(0.3, 0.8),\n            'defense': self._scale_weight(0.5, 0.9),\n            'ability_usage': self._scale_weight(0.4, 0.95),\n            'target_selection': self._scale_weight(0.6, 0.9)\n        }\n</code></pre>"},{"location":"meta/implementation/ai/architecture/#performance-optimization","title":"Performance Optimization","text":""},{"location":"meta/implementation/ai/architecture/#1-hardware-acceleration","title":"1. Hardware Acceleration","text":"<pre><code>class AIHardware:\n    def __init__(self):\n        self.accelerator = self._initialize_hat()\n        self.optimizer = self._create_optimizer()\n\n    def optimize_model(self, model: BehaviorModel):\n        \"\"\"Optimize model for hardware acceleration.\n\n        Args:\n            model: Behavior model to optimize\n        \"\"\"\n        optimized = self.optimizer.optimize(model)\n        self.accelerator.load_model(optimized)\n\n    def predict(self, state_vector: np.ndarray) -&gt; np.ndarray:\n\n        \"\"\"Run prediction on hardware accelerator.\n\n        Args:\n            state_vector: Input state vector\n\n        Returns:\n            Action probability distribution\n        \"\"\"\n        return self.accelerator.predict(state_vector)\n</code></pre>"},{"location":"meta/implementation/ai/architecture/#2-memory-management","title":"2. Memory Management","text":"<pre><code>class MemoryManager:\n    def __init__(self, config: Dict[str, Any]):\n        self.max_cache = config.get('max_cache_mb', 256)\n        self.cache = LRUCache(self.max_cache)\n\n    def cache_state(self, state_hash: str, result: np.ndarray):\n        \"\"\"Cache state processing result.\n\n        Args:\n            state_hash: Hash of game state\n            result: Processing result\n        \"\"\"\n        if self.cache.size &lt; self.max_cache:\n            self.cache.put(state_hash, result)\n\n    def get_cached(self, state_hash: str) -&gt; Optional[np.ndarray]:\n\n        \"\"\"Get cached result if available.\n\n        Args:\n            state_hash: Hash of game state\n\n        Returns:\n            Cached result if available\n        \"\"\"\n        return self.cache.get(state_hash)\n</code></pre>"},{"location":"meta/implementation/ai/architecture/#integration-points","title":"Integration Points","text":""},{"location":"meta/implementation/ai/architecture/#1-game-server-integration","title":"1. Game Server Integration","text":"<pre><code>class AIServer:\n    def __init__(self, config: Dict[str, Any]):\n        self.model = BehaviorModel(config)\n        self.difficulty = DifficultyManager(config)\n        self.hardware = AIHardware()\n\n    async def process_turn(self, state: GameState) -&gt; Action:\n\n        \"\"\"Process game turn and return action.\n\n        Args:\n            state: Current game state\n\n        Returns:\n            Selected action\n        \"\"\"\n        weights = self.difficulty.get_behavior_weights()\n        return await self.model.process_state(state, weights)\n</code></pre>"},{"location":"meta/implementation/ai/architecture/#2-training-integration","title":"2. Training Integration","text":"<pre><code>class TrainingServer:\n    def __init__(self, config: Dict[str, Any]):\n        self.pipeline = TrainingPipeline(config)\n        self.scheduler = TrainingScheduler()\n\n    async def train_model(self):\n        \"\"\"Run training pipeline on collected data.\"\"\"\n        while True:\n            if self.scheduler.should_train():\n                await self.pipeline.train(episodes=100)\n            await asyncio.sleep(60)\n</code></pre>"},{"location":"meta/implementation/ai/architecture/#configuration","title":"Configuration","text":"<pre><code># ai_config.yaml\n\nmodel:\n  type: \"transformer\"\n  hidden_size: 256\n  num_layers: 4\n  dropout: 0.1\n\ntraining:\n  batch_size: 32\n  learning_rate: 0.001\n  episodes_per_update: 100\n  max_memory: 10000\n\ndifficulty:\n  initial_level: 0.5\n  adaptation_rate: 0.1\n  min_level: 0.2\n  max_level: 0.95\n\nhardware:\n  max_cache_mb: 256\n  optimize_for_inference: true\n  use_fp16: true\n</code></pre>"},{"location":"meta/implementation/ai/architecture/#ai-system-architecture","title":"AI System Architecture","text":""},{"location":"meta/implementation/ai/architecture/#overview_1","title":"Overview","text":"<p>The AI system consists of two main components: 1. Training pipeline on Mac Mini M1 2. Inference system on Raspberry Pi</p>"},{"location":"meta/implementation/ai/architecture/#system-components","title":"System Components","text":""},{"location":"meta/implementation/ai/architecture/#1-training-system-mac-mini-m1","title":"1. Training System (Mac Mini M1)","text":"<pre><code>graph TD\n    A[Battle Data] --&gt; B[Data Collection]\n\n    B --&gt; C[Feature Extraction]\n\n    D[Model Training]\n    C --&gt; D\n\n    D --&gt; E[Model Export]\n\n    E --&gt; F[TFLite Model]\n</code></pre>"},{"location":"meta/implementation/ai/architecture/#components","title":"Components:","text":"<ul> <li> <p>Data Collector: Records battle states and outcomes</p> </li> <li> <p>Feature Extractor: Converts battle states to model inputs</p> </li> <li> <p>Model Trainer: Trains model using TensorFlow</p> </li> <li> <p>Model Exporter: Exports to TFLite format</p> </li> </ul>"},{"location":"meta/implementation/ai/architecture/#2-inference-system-raspberry-pi","title":"2. Inference System (Raspberry Pi)","text":"<pre><code>graph LR\n    A[Game State] --&gt; B[Feature Extraction]\n\n    B --&gt; C[TFLite Inference]\n\n    C --&gt; D[Action Selection]\n\n    D --&gt; E[Battle System]\n</code></pre>"},{"location":"meta/implementation/ai/architecture/#components_1","title":"Components:","text":"<ul> <li> <p>Feature Extractor: Converts current state to model input</p> </li> <li> <p>TFLite Runtime: Runs model inference</p> </li> <li> <p>Action Selector: Chooses actions based on model output</p> </li> </ul>"},{"location":"meta/implementation/ai/architecture/#implementation-details","title":"Implementation Details","text":""},{"location":"meta/implementation/ai/architecture/#1-model-architecture","title":"1. Model Architecture","text":"<pre><code>def create_model() -&gt; tf.keras.Model:\n\n    \"\"\"Create battle model\"\"\"\n    return tf.keras.Sequential([\n        tf.keras.layers.Dense(64, activation='relu'),\n        tf.keras.layers.Dense(32, activation='relu'),\n        tf.keras.layers.Dense(3, activation='softmax')  # 3 actions\n\n    ])\n</code></pre>"},{"location":"meta/implementation/ai/architecture/#2-feature-extraction","title":"2. Feature Extraction","text":"<pre><code>def extract_features(state: BattleState) -&gt; np.ndarray:\n\n    \"\"\"Extract model features from battle state\"\"\"\n    features = [\n        state.player.health / 100.0,\n        state.player.energy / 100.0,\n        state.ai.health / 100.0,\n        state.ai.energy / 100.0,\n        state.round / 20.0,\n        len(state.player.status) / 5.0,\n        len(state.ai.status) / 5.0\n    ]\n    return np.array(features, dtype=np.float32)\n</code></pre>"},{"location":"meta/implementation/ai/architecture/#3-action-selection","title":"3. Action Selection","text":"<pre><code>def select_action(probs: np.ndarray, difficulty: float) -&gt; int:\n\n    \"\"\"Select action using difficulty-based temperature scaling\"\"\"\n\n    temperature = 1.0 / max(0.2, min(0.95, difficulty))\n    scaled = probs ** temperature\n\n    scaled /= scaled.sum()\n    return np.random.choice(len(scaled), p=scaled)\n</code></pre>"},{"location":"meta/implementation/ai/architecture/#4-training-loop","title":"4. Training Loop","text":"<pre><code>def train_model(model: tf.keras.Model,\n               dataset: tf.data.Dataset,\n               epochs: int = 10):\n    \"\"\"Train model on battle data\"\"\"\n    model.compile(\n        optimizer='adam',\n        loss='sparse_categorical_crossentropy',\n        metrics=['accuracy']\n    )\n\n    model.fit(\n        dataset,\n        epochs=epochs,\n        validation_split=0.2\n    )\n</code></pre>"},{"location":"meta/implementation/ai/architecture/#5-model-export","title":"5. Model Export","text":"<pre><code>def export_model(model: tf.keras.Model, path: str):\n    \"\"\"Export model for Raspberry Pi\"\"\"\n    converter = tf.lite.TFLiteConverter.from_keras_model(model)\n    converter.optimizations = [tf.lite.Optimize.DEFAULT]\n    converter.target_spec.supported_types = [tf.float32]\n\n    tflite_model = converter.convert()\n    with open(path, 'wb') as f:\n        f.write(tflite_model)\n</code></pre>"},{"location":"meta/implementation/ai/architecture/#deployment-flow","title":"Deployment Flow","text":"<ol> <li> <p>Training (Mac Mini)</p> </li> <li> <p>Collect battle data</p> </li> <li> <p>Train model using TensorFlow</p> </li> <li> <p>Export to TFLite format</p> </li> <li> <p>Test inference speed</p> </li> <li> <p>Deployment (Raspberry Pi)</p> </li> <li> <p>Copy TFLite model</p> </li> <li> <p>Initialize interpreter</p> </li> <li> <p>Set up WebSocket connection</p> </li> <li> <p>Start battle service</p> </li> </ol>"},{"location":"meta/implementation/ai/architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"meta/implementation/ai/architecture/#mac-mini-m1","title":"Mac Mini M1","text":"<ul> <li> <p>Use M1 acceleration for training</p> </li> <li> <p>Batch training data</p> </li> <li> <p>Monitor training metrics</p> </li> <li> <p>Validate model performance</p> </li> </ul>"},{"location":"meta/implementation/ai/architecture/#raspberry-pi","title":"Raspberry Pi","text":"<ul> <li> <p>Use TFLite for efficient inference</p> </li> <li> <p>Minimize feature extraction time</p> </li> <li> <p>Cache model predictions</p> </li> <li> <p>Monitor memory usage</p> </li> </ul>"},{"location":"meta/implementation/ai/architecture/#error-handling","title":"Error Handling","text":"<pre><code>class AISystem:\n    \"\"\"Main AI system for battles\"\"\"\n    def __init__(self, model_path: str):\n        try:\n            self.interpreter = tf.lite.Interpreter(model_path=model_path)\n            self.interpreter.allocate_tensors()\n        except Exception as e:\n            logger.error(f\"Failed to load model: {e}\")\n            raise\n\n    def get_action(self, state: BattleState) -&gt; Action:\n\n        \"\"\"Get next action safely\"\"\"\n        try:\n            features = extract_features(state)\n            probs = run_inference(self.interpreter, features)\n            action_idx = select_action(probs, state.difficulty)\n            return ACTIONS[action_idx]\n        except Exception as e:\n            logger.error(f\"Error getting action: {e}\")\n            return ACTIONS[0]  # Default to basic attack\n</code></pre>"},{"location":"meta/implementation/ai/architecture/#monitoring","title":"Monitoring","text":"<ul> <li> <p>AI performance</p> </li> <li> <p>Resource utilization</p> </li> <li> <p>Error tracking</p> </li> <li> <p>Health metrics</p> </li> </ul>"},{"location":"meta/implementation/client/architecture/","title":"Client Implementation Guide","text":""},{"location":"meta/implementation/client/architecture/#overview","title":"Overview","text":"<p>The client implementation for The Path (AI-Pi) focuses on:</p> <ul> <li> <p>Efficient state management</p> </li> <li> <p>Responsive UI</p> </li> <li> <p>Hardware acceleration</p> </li> <li> <p>Network optimization</p> </li> </ul>"},{"location":"meta/implementation/client/architecture/#core-architecture","title":"Core Architecture","text":"<pre><code>// Core client types\ninterface GameClient {\n    // Client state\n    state: GameState;\n    connection: NetworkConnection;\n    renderer: GameRenderer;\n    input: InputManager;\n\n    // Configuration\n    config: ClientConfig;\n\n    // Event handlers\n    onUpdate: (state: GameState) =&gt; void;\n    onError: (error: GameError) =&gt; void;\n}\n\ninterface ClientConfig {\n    serverUrl: string;\n    updateRate: number;\n    renderSettings: RenderSettings;\n    inputSettings: InputSettings;\n}\n</code></pre>"},{"location":"meta/implementation/client/architecture/#implementation-components","title":"Implementation Components","text":""},{"location":"meta/implementation/client/architecture/#1-state-management","title":"1. State Management","text":"<pre><code>class GameState {\n    private state: BattleState;\n    private updates: StateUpdate[] = [];\n    private readonly maxUpdates = 100;\n\n    constructor() {\n        this.state = new BattleState();\n        makeObservable(this);\n    }\n\n    @action\n    update(update: StateUpdate): void {\n        // Apply update\n        this.state.apply(update);\n\n        // Store update\n        this.updates.push(update);\n        if (this.updates.length &gt; this.maxUpdates) {\n            this.updates.shift();\n        }\n\n        // Notify observers\n        this.notifyUpdate();\n    }\n\n    @computed\n    get currentState(): BattleState {\n        return this.state;\n    }\n}\n</code></pre>"},{"location":"meta/implementation/client/architecture/#2-rendering-system","title":"2. Rendering System","text":"<pre><code>class GameRenderer {\n    private canvas: HTMLCanvasElement;\n    private ctx: CanvasRenderingContext2D;\n    private sprites: Map&lt;string, HTMLImageElement&gt;;\n    private animations: Map&lt;string, Animation&gt;;\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.canvas = canvas;\n        this.ctx = canvas.getContext('2d')!;\n        this.setupCanvas();\n    }\n\n    public render(state: GameState): void {\n        // Clear canvas\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        // Update animations\n        this.updateAnimations();\n\n        // Render layers\n        this.renderBackground();\n        this.renderCharacters(state.characters);\n        this.renderEffects();\n        this.renderUI();\n    }\n\n    private setupCanvas(): void {\n        // Enable hardware acceleration\n        this.canvas.style.transform = 'translateZ(0)';\n        this.ctx.imageSmoothingEnabled = true;\n\n        // Set up resize handler\n        window.addEventListener('resize', this.handleResize);\n    }\n}\n</code></pre>"},{"location":"meta/implementation/client/architecture/#3-network-layer","title":"3. Network Layer","text":"<pre><code>class NetworkManager {\n    private socket: WebSocket;\n    private reconnectAttempts: number = 0;\n    private readonly maxReconnectAttempts = 5;\n\n    constructor(serverUrl: string) {\n        this.socket = this.createSocket(serverUrl);\n        this.setupEventHandlers();\n    }\n\n    public send(message: GameMessage): void {\n        if (this.socket.readyState === WebSocket.OPEN) {\n            this.socket.send(JSON.stringify(message));\n        } else {\n            this.queueMessage(message);\n        }\n    }\n\n    private setupEventHandlers(): void {\n        this.socket.onmessage = this.handleMessage;\n        this.socket.onclose = this.handleClose;\n        this.socket.onerror = this.handleError;\n    }\n\n    private handleMessage = (event: MessageEvent): void =&gt; {\n        try {\n            const message = JSON.parse(event.data);\n            this.processMessage(message);\n        } catch (error) {\n            console.error('Failed to process message:', error);\n        }\n    }\n}\n</code></pre>"},{"location":"meta/implementation/client/architecture/#implementation-guidelines","title":"Implementation Guidelines","text":"<p>For AI-assisted development:</p> <ol> <li>State Updates</li> </ol> <pre><code>class StateManager {\n    private state: GameState;\n    private updateQueue: StateUpdate[] = [];\n\n    @action\n    processUpdates(): void {\n        // Process all queued updates\n        while (this.updateQueue.length &gt; 0) {\n            const update = this.updateQueue.shift()!;\n            try {\n                this.applyUpdate(update);\n            } catch (error) {\n                console.error('Failed to apply update:', error);\n                this.handleUpdateError(error);\n            }\n        }\n    }\n\n    private applyUpdate(update: StateUpdate): void {\n        // Validate update\n        if (!this.validateUpdate(update)) {\n            throw new Error('Invalid update');\n        }\n\n        // Apply changes\n        this.state.apply(update);\n\n        // Notify observers\n        this.notifyObservers();\n    }\n}\n</code></pre> <ol> <li>Performance Optimization</li> </ol> <pre><code>class PerformanceOptimizer {\n    private readonly fpsTarget = 60;\n    private frameTime = 1000 / this.fpsTarget;\n    private lastFrameTime = 0;\n\n    public optimizeFrame(renderFn: () =&gt; void): void {\n        const now = performance.now();\n        const delta = now - this.lastFrameTime;\n\n        if (delta &gt;= this.frameTime) {\n            // Render frame\n            renderFn();\n            this.lastFrameTime = now;\n\n            // Update metrics\n            this.updateMetrics(delta);\n        }\n    }\n\n    private updateMetrics(delta: number): void {\n        const fps = 1000 / delta;\n        if (fps &lt; this.fpsTarget * 0.8) {\n\n            this.optimizeRendering();\n        }\n    }\n}\n</code></pre> <ol> <li>Error Handling</li> </ol> <pre><code>class ErrorHandler {\n    private errors: GameError[] = [];\n    private readonly maxErrors = 100;\n\n    public handleError(error: Error): void {\n        const gameError = this.createGameError(error);\n        this.logError(gameError);\n        this.notifyUser(gameError);\n\n        if (this.isRecoverable(gameError)) {\n            this.recover(gameError);\n        } else {\n            this.handleFatalError(gameError);\n        }\n    }\n\n    private createGameError(error: Error): GameError {\n        return {\n            code: this.getErrorCode(error),\n            message: error.message,\n            timestamp: Date.now(),\n            recoverable: this.isRecoverable(error)\n        };\n    }\n}\n</code></pre>"},{"location":"meta/implementation/client/architecture/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"meta/implementation/client/architecture/#1-unit-tests","title":"1. Unit Tests","text":"<pre><code>describe('GameState', () =&gt; {\n    let state: GameState;\n\n    beforeEach(() =&gt; {\n        state = new GameState();\n    });\n\n    it('should apply updates correctly', () =&gt; {\n        // Arrange\n        const update = createTestUpdate();\n\n        // Act\n        state.update(update);\n\n        // Assert\n        expect(state.currentState).toMatchSnapshot();\n    });\n\n    it('should handle invalid updates', () =&gt; {\n        // Arrange\n        const invalidUpdate = createInvalidUpdate();\n\n        // Act &amp; Assert\n        expect(() =&gt; state.update(invalidUpdate))\n            .toThrow('Invalid update');\n    });\n});\n</code></pre>"},{"location":"meta/implementation/client/architecture/#2-integration-tests","title":"2. Integration Tests","text":"<pre><code>describe('Client Integration', () =&gt; {\n    let client: GameClient;\n    let mockServer: MockWebSocket;\n\n    beforeEach(() =&gt; {\n        mockServer = new MockWebSocket();\n        client = new GameClient({\n            serverUrl: 'ws://localhost:8080'\n        });\n    });\n\n    it('should connect and receive updates', async () =&gt; {\n        // Arrange\n        const update = createTestUpdate();\n\n        // Act\n        await client.connect();\n        mockServer.send(update);\n\n        // Assert\n        expect(client.state.currentState).toEqual(\n            expect.objectContaining(update)\n        );\n    });\n});\n</code></pre>"},{"location":"meta/implementation/client/architecture/#client-architecture","title":"Client Architecture","text":""},{"location":"meta/implementation/client/architecture/#overview_1","title":"Overview","text":"<p>The client is a React application using:</p> <ul> <li> <p>Material-UI for components</p> </li> <li> <p>Redux for state management</p> </li> <li> <p>Socket.IO for real-time communication</p> </li> <li> <p>TypeScript for type safety</p> </li> </ul>"},{"location":"meta/implementation/client/architecture/#component-structure","title":"Component Structure","text":"<pre><code>graph TD\n    A[App] --&gt; B[Auth]\n\n    A --&gt; C[Battle]\n\n    A --&gt; D[Profile]\n\n    B --&gt; B1[Login]\n\n    B --&gt; B2[Register]\n\n    C --&gt; C1[BattleList]\n\n    C --&gt; C2[BattleView]\n\n    C --&gt; C3[ActionPanel]\n\n    D --&gt; D1[UserInfo]\n\n    D --&gt; D2[BattleHistory]\n</code></pre>"},{"location":"meta/implementation/client/architecture/#core-components","title":"Core Components","text":""},{"location":"meta/implementation/client/architecture/#1-battle-view","title":"1. Battle View","text":"<pre><code>// Main battle component\nconst BattleView: React.FC = () =&gt; {\n    const battle = useSelector(selectBattle);\n    const dispatch = useDispatch();\n\n    return (\n        &lt;Box sx={{ p: 2 }}&gt;\n            &lt;Grid container spacing={2}&gt;\n                {/* Player Status */}\n\n                &lt;Grid item xs={6}&gt;\n                    &lt;PlayerCard\n                        player={battle.player}\n                        isActive={battle.currentTurn === battle.player.id}\n                    /&gt;\n                &lt;/Grid&gt;\n\n                {/* AI Status */}\n\n                &lt;Grid item xs={6}&gt;\n                    &lt;PlayerCard\n                        player={battle.ai}\n                        isActive={battle.currentTurn === battle.ai.id}\n                    /&gt;\n                &lt;/Grid&gt;\n\n                {/* Action Panel */}\n\n                &lt;Grid item xs={12}&gt;\n                    &lt;ActionPanel\n                        onAction={(action) =&gt; dispatch(submitAction(action))}\n                        disabled={battle.currentTurn !== battle.player.id}\n                    /&gt;\n                &lt;/Grid&gt;\n            &lt;/Grid&gt;\n        &lt;/Box&gt;\n    );\n};\n</code></pre>"},{"location":"meta/implementation/client/architecture/#2-action-panel","title":"2. Action Panel","text":"<pre><code>// Battle actions component\nconst ActionPanel: React.FC&lt;ActionPanelProps&gt; = ({\n    onAction,\n    disabled\n}) =&gt; {\n    return (\n        &lt;Card sx={{ p: 2 }}&gt;\n            &lt;Stack direction=\"row\" spacing={2}&gt;\n                &lt;Button\n                    variant=\"contained\"\n                    onClick={() =&gt; onAction('ATTACK')}\n                    disabled={disabled}\n                &gt;\n                    Attack\n                &lt;/Button&gt;\n                &lt;Button\n                    variant=\"contained\"\n                    onClick={() =&gt; onAction('DEFEND')}\n                    disabled={disabled}\n                &gt;\n                    Defend\n                &lt;/Button&gt;\n                &lt;Button\n                    variant=\"contained\"\n                    onClick={() =&gt; onAction('SPECIAL')}\n                    disabled={disabled}\n                &gt;\n                    Special\n                &lt;/Button&gt;\n            &lt;/Stack&gt;\n        &lt;/Card&gt;\n    );\n};\n</code></pre>"},{"location":"meta/implementation/client/architecture/#state-management","title":"State Management","text":""},{"location":"meta/implementation/client/architecture/#1-battle-state","title":"1. Battle State","text":"<pre><code>// Battle state slice\ninterface BattleState {\n    id: string | null;\n    player: PlayerState;\n    ai: PlayerState;\n    currentTurn: string;\n    round: number;\n    status: 'active' | 'finished';\n    winner: string | null;\n}\n\nconst battleSlice = createSlice({\n    name: 'battle',\n    initialState,\n    reducers: {\n        updateBattle: (state, action) =&gt; {\n            return { ...state, ...action.payload };\n        },\n        submitAction: (state, action) =&gt; {\n            // Handle in middleware\n        },\n        endBattle: (state, action) =&gt; {\n            state.status = 'finished';\n            state.winner = action.payload;\n        }\n    }\n});\n</code></pre>"},{"location":"meta/implementation/client/architecture/#2-websocket-integration","title":"2. WebSocket Integration","text":"<pre><code>// Socket middleware\nconst socketMiddleware = (socket: Socket) =&gt;\n    (store: MiddlewareAPI) =&gt; (next: Dispatch) =&gt; (action: Action) =&gt; {\n\n    if (action.type === 'battle/submitAction') {\n        socket.emit('BATTLE_ACTION', {\n            battleId: store.getState().battle.id,\n            action: action.payload\n        });\n    }\n\n    return next(action);\n};\n\n// Socket event handlers\nsocket.on('BATTLE_UPDATE', (data) =&gt; {\n    store.dispatch(updateBattle(data));\n});\n\nsocket.on('BATTLE_END', (data) =&gt; {\n    store.dispatch(endBattle(data.winner));\n});\n</code></pre>"},{"location":"meta/implementation/client/architecture/#styling","title":"Styling","text":""},{"location":"meta/implementation/client/architecture/#1-theme-configuration","title":"1. Theme Configuration","text":"<pre><code>// Material-UI theme\n\nconst theme = createTheme({\n    palette: {\n        primary: {\n            main: '#1976d2'\n\n        },\n        secondary: {\n            main: '#dc004e'\n\n        }\n    },\n    components: {\n        MuiButton: {\n            styleOverrides: {\n                root: {\n                    margin: '8px'\n                }\n            }\n        },\n        MuiCard: {\n            styleOverrides: {\n                root: {\n                    padding: '16px'\n                }\n            }\n        }\n    }\n});\n</code></pre>"},{"location":"meta/implementation/client/architecture/#2-component-styles","title":"2. Component Styles","text":"<pre><code>// Styled components\nconst PlayerCard = styled(Card)(({ theme }) =&gt; ({\n    padding: theme.spacing(2),\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    '&amp; .health-bar': {\n\n        marginTop: theme.spacing(1)\n    },\n    '&amp; .status-list': {\n\n        marginTop: theme.spacing(1),\n        display: 'flex',\n        gap: theme.spacing(1)\n    }\n}));\n\nconst ActionButton = styled(Button)(({ theme }) =&gt; ({\n    minWidth: 120,\n    height: 48,\n    '&amp;.disabled': {\n        opacity: 0.7\n    }\n}));\n</code></pre>"},{"location":"meta/implementation/client/architecture/#error-handling","title":"Error Handling","text":"<p>```typescript // Error boundary component class BattleErrorBoundary extends React.Component {     state = { hasError: false };</p> <pre><code>static getDerivedStateFromError(error: Error) {\n    return { hasError: true };\n}\n\ncomponentDidCatch(error: Error, info: ErrorInfo) {\n    console.error('Battle error:', error, info);\n}\n\nrender() {\n    if (this.state.hasError) {\n        return (\n            &lt;Alert severity=\"error\"&gt;\n                Something went wrong in the battle.\n                Please refresh the page.\n            &lt;/Alert&gt;\n        );\n    }\n    return this.props.children;\n}\n</code></pre> <p>}</p>"},{"location":"meta/implementation/client/architecture/#monitoring","title":"Monitoring","text":"<ul> <li> <p>Client performance</p> </li> <li> <p>Network latency</p> </li> <li> <p>Error tracking</p> </li> <li> <p>Resource usage</p> </li> </ul>"},{"location":"meta/implementation/server/architecture/","title":"Server Implementation Guide","text":""},{"location":"meta/implementation/server/architecture/#overview","title":"Overview","text":"<p>The server implementation for The Path (AI-Pi) uses Go for optimal performance and concurrency. Key features:</p> <ul> <li> <p>High-performance game state management</p> </li> <li> <p>Efficient AI integration</p> </li> <li> <p>Real-time processing</p> </li> <li> <p>Hardware optimization</p> </li> </ul>"},{"location":"meta/implementation/server/architecture/#core-architecture","title":"Core Architecture","text":"<pre><code>// Core server types\ntype GameServer struct {\n    // Server state\n    state       *GameState\n\n    aiManager   *AIManager\n\n    clients     map[string]*Client\n\n    // Channels\n    actionChan  chan Action\n    updateChan  chan Update\n\n    // Configuration\n    config      ServerConfig\n}\n\ntype ServerConfig struct {\n    Port            int     `json:\"port\"`\n    TickRate        int     `json:\"tickRate\"`\n    AIEnabled       bool    `json:\"aiEnabled\"`\n    MaxClients      int     `json:\"maxClients\"`\n    LogLevel        string  `json:\"logLevel\"`\n}\n</code></pre>"},{"location":"meta/implementation/server/architecture/#implementation-components","title":"Implementation Components","text":""},{"location":"meta/implementation/server/architecture/#1-state-management","title":"1. State Management","text":"<pre><code>type GameState struct {\n    sync.RWMutex\n\n    // Game state\n    Battle      *BattleState     `json:\"battle\"`\n\n    Players     map[string]*Player `json:\"players\"`\n\n    Round       int              `json:\"round\"`\n    Status      GameStatus       `json:\"status\"`\n\n    // Metrics\n    LastUpdate  time.Time        `json:\"lastUpdate\"`\n    TickCount   uint64          `json:\"tickCount\"`\n}\n\nfunc (s *GameState) Update() error {\n\n    s.Lock()\n    defer s.Unlock()\n\n    // Process pending actions\n    if err := s.processPendingActions(); err != nil {\n        return fmt.Errorf(\"process actions: %w\", err)\n    }\n\n    // Update AI state\n    if err := s.updateAI(); err != nil {\n        return fmt.Errorf(\"update AI: %w\", err)\n    }\n\n    // Update game state\n    s.Round++\n    s.LastUpdate = time.Now()\n    s.TickCount++\n\n    return nil\n}\n</code></pre>"},{"location":"meta/implementation/server/architecture/#2-network-layer","title":"2. Network Layer","text":"<pre><code>type NetworkManager struct {\n    // Network configuration\n    listener    net.Listener\n    clients     sync.Map\n\n    // Channels\n    incoming    chan []byte\n    outgoing    chan []byte\n\n    // Metrics\n    stats       *NetworkStats\n\n}\n\nfunc (nm *NetworkManager) Start(port int) error {\n\n    // Start TCP listener\n    listener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", port))\n    if err != nil {\n        return fmt.Errorf(\"start listener: %w\", err)\n    }\n    nm.listener = listener\n\n    // Handle connections\n    go nm.handleConnections()\n\n    // Process messages\n    go nm.processMessages()\n\n    return nil\n}\n</code></pre>"},{"location":"meta/implementation/server/architecture/#3-ai-integration","title":"3. AI Integration","text":"<pre><code>type AIManager struct {\n    // AI configuration\n    config      AIConfig\n    models      map[string]*AIModel\n\n    // State\n    state       *GameState\n\n    decisions   chan AIDecision\n\n    // Performance\n    metrics     *AIMetrics\n\n}\n\nfunc (am *AIManager) ProcessTurn() (*Action, error) {\n\n    // Get game state\n    state := am.state.GetState()\n\n    // Convert to AI format\n    aiState, err := ConvertToAIState(state)\n    if err != nil {\n        return nil, fmt.Errorf(\"convert state: %w\", err)\n    }\n\n    // Get AI decision\n    decision, err := am.RequestDecision(aiState)\n    if err != nil {\n        return nil, fmt.Errorf(\"get decision: %w\", err)\n    }\n\n    // Convert to action\n    action := ConvertToAction(decision)\n\n    return action, nil\n}\n</code></pre>"},{"location":"meta/implementation/server/architecture/#implementation-guidelines","title":"Implementation Guidelines","text":"<p>For AI-assisted development:</p> <ol> <li>Error Handling</li> </ol> <pre><code>// Error types\ntype GameError struct {\n    Code    ErrorCode\n    Message string\n    Err     error\n}\n\nfunc (e *GameError) Error() string {\n\n    if e.Err != nil {\n        return fmt.Sprintf(\"%s: %v\", e.Message, e.Err)\n    }\n    return e.Message\n}\n\n// Error handling\nfunc handleError(err error) *GameError {\n\n    switch e := err.(type) {\n    case *GameError:\n\n        return e\n    default:\n        return &amp;GameError{\n            Code:    ErrorInternal,\n            Message: \"Internal server error\",\n            Err:     err,\n        }\n    }\n}\n</code></pre> <ol> <li>Performance Optimization</li> </ol> <pre><code>type PerformanceMonitor struct {\n    metrics map[string]*Metric\n\n    mu      sync.RWMutex\n}\n\nfunc (pm *PerformanceMonitor) Track(name string, fn func() error) error {\n\n    start := time.Now()\n    err := fn()\n    duration := time.Since(start)\n\n    pm.mu.Lock()\n    defer pm.mu.Unlock()\n\n    metric := pm.metrics[name]\n    metric.Count++\n    metric.TotalTime += duration\n    metric.LastTime = duration\n\n    return err\n}\n</code></pre> <ol> <li>Resource Management</li> </ol> <pre><code>type ResourceManager struct {\n    // Resource limits\n    maxMemory   int64\n    maxCPU      float64\n\n    // Current usage\n    memoryUsage int64\n    cpuUsage    float64\n}\n\nfunc (rm *ResourceManager) AllocateResources(req ResourceRequest) error {\n\n    if !rm.canAllocate(req) {\n        return ErrInsufficientResources\n    }\n\n    rm.allocate(req)\n    return nil\n}\n</code></pre>"},{"location":"meta/implementation/server/architecture/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"meta/implementation/server/architecture/#1-unit-tests","title":"1. Unit Tests","text":"<pre><code>func TestGameState_Update(t *testing.T) {\n\n    tests := []struct {\n        name    string\n        state   *GameState\n\n        actions []Action\n        want    *GameState\n\n        wantErr bool\n    }{\n        // Test cases\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n\n            // Run test\n            err := tt.state.Update()\n\n            // Check results\n            if (err != nil) != tt.wantErr {\n                t.Errorf(\"Update() error = %v, wantErr %v\",\n                         err, tt.wantErr)\n            }\n\n            if !reflect.DeepEqual(tt.state, tt.want) {\n                t.Errorf(\"Update() state = %v, want %v\",\n                         tt.state, tt.want)\n            }\n        })\n    }\n}\n</code></pre>"},{"location":"meta/implementation/server/architecture/#2-integration-tests","title":"2. Integration Tests","text":"<pre><code>func TestServer_Integration(t *testing.T) {\n\n    // Setup test server\n    server := NewTestServer()\n    defer server.Close()\n\n    // Connect test client\n    client := NewTestClient()\n    defer client.Close()\n\n    // Run test scenarios\n    t.Run(\"ConnectAndAuth\", func(t *testing.T) {\n\n        // Test connection and authentication\n    })\n\n    t.Run(\"GameFlow\", func(t *testing.T) {\n\n        // Test game flow\n    })\n}\n</code></pre>"},{"location":"meta/implementation/server/architecture/#server-architecture","title":"Server Architecture","text":""},{"location":"meta/implementation/server/architecture/#overview_1","title":"Overview","text":"<p>The server is a Go application that handles:</p> <ul> <li> <p>WebSocket communication</p> </li> <li> <p>Battle state management</p> </li> <li> <p>AI system integration</p> </li> <li> <p>Basic authentication</p> </li> </ul>"},{"location":"meta/implementation/server/architecture/#system-components","title":"System Components","text":"<pre><code>graph TD\n    A[WebSocket Server] --&gt; B[Battle Manager]\n\n    B --&gt; C[AI System]\n\n    B --&gt; D[State Manager]\n\n    D --&gt; E[MongoDB]\n</code></pre>"},{"location":"meta/implementation/server/architecture/#core-components","title":"Core Components","text":""},{"location":"meta/implementation/server/architecture/#1-websocket-handler","title":"1. WebSocket Handler","text":"<pre><code>// WebSocket connection handler\ntype WSHandler struct {\n    upgrader websocket.Upgrader\n    battles  *BattleManager\n\n}\n\nfunc (h *WSHandler) HandleConnection(w http.ResponseWriter, r *http.Request) {\n\n    // Upgrade connection\n    conn, err := h.upgrader.Upgrade(w, r, nil)\n    if err != nil {\n        log.Printf(\"WebSocket upgrade failed: %v\", err)\n        return\n    }\n    defer conn.Close()\n\n    // Create client\n    client := &amp;Client{\n        conn:     conn,\n        send:     make(chan []byte, 256),\n        battles:  h.battles,\n    }\n\n    // Start client routines\n    go client.writePump()\n    client.readPump()\n}\n</code></pre>"},{"location":"meta/implementation/server/architecture/#2-battle-manager","title":"2. Battle Manager","text":"<pre><code>// Battle management\ntype BattleManager struct {\n    battles map[ID]*Battle\n\n    ai      *AISystem\n\n    mu      sync.RWMutex\n}\n\nfunc (m *BattleManager) CreateBattle(config BattleConfig) (*Battle, error) {\n\n    m.mu.Lock()\n    defer m.mu.Unlock()\n\n    // Create new battle\n    battle := &amp;Battle{\n        ID:        NewID(),\n        Players:   make(map[ID]*PlayerState),\n\n        Status:    BattleStatusActive,\n        StartTime: time.Now(),\n    }\n\n    // Add player\n    battle.Players[config.PlayerID] = &amp;PlayerState{\n        ID:     config.PlayerID,\n        Health: 100,\n        Energy: 100,\n    }\n\n    // Add AI\n    battle.Players[aiID] = &amp;PlayerState{\n        ID:    aiID,\n        Health: 100,\n        Energy: 100,\n        IsAI:  true,\n    }\n\n    // Set turn order\n    battle.TurnOrder = []ID{config.PlayerID, aiID}\n    battle.CurrentTurn = config.PlayerID\n\n    // Store battle\n    m.battles[battle.ID] = battle\n    return battle, nil\n}\n\nfunc (m *BattleManager) HandleAction(battleID ID, action Action) error {\n\n    m.mu.Lock()\n    defer m.mu.Unlock()\n\n    battle := m.battles[battleID]\n    if battle == nil {\n        return errors.New(\"battle not found\")\n    }\n\n    // Process action\n    result := battle.ProcessAction(action)\n\n    // Check for battle end\n    if battle.IsFinished() {\n        m.EndBattle(battleID)\n    }\n\n    // Get AI action if needed\n    if battle.CurrentTurn == aiID {\n        aiAction := m.ai.GetAction(battle.State())\n        go m.HandleAction(battleID, aiAction)\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"meta/implementation/server/architecture/#3-state-management","title":"3. State Management","text":"<pre><code>// Battle state\ntype Battle struct {\n    ID          ID                  `json:\"id\"`\n    Players     map[ID]*PlayerState `json:\"players\"`\n\n    TurnOrder   []ID               `json:\"turnOrder\"`\n    CurrentTurn ID                 `json:\"currentTurn\"`\n    Round       int                `json:\"round\"`\n    Status      BattleStatus       `json:\"status\"`\n    StartTime   time.Time          `json:\"startTime\"`\n}\n\nfunc (b *Battle) ProcessAction(action Action) ActionResult {\n\n    actor := b.Players[b.CurrentTurn]\n    target := b.GetTarget(action.TargetID)\n\n    // Process action\n    result := ActionResult{}\n    switch action.Type {\n    case ActionTypeAttack:\n        damage := calculateDamage(actor, target)\n        target.Health -= damage\n\n        result.Damage = damage\n\n    case ActionTypeDefend:\n        actor.Status = append(actor.Status, \"DEFENDED\")\n        result.StatusAdded = \"DEFENDED\"\n\n    case ActionTypeSpecial:\n        damage := calculateSpecialDamage(actor, target)\n        target.Health -= damage\n\n        result.Damage = damage\n    }\n\n    // Update turn\n    b.NextTurn()\n    return result\n}\n\nfunc (b *Battle) NextTurn() {\n\n    // Find next turn\n    for i, id := range b.TurnOrder {\n        if id == b.CurrentTurn {\n            nextIndex := (i + 1) % len(b.TurnOrder)\n            b.CurrentTurn = b.TurnOrder[nextIndex]\n            if nextIndex == 0 {\n                b.Round++\n            }\n            break\n        }\n    }\n}\n</code></pre>"},{"location":"meta/implementation/server/architecture/#4-websocket-events","title":"4. WebSocket Events","text":"<pre><code>// Event handling\ntype Client struct {\n    conn    *websocket.Conn\n\n    send    chan []byte\n    battles *BattleManager\n\n}\n\nfunc (c *Client) handleMessage(message []byte) {\n\n    var event struct {\n        Type string          `json:\"type\"`\n        Data json.RawMessage `json:\"data\"`\n    }\n\n    if err := json.Unmarshal(message, &amp;event); err != nil {\n        return\n    }\n\n    switch event.Type {\n    case \"CREATE_BATTLE\":\n        var config BattleConfig\n        json.Unmarshal(event.Data, &amp;config)\n        battle, _ := c.battles.CreateBattle(config)\n        c.sendBattleUpdate(battle)\n\n    case \"SUBMIT_ACTION\":\n        var action Action\n        json.Unmarshal(event.Data, &amp;action)\n        c.battles.HandleAction(action.BattleID, action)\n\n    case \"FORFEIT_BATTLE\":\n        var data struct {\n            BattleID ID `json:\"battleId\"`\n        }\n        json.Unmarshal(event.Data, &amp;data)\n        c.battles.EndBattle(data.BattleID)\n    }\n}\n\nfunc (c *Client) sendBattleUpdate(battle *Battle) {\n\n    event := BattleEvent{\n        Type: \"BATTLE_UPDATE\",\n        Data: battle,\n    }\n    data, _ := json.Marshal(event)\n    c.send &lt;- data\n\n}\n</code></pre>"},{"location":"meta/implementation/server/architecture/#error-handling","title":"Error Handling","text":"<p>```go // Error handling middleware func errorHandler(next http.Handler) http.Handler {     return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {</p> <pre><code>    defer func() {\n        if err := recover(); err != nil {\n            log.Printf(\"Panic: %v\", err)\n            http.Error(w, \"Internal server error\", http.StatusInternalServerError)\n        }\n    }()\n    next.ServeHTTP(w, r)\n})\n</code></pre> <p>}</p> <p>// Battle error handling func (m *BattleManager) HandleError(battleID ID, err error) {</p> <pre><code>log.Printf(\"Battle %s error: %v\", battleID, err)\n\n// End battle if needed\nif isFatalError(err) {\n    m.EndBattle(battleID)\n}\n</code></pre> <p>}</p>"},{"location":"meta/implementation/setup/project-setup/","title":"Project Setup Guide","text":""},{"location":"meta/implementation/setup/project-setup/#overview","title":"Overview","text":"<p>This guide covers the complete setup process for The Path (AI-Pi) development environment.</p>"},{"location":"meta/implementation/setup/project-setup/#directory-structure","title":"Directory Structure","text":"<pre><code>thepath-ai_pi/\n\n\u251c\u2500\u2500 server/                 # Go server\n\n\u2502   \u251c\u2500\u2500 cmd/               # Entry points\n\n\u2502   \u251c\u2500\u2500 internal/          # Internal packages\n\n\u2502   \u251c\u2500\u2500 pkg/               # Public packages\n\n\u2502   \u2514\u2500\u2500 go.mod            # Go dependencies\n\n\u251c\u2500\u2500 client/                # TypeScript client\n\n\u2502   \u251c\u2500\u2500 src/              # Source code\n\n\u2502   \u251c\u2500\u2500 public/           # Static assets\n\n\u2502   \u2514\u2500\u2500 package.json      # Node dependencies\n\n\u251c\u2500\u2500 ai/                    # Python AI system\n\n\u2502   \u251c\u2500\u2500 models/           # AI models\n\n\u2502   \u251c\u2500\u2500 training/         # Training system\n\n\u2502   \u2514\u2500\u2500 requirements.txt  # Python dependencies\n\n\u251c\u2500\u2500 docs/                 # Documentation\n\n\u251c\u2500\u2500 scripts/              # Build/deploy scripts\n\n\u2514\u2500\u2500 docker/               # Docker configs\n</code></pre>"},{"location":"meta/implementation/setup/project-setup/#prerequisites","title":"Prerequisites","text":""},{"location":"meta/implementation/setup/project-setup/#hardware-requirements","title":"Hardware Requirements","text":"<ul> <li> <p>Raspberry Pi 5 (8GB RAM recommended)</p> </li> <li> <p>AI HAT+ module</p> </li> <li> <p>Active cooling solution</p> </li> <li> <p>MicroSD card (32GB+ recommended)</p> </li> <li> <p>Optional: 7-inch touchscreen</p> </li> </ul>"},{"location":"meta/implementation/setup/project-setup/#software-requirements","title":"Software Requirements","text":"<ul> <li> <p>Go 1.21+</p> </li> <li> <p>Node.js 20+</p> </li> <li> <p>Python 3.11+</p> </li> <li> <p>Docker &amp; Docker Compose</p> </li> <li> <p>Git</p> </li> </ul>"},{"location":"meta/implementation/setup/project-setup/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"meta/implementation/setup/project-setup/#1-system-setup","title":"1. System Setup","text":"<pre><code># Update system\n\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install system dependencies\n\nsudo apt install -y \\\n\n    build-essential \\\n\n    python3-dev \\\n\n    python3-pip \\\n\n    nodejs \\\n    npm \\\n    docker.io \\\n    docker-compose\n\n# Enable Docker\n\nsudo systemctl enable docker\nsudo systemctl start docker\nsudo usermod -aG docker $USER\n</code></pre>"},{"location":"meta/implementation/setup/project-setup/#2-go-setup","title":"2. Go Setup","text":"<pre><code># Install Go\n\nwget https://go.dev/dl/go1.21.5.linux-arm64.tar.gz\n\nsudo tar -C /usr/local -xzf go1.21.5.linux-arm64.tar.gz\n\n# Add to PATH\n\necho 'export PATH=$PATH:/usr/local/go/bin' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Verify installation\n\ngo version\n</code></pre>"},{"location":"meta/implementation/setup/project-setup/#3-nodejs-setup","title":"3. Node.js Setup","text":"<pre><code># Install Node.js LTS\n\ncurl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\n\nsudo apt install -y nodejs\n\n# Install development tools\n\nnpm install -g typescript ts-node nodemon\n\n# Verify installation\n\nnode --version\n\nnpm --version\n</code></pre>"},{"location":"meta/implementation/setup/project-setup/#4-python-setup","title":"4. Python Setup","text":"<pre><code># Create virtual environment\n\npython3 -m venv venv\n\nsource venv/bin/activate\n\n# Install dependencies\n\npip install -r ai/requirements.txt\n\n# Verify installation\n\npython --version\n\npip list\n</code></pre>"},{"location":"meta/implementation/setup/project-setup/#5-ai-hat-setup","title":"5. AI HAT+ Setup","text":"<pre><code># Install AI HAT+ drivers\n\ncurl -sSL https://raw.githubusercontent.com/arducam/arducam-config-parser-dev/master/install.sh | sudo bash\n\n# Configure I2C\n\nsudo raspi-config nonint do_i2c 0\n\n# Test HAT+ connection\n\ni2cdetect -y 1\n</code></pre>"},{"location":"meta/implementation/setup/project-setup/#project-setup","title":"Project Setup","text":""},{"location":"meta/implementation/setup/project-setup/#1-clone-repository","title":"1. Clone Repository","text":"<pre><code># Clone project\n\ngit clone https://github.com/MaterDev/thepath-ai_pi.git\n\ncd thepath-ai_pi\n\n# Initialize git hooks\n\n./scripts/init-hooks.sh\n</code></pre>"},{"location":"meta/implementation/setup/project-setup/#2-server-setup","title":"2. Server Setup","text":"<pre><code># Build server\n\ncd server\ngo mod download\ngo build ./cmd/server\n\n# Run tests\n\ngo test ./...\n</code></pre>"},{"location":"meta/implementation/setup/project-setup/#3-client-setup","title":"3. Client Setup","text":"<pre><code># Install dependencies\n\ncd client\nnpm install\n\n# Build client\n\nnpm run build\n\n# Run tests\n\nnpm test\n</code></pre>"},{"location":"meta/implementation/setup/project-setup/#4-ai-system-setup","title":"4. AI System Setup","text":"<pre><code># Setup AI environment\n\ncd ai\npython -m venv venv\n\nsource venv/bin/activate\npip install -r requirements.txt\n\n# Run tests\n\npython -m pytest\n</code></pre>"},{"location":"meta/implementation/setup/project-setup/#5-development-database","title":"5. Development Database","text":"<pre><code># Start MongoDB\n\ndocker-compose -f docker/docker-compose.dev.yml up -d\n\n# Verify connection\n\nmongo mongodb://localhost:27017\n</code></pre>"},{"location":"meta/implementation/setup/project-setup/#running-the-project","title":"Running the Project","text":""},{"location":"meta/implementation/setup/project-setup/#development-mode","title":"Development Mode","text":"<pre><code># Terminal 1: Run server\n\ncd server\ngo run ./cmd/server\n\n# Terminal 2: Run client\n\ncd client\nnpm run dev\n\n# Terminal 3: Run AI system\n\ncd ai\nsource venv/bin/activate\npython -m ai.main\n</code></pre>"},{"location":"meta/implementation/setup/project-setup/#production-mode","title":"Production Mode","text":"<pre><code># Build and run with Docker\n\ndocker-compose up --build\n</code></pre>"},{"location":"meta/implementation/setup/project-setup/#common-issues","title":"Common Issues","text":""},{"location":"meta/implementation/setup/project-setup/#1-hardware-access","title":"1. Hardware Access","text":"<p>If you encounter permission issues with AI HAT+:</p> <pre><code># Add user to required groups\n\nsudo usermod -aG gpio,i2c $USER\n\n# Reload groups\n\nnewgrp gpio\nnewgrp i2c\n</code></pre>"},{"location":"meta/implementation/setup/project-setup/#2-memory-management","title":"2. Memory Management","text":"<p>If you encounter memory issues:</p> <pre><code># Adjust swap size\n\nsudo dphys-swapfile swapoff\n\nsudo nano /etc/dphys-swapfile\n\n# Set CONF_SWAPSIZE=2048\n\nsudo dphys-swapfile setup\n\nsudo dphys-swapfile swapon\n</code></pre>"},{"location":"meta/implementation/setup/project-setup/#3-performance-optimization","title":"3. Performance Optimization","text":"<p>For optimal performance:</p> <pre><code># Enable performance governor\n\necho \"performance\" | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor\n\n# Monitor temperature\n\nvcgencmd measure_temp\n</code></pre>"},{"location":"meta/implementation/setup/project-setup/#development-tools","title":"Development Tools","text":""},{"location":"meta/implementation/setup/project-setup/#1-vscode-setup","title":"1. VSCode Setup","text":"<p>Recommended extensions:</p> <ul> <li> <p>Go</p> </li> <li> <p>Python</p> </li> <li> <p>TypeScript</p> </li> <li> <p>Docker</p> </li> <li> <p>Remote - SSH</p> </li> </ul>"},{"location":"meta/implementation/setup/project-setup/#2-git-configuration","title":"2. Git Configuration","text":"<pre><code># Configure Git\n\ngit config --global user.name \"Your Name\"\n\ngit config --global user.email \"your.email@example.com\"\n\n# Setup pre-commit hooks\n\npre-commit install\n</code></pre>"},{"location":"meta/implementation/setup/project-setup/#3-testing-tools","title":"3. Testing Tools","text":"<pre><code># Install testing tools\n\ngo install github.com/golang/mock/mockgen@v1.6.0\nnpm install -g jest\n\npip install pytest pytest-cov\n</code></pre>"},{"location":"meta/implementation/setup/project-setup/#monitoring","title":"Monitoring","text":"<ul> <li> <p>Setup progress</p> </li> <li> <p>Build status</p> </li> <li> <p>Test coverage</p> </li> <li> <p>Deployment health</p> </li> </ul>"},{"location":"meta/logs/","title":"Development Progress","text":""},{"location":"meta/logs/#log-file-template","title":"Log File Template","text":"<p>Each log file should follow this format:</p> <pre><code>---\n\ntitle: [Month Day, Year]\ndescription: [Brief description of main focus]\n\n---\n\n# Development Log: [Month Day, Year]\n\n## Session Overview\n\n```yaml\ntype: [Type of work, e.g., Documentation, Implementation, Infrastructure]\nduration_hours: [Duration in hours, e.g., 4.5]\nhashtags: [comma-separated-tags]\n\nblockers: [Any blockers or None]\n</code></pre>"},{"location":"meta/logs/#session-focus","title":"Session Focus","text":"<ul> <li> <p>[Key area 1]</p> </li> <li> <p>[Key area 2]</p> </li> <li> <p>[Key area 3]</p> </li> </ul>"},{"location":"meta/logs/#changes-made","title":"Changes Made","text":""},{"location":"meta/logs/#category-1-eg-documentation","title":"[Category 1 (e.g., Documentation)]","text":"<ul> <li> <p>Major change 1</p> <ul> <li> <p>Sub-detail</p> </li> <li> <p>Sub-detail</p> </li> </ul> </li> <li> <p>Major change 2</p> <ul> <li> <p>Sub-detail</p> </li> <li> <p>Sub-detail</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/#category-2-eg-implementation","title":"[Category 2 (e.g., Implementation)]","text":"<ul> <li> <p>Major change 1</p> <ul> <li> <p>Sub-detail</p> </li> <li> <p>Sub-detail</p> </li> </ul> </li> <li> <p>Major change 2</p> <ul> <li> <p>Sub-detail</p> </li> <li> <p>Sub-detail</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/#technical-details","title":"Technical Details","text":"<ul> <li> <p>Specific implementation details</p> </li> <li> <p>Configuration changes</p> </li> <li> <p>Architecture decisions</p> </li> </ul>"},{"location":"meta/logs/#challenges-and-solutions","title":"Challenges and Solutions","text":"<ul> <li> <p>Challenge: [Description of challenge]</p> <ul> <li>Solution: [How it was resolved]</li> </ul> </li> <li> <p>Challenge: [Description of challenge]</p> <ul> <li>Solution: [How it was resolved]</li> </ul> </li> </ul>"},{"location":"meta/logs/#next-steps","title":"Next Steps","text":"<ol> <li>[Next action item]</li> <li>[Next action item]</li> <li>[Next action item]</li> </ol>"},{"location":"meta/logs/#references","title":"References","text":"<ul> <li> <p>[Link to relevant document]</p> </li> <li> <p>[Link to relevant document]</p> </li> </ul>"},{"location":"meta/logs/#development-guidelines","title":"Development Guidelines","text":"<p>Each log entry should:</p> <ol> <li> <p>Start with YAML Frontmatter</p> <ul> <li> <p>Include title and description</p> </li> <li> <p>Use consistent date format (Month DD, YYYY)</p> </li> </ul> </li> <li> <p>Include Session Overview</p> <ul> <li> <p>Type of work being done</p> </li> <li> <p>Duration of session</p> </li> <li> <p>Relevant hashtags</p> </li> <li> <p>Any blockers encountered</p> </li> </ul> </li> <li> <p>Have Clear Sections</p> <ul> <li> <p>Session Focus</p> </li> <li> <p>Changes Made (with categories)</p> </li> <li> <p>Technical Details</p> </li> <li> <p>Challenges and Solutions</p> </li> <li> <p>Next Steps</p> </li> <li> <p>References</p> </li> </ul> </li> <li> <p>Use Proper Formatting</p> <ul> <li> <p>Use markdown headers consistently</p> </li> <li> <p>Include bullet points for lists</p> </li> <li> <p>Format code blocks with appropriate syntax</p> </li> <li> <p>Use relative links for cross-references</p> </li> </ul> </li> <li> <p>Be Detailed but Concise</p> <ul> <li> <p>Focus on significant changes</p> </li> <li> <p>Include enough context to understand the changes</p> </li> <li> <p>Link to detailed documentation rather than repeating it</p> </li> </ul> </li> <li> <p>Include Cross-References</p> <ul> <li> <p>Link to related documentation</p> </li> <li> <p>Reference previous logs when relevant</p> </li> <li> <p>Link to specific commits or PRs when applicable</p> </li> </ul> </li> </ol>"},{"location":"meta/logs/#development-logs","title":"Development Logs","text":"<p>This section contains daily development logs documenting progress, decisions, and updates.</p>"},{"location":"meta/logs/#log-format","title":"Log Format","text":"<p>Each log entry should include:</p> <ol> <li>Date and summary</li> <li>Changes made</li> <li>Technical details</li> <li>Next steps</li> <li>Resources used</li> </ol>"},{"location":"meta/logs/#example-log-structure","title":"Example Log Structure","text":"<pre><code># January 21, 2025\n\n## Summary\n\nBrief overview of what was accomplished\n\n## Changes Made\n\n- Added feature X\n\n- Updated component Y\n\n- Fixed issue Z\n\n## Technical Details\n\nImplementation specifics, code samples, etc.\n\n## Next Steps\n\n- Upcoming task 1\n\n- Upcoming task 2\n\n## Resources\n\n- Relevant documentation links\n\n- External references\n</code></pre>"},{"location":"meta/logs/#recent-logs","title":"Recent Logs","text":"<ul> <li> <p>January 19, 2025</p> </li> <li> <p>January 17, 2025</p> </li> <li> <p>January 15, 2025</p> </li> <li> <p>January 13, 2025</p> </li> <li> <p>January 09, 2025</p> </li> <li> <p>January 08, 2025</p> </li> </ul>"},{"location":"meta/logs/2025-01-08/","title":"Project Structure Setup (January 8, 2025)","text":""},{"location":"meta/logs/2025-01-08/#session-overview","title":"Session Overview","text":"<pre><code>type: Project Setup\nduration_hours: 4\nhashtags: [project-setup, documentation, repository-init, character-system]\n\nblockers: None\n</code></pre>"},{"location":"meta/logs/2025-01-08/#focus-areas","title":"Focus Areas","text":"<ul> <li> <p>Initial project structure</p> </li> <li> <p>Documentation framework</p> </li> <li> <p>Development guidelines</p> </li> <li> <p>Project scope definition</p> </li> </ul>"},{"location":"meta/logs/2025-01-08/#changes-made","title":"Changes Made","text":""},{"location":"meta/logs/2025-01-08/#project-structure","title":"Project Structure","text":"<ul> <li> <p>Created base directory structure</p> </li> <li> <p>Set up documentation system</p> </li> <li> <p>Established file naming conventions</p> </li> <li> <p>Created initial README</p> </li> </ul>"},{"location":"meta/logs/2025-01-08/#documentation","title":"Documentation","text":"<ul> <li> <p>Defined project scope</p> </li> <li> <p>Created style guide</p> </li> <li> <p>Set up development log</p> </li> <li> <p>Established AI development index</p> </li> </ul>"},{"location":"meta/logs/2025-01-08/#key-decisions","title":"Key Decisions","text":""},{"location":"meta/logs/2025-01-08/#project-organization","title":"Project Organization","text":"<ul> <li> <p>Modular structure for easy expansion</p> </li> <li> <p>Clear separation of concerns</p> </li> <li> <p>Documentation-first approach</p> </li> <li> <p>AI-centric architecture</p> </li> </ul>"},{"location":"meta/logs/2025-01-08/#development-process","title":"Development Process","text":"<ul> <li> <p>Iterative development cycle</p> </li> <li> <p>Regular documentation updates</p> </li> <li> <p>Clear coding standards</p> </li> <li> <p>Comprehensive testing approach</p> </li> </ul>"},{"location":"meta/logs/2025-01-08/#technical-insights","title":"Technical Insights","text":""},{"location":"meta/logs/2025-01-08/#architecture","title":"Architecture","text":"<ul> <li> <p>Modular design for AI components</p> </li> <li> <p>Scalable documentation structure</p> </li> <li> <p>Clear dependency management</p> </li> <li> <p>Efficient resource organization</p> </li> </ul>"},{"location":"meta/logs/2025-01-08/#process","title":"Process","text":"<ul> <li> <p>Documentation-driven development</p> </li> <li> <p>Regular progress tracking</p> </li> <li> <p>Clear milestone definitions</p> </li> <li> <p>Iterative improvement cycle</p> </li> </ul>"},{"location":"meta/logs/2025-01-08/#resources","title":"Resources","text":"<ul> <li> <p>MkDocs Documentation</p> </li> <li> <p>Material for MkDocs</p> </li> </ul>"},{"location":"meta/logs/2025-01-08/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Implement basic game state management</p> </li> <li> <p>Set up WebSocket communication</p> </li> <li> <p>Begin AI system integration</p> </li> </ul>"},{"location":"meta/logs/2025-01-09/","title":"Character System Definition (January 9, 2025)","text":""},{"location":"meta/logs/2025-01-09/#session-overview","title":"Session Overview","text":"<pre><code>type: Documentation\nduration_hours: 3\nhashtags: [character-system, technical-specs, project-setup, architecture]\n\nblockers: None\n</code></pre>"},{"location":"meta/logs/2025-01-09/#focus-areas","title":"Focus Areas","text":"<ul> <li> <p>Character class system definition</p> </li> <li> <p>AI Development Index enhancement</p> </li> <li> <p>Documentation structure refinement</p> </li> </ul>"},{"location":"meta/logs/2025-01-09/#changes-made","title":"Changes Made","text":""},{"location":"meta/logs/2025-01-09/#ai-development-index","title":"AI Development Index","text":"<ul> <li> <p>Added character class specifications</p> </li> <li> <p>Class relationships</p> </li> <li> <p>Balance framework</p> </li> <li> <p>Enhanced class relationships</p> </li> <li> <p>Added balance framework</p> </li> </ul>"},{"location":"meta/logs/2025-01-09/#character-classes","title":"Character Classes","text":"<ul> <li> <p>Standardized file naming</p> </li> <li> <p>Fixed Crystal Vanguard convention</p> </li> <li> <p>Verified all class files</p> </li> </ul>"},{"location":"meta/logs/2025-01-09/#key-decisions","title":"Key Decisions","text":""},{"location":"meta/logs/2025-01-09/#character-class-definitions","title":"Character Class Definitions","text":"Class Role Difficulty <p>| Conjuror | Support | Medium | | Crystal Vanguard | Tank | Hard | | Zealot | DPS | Medium | | Wraithwood Seer | Control | Hard | | Primal Shifter | Flex | Expert | | The Blessed | Healer | Easy |</p>"},{"location":"meta/logs/2025-01-09/#technical-insights","title":"Technical Insights","text":""},{"location":"meta/logs/2025-01-09/#ai-development","title":"AI Development","text":"<ul> <li> <p>Class relationships guide AI behavior patterns</p> </li> <li> <p>Difficulty ratings inform adaptation strategies</p> </li> <li> <p>Combat styles define tactical decision space</p> </li> </ul>"},{"location":"meta/logs/2025-01-09/#design","title":"Design","text":"<ul> <li> <p>Theme-based design maintains character identity</p> </li> <li> <p>Role distribution enables diverse team compositions</p> </li> <li> <p>Difficulty curve supports player progression</p> </li> </ul>"},{"location":"meta/logs/2025-01-09/#resources","title":"Resources","text":"<ul> <li> <p>MkDocs Documentation</p> </li> <li> <p>Material for MkDocs</p> </li> </ul>"},{"location":"meta/logs/2025-01-09/#navigation","title":"Navigation","text":"<ul> <li> <p>Home</p> </li> <li> <p>Technical Documentation</p> </li> <li> <p>Combat System</p> </li> </ul>"},{"location":"meta/logs/2025-01-09/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Complete game state implementation</p> </li> <li> <p>Add WebSocket event handlers</p> </li> <li> <p>Begin AI training pipeline</p> </li> </ul>"},{"location":"meta/logs/2025-01-13/","title":"Documentation Refinement (January 13, 2025)","text":""},{"location":"meta/logs/2025-01-13/#session-overview","title":"Session Overview","text":"<pre><code>type: Documentation\nduration_hours: 2\nhashtags: [documentation, markdown-formatting, automation, project-structure]\n\nblockers: None\n</code></pre>"},{"location":"meta/logs/2025-01-13/#focus-areas","title":"Focus Areas","text":"<ul> <li> <p>Documentation structure improvement</p> </li> <li> <p>Development log organization</p> </li> <li> <p>Markdown formatting standardization</p> </li> <li> <p>Project automation setup</p> </li> </ul>"},{"location":"meta/logs/2025-01-13/#changes-made","title":"Changes Made","text":""},{"location":"meta/logs/2025-01-13/#documentation-structure","title":"Documentation Structure","text":"<ul> <li> <p>Created Development Logs section</p> <ul> <li> <p>Dedicated section organization</p> </li> <li> <p>Navigation improvements</p> </li> <li> <p>Progress tracking</p> </li> </ul> </li> <li> <p>Enhanced project structure</p> <ul> <li> <p>Sidebar organization</p> </li> <li> <p>Status display</p> </li> <li> <p>Section hierarchy</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-13/#markdown-formatting","title":"Markdown Formatting","text":"<ul> <li> <p>Standardized formatting</p> <ul> <li> <p>Bullet point consistency</p> </li> <li> <p>List spacing</p> </li> <li> <p>Indentation rules</p> </li> </ul> </li> <li> <p>Improved organization</p> <ul> <li> <p>Table formatting</p> </li> <li> <p>Section structure</p> </li> <li> <p>Visual hierarchy</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-13/#development-guidelines","title":"Development Guidelines","text":"<ul> <li> <p>Updated log structure</p> <ul> <li> <p>Entry format</p> </li> <li> <p>Section requirements</p> </li> <li> <p>Cross-referencing</p> </li> </ul> </li> <li> <p>Enhanced consistency</p> <ul> <li> <p>Documentation standards</p> </li> <li> <p>Style guidelines</p> </li> <li> <p>Readability improvements</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-13/#project-automation","title":"Project Automation","text":"<ul> <li> <p>Created log management script</p> <ul> <li> <p>Automated updates</p> </li> <li> <p>File organization</p> </li> <li> <p>Chronological sorting</p> </li> </ul> </li> <li> <p>Added Makefile commands</p> <ul> <li> <p>Documentation tasks</p> </li> <li> <p>Code formatting</p> </li> <li> <p>Project setup</p> </li> <li> <p>Dependency management</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-13/#technical-implementation","title":"Technical Implementation","text":"<ul> <li> <p>Created individual log files in <code>docs/meta/logs/</code></p> </li> <li> <p>Updated <code>mkdocs.yml</code> for better navigation</p> </li> <li> <p>Added <code>.pages</code> configuration</p> </li> <li> <p>Maintained chronological ordering</p> </li> <li> <p>Automated development workflow with make commands</p> </li> </ul>"},{"location":"meta/logs/2025-01-13/#resources","title":"Resources","text":"<ul> <li> <p>MkDocs Documentation</p> </li> <li> <p>Material for MkDocs</p> </li> </ul>"},{"location":"meta/logs/2025-01-15/","title":"Documentation and Repository Setup (January 15, 2025)","text":""},{"location":"meta/logs/2025-01-15/#session-overview","title":"Session Overview","text":"<pre><code>type: Documentation and Setup\nduration_hours: 4\nhashtags: [documentation, repository-setup, git-configuration, project-structure, markdown-formatting, logging-system, task-tracking]\n\nblockers: None\n</code></pre>"},{"location":"meta/logs/2025-01-15/#focus-areas","title":"Focus Areas","text":"<ul> <li> <p>Phase 1 tasks document enhancement</p> </li> <li> <p>Repository configuration setup</p> </li> <li> <p>Git ignore patterns organization</p> </li> <li> <p>Development log structure</p> </li> <li> <p>Logging system improvements</p> </li> <li> <p>Task tracking system implementation</p> </li> <li> <p>Documentation restructuring</p> </li> </ul>"},{"location":"meta/logs/2025-01-15/#changes-made","title":"Changes Made","text":""},{"location":"meta/logs/2025-01-15/#documentation-structure","title":"Documentation Structure","text":"<ul> <li> <p>Enhanced Phase 1 tasks</p> <ul> <li> <p>Detailed explanations</p> </li> <li> <p>Technical context</p> </li> <li> <p>Acceptance criteria</p> </li> </ul> </li> <li> <p>Improved organization</p> <ul> <li> <p>Individual task documents</p> </li> <li> <p>Phase 1 index</p> </li> <li> <p>Navigation structure</p> </li> </ul> </li> <li> <p>Updated formatting</p> <ul> <li> <p>Proper line breaks</p> </li> <li> <p>Code block styling</p> </li> <li> <p>Document hierarchy</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-15/#navigation-restructuring","title":"Navigation Restructuring","text":"<ul> <li> <p>Restructured sections</p> <ul> <li> <p>Combined Implementation/Development</p> </li> <li> <p>Top-level Logs section</p> </li> <li> <p>Better hierarchy</p> </li> </ul> </li> <li> <p>Fixed documentation paths</p> <ul> <li> <p>Updated references</p> </li> <li> <p>Corrected broken links</p> </li> <li> <p>Enhanced navigation flow</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-15/#markdown-formatting","title":"Markdown Formatting","text":"<ul> <li> <p>Added proper line breaks between headers and lists across all documents:</p> </li> <li> <p>Phase 1 task documents</p> </li> <li> <p>Project scope document</p> </li> <li> <p>Style guide</p> </li> <li> <p>README</p> </li> <li> <p>Improved code block formatting and spacing</p> </li> <li> <p>Enhanced overall document readability</p> </li> </ul>"},{"location":"meta/logs/2025-01-15/#repository-configuration","title":"Repository Configuration","text":"<ul> <li> <p>Created comprehensive .gitignore file with categories:</p> </li> <li> <p>Language-specific patterns</p> </li> <li> <p>Build outputs and caches</p> </li> <li> <p>Development tools and IDEs</p> </li> <li> <p>Project-specific patterns</p> </li> <li> <p>Configured documentation and log management</p> </li> <li> <p>Removed logs from git ignore to track development history</p> </li> </ul>"},{"location":"meta/logs/2025-01-15/#technical-implementation","title":"Technical Implementation","text":"<ul> <li> <p>Added detailed sections for each Phase 1 task:</p> </li> <li> <p>Development environment setup</p> </li> <li> <p>Server environment (Go)</p> </li> <li> <p>Client environment (TypeScript/React)</p> </li> <li> <p>AI environment (Python)</p> </li> <li> <p>Enhanced task documentation with:</p> </li> <li> <p>Core considerations</p> </li> <li> <p>Technical context</p> </li> <li> <p>Integration points</p> </li> <li> <p>Phase 2 contributions</p> </li> </ul>"},{"location":"meta/logs/2025-01-15/#task-tracking-enhancement","title":"Task Tracking Enhancement","text":"<ul> <li> <p>Implemented detailed task tracking system:</p> </li> <li> <p>Added checkboxes for all tasks and subtasks</p> </li> <li> <p>Created clear acceptance criteria for each task</p> </li> <li> <p>Organized tasks by implementation phase</p> </li> <li> <p>Added progress indicators for major sections</p> </li> <li> <p>Updated Phase 1 tasks document with:</p> </li> <li> <p>Clearer task hierarchy</p> </li> <li> <p>Detailed acceptance criteria</p> </li> <li> <p>Progress tracking checkboxes</p> </li> <li> <p>Implementation timeline</p> </li> </ul>"},{"location":"meta/logs/2025-01-15/#development-process","title":"Development Process","text":"<ul> <li> <p>Updated development log format</p> </li> <li> <p>Improved documentation organization</p> </li> <li> <p>Enhanced project structure clarity</p> </li> <li> <p>Standardized markdown formatting</p> </li> <li> <p>Implemented granular task tracking</p> </li> </ul>"},{"location":"meta/logs/2025-01-15/#logging-system-enhancement","title":"Logging System Enhancement","text":"<ul> <li> <p>Replaced related_sessions with hashtag system</p> </li> <li> <p>Updated all existing log files (2025-01-08 through 2025-01-15)</p> </li> <li> <p>Added consistent hashtag categories:</p> </li> <li> <p>Documentation (#documentation)</p> </li> <li> <p>Setup (#project-setup, #repository-setup)</p> </li> <li> <p>Architecture (#architecture)</p> </li> <li> <p>Development (#git-configuration)</p> </li> <li> <p>Process (#markdown-formatting, #logging-system)</p> </li> <li> <p>Ensured logs are tracked in version control</p> </li> </ul>"},{"location":"meta/logs/2025-01-15/#resources","title":"Resources","text":"<ul> <li> <p>GitHub Pages Documentation</p> </li> <li> <p>MkDocs Material Theme</p> </li> </ul>"},{"location":"meta/logs/2025-01-15/#notes","title":"Notes","text":"<ul> <li> <p>Ensure all task descriptions include measurable acceptance criteria</p> </li> <li> <p>Maintain consistent formatting across documentation</p> </li> <li> <p>Keep development logs in version control</p> </li> <li> <p>Follow established documentation structure</p> </li> <li> <p>Use consistent hashtags for better searchability</p> </li> <li> <p>Consider creating a hashtag index for quick reference</p> </li> <li> <p>Maintain checkbox-based progress tracking</p> </li> <li> <p>Update task status regularly</p> </li> <li> <p>Keep development logs in sync with progress</p> </li> <li> <p>Follow established documentation structure</p> </li> <li> <p>Documentation structure now better reflects project organization</p> </li> <li> <p>Navigation is more intuitive and task-focused</p> </li> <li> <p>Markdown formatting is consistent across all documents</p> </li> <li> <p>Phase 1 tasks are better organized for implementation</p> </li> </ul>"},{"location":"meta/logs/2025-01-17/","title":"GitHub Pages Setup and Theme Configuration (January 17, 2025)","text":""},{"location":"meta/logs/2025-01-17/#session-overview","title":"Session Overview","text":"<pre><code>type: Documentation and Infrastructure\nduration_hours: 4\nhashtags: [github-pages, documentation, theme-configuration, ci-cd, workflow-setup, social-media, readme, log-format, navigation]\n\nblockers: None\n</code></pre>"},{"location":"meta/logs/2025-01-17/#focus-areas","title":"Focus Areas","text":"<ul> <li> <p>GitHub Pages deployment setup</p> </li> <li> <p>Documentation theme configuration</p> </li> <li> <p>CI/CD workflow implementation</p> </li> <li> <p>Logging system automation</p> </li> <li> <p>Social media updates documentation</p> </li> <li> <p>README simplification</p> </li> <li> <p>Cover image optimization</p> </li> <li> <p>Log format improvements</p> </li> <li> <p>Navigation enhancements</p> </li> </ul>"},{"location":"meta/logs/2025-01-17/#changes-made","title":"Changes Made","text":""},{"location":"meta/logs/2025-01-17/#github-pages-setup","title":"GitHub Pages Setup","text":"<ul> <li> <p>Created GitHub Actions workflow for automated documentation deployment</p> <ul> <li> <p>Automated documentation deployment</p> </li> <li> <p>Proper permissions setup</p> </li> <li> <p>Environment configuration</p> </li> </ul> </li> <li> <p>Configured GitHub Pages source to use GitHub Actions</p> <ul> <li> <p>GitHub Actions integration</p> </li> <li> <p>Deployment pipeline setup</p> </li> </ul> </li> <li> <p>Implemented automatic log updates in the deployment pipeline</p> <ul> <li> <p>Log synchronization</p> </li> <li> <p>Navigation structure</p> </li> <li> <p>Content verification</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-17/#theme-configuration","title":"Theme Configuration","text":"<ul> <li> <p>Implemented Material theme with dark mode default</p> <ul> <li> <p>Dark mode default</p> </li> <li> <p>Color scheme setup</p> </li> <li> <p>Typography settings</p> </li> </ul> </li> <li> <p>Added comprehensive markdown extensions:</p> <ul> <li> <p>Code highlighting improvements</p> </li> <li> <p>Table support</p> </li> <li> <p>Admonitions</p> </li> <li> <p>Advanced formatting options</p> </li> </ul> </li> <li> <p>Improved navigation features</p> <ul> <li> <p>Search functionality</p> </li> <li> <p>Section organization</p> </li> <li> <p>Cross-referencing</p> </li> </ul> </li> <li> <p>Fixed YAML parsing issues in configuration</p> </li> </ul>"},{"location":"meta/logs/2025-01-17/#documentation-structure","title":"Documentation Structure","text":"<ul> <li> <p>Updated mkdocs.yml with proper site configuration</p> <ul> <li> <p>Site information</p> </li> <li> <p>Repository links</p> </li> <li> <p>Theme settings</p> </li> </ul> </li> <li> <p>Enhanced code rendering and syntax highlighting</p> <ul> <li> <p>Syntax highlighting</p> </li> <li> <p>Block formatting</p> </li> <li> <p>Line numbering</p> </li> </ul> </li> <li> <p>Added dark/light mode toggle</p> <ul> <li> <p>User preference detection</p> </li> <li> <p>Color scheme switching</p> </li> <li> <p>Icon updates</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-17/#workflow-automation","title":"Workflow Automation","text":"<ul> <li> <p>Added GitHub Actions workflow for documentation deployment</p> <ul> <li> <p>Documentation building</p> </li> <li> <p>Automatic updates</p> </li> <li> <p>Error handling</p> </li> </ul> </li> <li> <p>Set up proper dependency installation</p> <ul> <li> <p>Package installation</p> </li> <li> <p>Version control</p> </li> <li> <p>Build verification</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-17/#social-media-documentation","title":"Social Media Documentation","text":"<ul> <li> <p>Created new section for social media updates</p> <ul> <li> <p>LinkedIn posts organization</p> </li> <li> <p>Chronological sorting</p> </li> <li> <p>Metadata structure</p> </li> </ul> </li> <li> <p>Implemented consistent formatting:</p> <ul> <li> <p>YAML frontmatter for metadata</p> </li> <li> <p>Plain text code blocks for post content</p> </li> <li> <p>Preserved original formatting and emojis</p> </li> </ul> </li> <li> <p>Added proper hashtag formatting</p> </li> <li> <p>Structured posts in individual date-based files</p> </li> <li> <p>Added section to navigation after development logs</p> </li> <li> <p>Created new post announcing documentation site launch</p> </li> </ul>"},{"location":"meta/logs/2025-01-17/#documentation-update-script","title":"Documentation Update Script","text":"<ul> <li> <p>Enhanced update_logs.py to handle both logs and social media posts</p> <ul> <li> <p>Log processing</p> </li> <li> <p>Social media handling</p> </li> <li> <p>Navigation management</p> </li> </ul> </li> <li> <p>Maintained chronological ordering for all dated content</p> </li> <li> <p>Improved error handling and section management</p> </li> </ul>"},{"location":"meta/logs/2025-01-17/#cover-image-updates","title":"Cover Image Updates","text":"<ul> <li> <p>Reduced cover.png size by 20% for better performance</p> <ul> <li> <p>Performance improvements</p> </li> <li> <p>Cross-platform display</p> </li> </ul> </li> <li> <p>Added cover image to root README using markdown syntax</p> </li> <li> <p>Added cover image to documentation homepage</p> </li> <li> <p>Created docs/images directory for documentation assets</p> </li> <li> <p>Ensured consistent image display across platforms</p> </li> </ul>"},{"location":"meta/logs/2025-01-17/#readme-simplification","title":"README Simplification","text":"<ul> <li> <p>Streamlined root-level README to focus on development utilities</p> <ul> <li> <p>Clear instructions</p> </li> <li> <p>Development guides</p> </li> </ul> </li> <li> <p>Moved project details to documentation site</p> </li> <li> <p>Added clear documentation site link</p> </li> <li> <p>Documented Makefile commands and project structure</p> </li> <li> <p>Improved setup and development instructions</p> </li> </ul>"},{"location":"meta/logs/2025-01-17/#log-format-update","title":"Log Format Update","text":"<ul> <li> <p>Removed \"Next Steps\" section from all log files</p> </li> <li> <p>Added consistent \"Resources\" section across logs</p> </li> <li> <p>Moved task tracking to phase details checklists</p> </li> <li> <p>Improved log clarity and reduced redundancy</p> </li> <li> <p>Rationale: Next steps are better tracked in phase-specific checklists for more accurate progress tracking and better organization</p> </li> </ul>"},{"location":"meta/logs/2025-01-17/#navigation-improvements","title":"Navigation Improvements","text":"<ul> <li> <p>Added custom CSS for top-level navigation</p> </li> <li> <p>Created stylesheets directory with extra.css</p> </li> <li> <p>Added subtle borders around navigation tabs</p> </li> <li> <p>Implemented hover and active state effects</p> </li> <li> <p>Added proper spacing and padding for tabs</p> </li> <li> <p>Moved AI Development Index to top-level navigation</p> </li> <li> <p>Added site description and author metadata</p> </li> </ul>"},{"location":"meta/logs/2025-01-17/#technical-details","title":"Technical Details","text":""},{"location":"meta/logs/2025-01-17/#key-configuration-changes","title":"Key Configuration Changes","text":"<pre><code>theme:\n  name: material\n  features:\n    - navigation.tabs\n\n    - navigation.sections\n\n    - navigation.expand\n\n    # ... more features\n\n  palette:\n    # Default to dark mode\n\n    - scheme: slate\n\n      primary: indigo\n      accent: indigo\n</code></pre>"},{"location":"meta/logs/2025-01-17/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<ul> <li> <p>Uses Python 3.11</p> </li> <li> <p>Installs required dependencies:</p> </li> <li> <p>mkdocs-material</p> </li> <li> <p>mkdocs-awesome-pages-plugin</p> </li> <li> <p>PyYAML</p> </li> <li> <p>Runs automatic log updates</p> </li> <li> <p>Deploys to GitHub Pages</p> </li> </ul>"},{"location":"meta/logs/2025-01-17/#challenges-and-solutions","title":"Challenges and Solutions","text":""},{"location":"meta/logs/2025-01-17/#theme-consistency","title":"Theme Consistency","text":"<ul> <li> <p>Issue: Theme wasn't applying consistently across all pages</p> </li> <li> <p>Solution: Updated markdown extensions and theme configuration</p> </li> </ul>"},{"location":"meta/logs/2025-01-17/#yaml-parsing","title":"YAML Parsing","text":"<ul> <li> <p>Issue: Custom Python tags causing parsing errors</p> </li> <li> <p>Solution: Simplified superfences configuration while maintaining functionality</p> </li> </ul>"},{"location":"meta/logs/2025-01-17/#workflow-permissions","title":"Workflow Permissions","text":"<ul> <li> <p>Issue: Initial deployment failing due to permission issues</p> </li> <li> <p>Solution: Added proper GitHub Pages permissions and environment setup</p> </li> </ul>"},{"location":"meta/logs/2025-01-17/#social-media-documentation_1","title":"Social Media Documentation","text":"<ul> <li> <p>Issue: Inconsistent formatting in social media posts</p> </li> <li> <p>Solution: Standardized format with YAML metadata and code blocks</p> </li> </ul>"},{"location":"meta/logs/2025-01-17/#documentation-organization","title":"Documentation Organization","text":"<ul> <li> <p>Issue: Complex navigation structure with multiple sections</p> </li> <li> <p>Solution: Enhanced update script to handle nested sections</p> </li> </ul>"},{"location":"meta/logs/2025-01-17/#resources","title":"Resources","text":"<ul> <li> <p>MkDocs Material Theme Documentation</p> </li> <li> <p>GitHub Pages Documentation</p> </li> <li> <p>GitHub Actions Documentation</p> </li> </ul>"},{"location":"meta/logs/2025-01-19/","title":"Documentation Enhancement and Health Monitoring Integration (January 19, 2025)","text":""},{"location":"meta/logs/2025-01-19/#session-overview","title":"Session Overview","text":"<pre><code>type: Documentation and Infrastructure\nduration_hours: 8\nhashtags: [health-monitoring, docker-setup, documentation-structure, ai-development, infrastructure, log-format]\n\nblockers: None\n</code></pre>"},{"location":"meta/logs/2025-01-19/#focus-areas","title":"Focus Areas","text":"<ul> <li> <p>Documentation restructuring and optimization</p> </li> <li> <p>Health monitoring system implementation</p> </li> <li> <p>Docker environment configuration</p> </li> <li> <p>AI development index improvements</p> </li> <li> <p>Hardware documentation updates</p> </li> <li> <p>Service architecture refinement</p> </li> <li> <p>Log file formatting standardization</p> </li> </ul>"},{"location":"meta/logs/2025-01-19/#changes-made","title":"Changes Made","text":""},{"location":"meta/logs/2025-01-19/#documentation-structure","title":"Documentation Structure","text":"<ul> <li> <p>Reorganized AI Development Index for better navigation</p> </li> <li> <p>Added Quick Links section for essential documentation</p> </li> <li> <p>Enhanced YAML structure and formatting</p> </li> <li> <p>Updated documentation tree and cross-references</p> </li> <li> <p>Improved version tracking and metadata</p> </li> <li> <p>Reorganized navigation in <code>mkdocs.yml</code> for better user experience</p> <ul> <li> <p>Moved Logs and Social Updates after Overview</p> </li> <li> <p>Placed Technical section after AI Development Index</p> </li> <li> <p>Improved overall navigation flow</p> </li> </ul> </li> <li> <p>Updated technical documentation links to match actual file structure</p> </li> <li> <p>Added new sections for AI System, Hardware, and Client documentation</p> </li> </ul>"},{"location":"meta/logs/2025-01-19/#health-monitoring-system","title":"Health Monitoring System","text":"<ul> <li> <p>Created comprehensive health monitoring documentation:</p> <ul> <li> <p>System overview and architecture</p> </li> <li> <p>Service-specific implementations</p> </li> <li> <p>Resource monitoring guidelines</p> </li> <li> <p>Error handling and recovery procedures</p> </li> </ul> </li> <li> <p>Added health check endpoints documentation for:</p> <ul> <li> <p>AI service</p> </li> <li> <p>Client application</p> </li> <li> <p>Server components</p> </li> </ul> </li> <li> <p>Added comprehensive health monitoring documentation</p> <ul> <li> <p>Service health checks</p> </li> <li> <p>Resource monitoring (CPU, memory, disk, temperature)</p> </li> <li> <p>Recovery procedures</p> </li> </ul> </li> <li> <p>Updated health monitoring documentation</p> </li> </ul>"},{"location":"meta/logs/2025-01-19/#log-file-improvements","title":"Log File Improvements","text":"<ul> <li> <p>Updated log file template with comprehensive metadata</p> <ul> <li> <p>Added session overview section</p> </li> <li> <p>Included type, duration_hours, hashtags, and blockers</p> </li> <li> <p>Standardized YAML frontmatter</p> </li> </ul> </li> <li> <p>Enhanced log file formatting</p> <ul> <li> <p>Standardized list hierarchy</p> </li> <li> <p>Improved bullet point consistency</p> </li> <li> <p>Fixed indentation across all logs</p> </li> </ul> </li> <li> <p>Updated development guidelines</p> <ul> <li> <p>Added session overview requirements</p> </li> <li> <p>Enhanced formatting instructions</p> </li> <li> <p>Improved cross-referencing guidance</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-19/#hardware-documentation","title":"Hardware Documentation","text":"<ul> <li> <p>Created new hardware specification documents:</p> <ul> <li> <p>Raspberry Pi 5 configuration</p> </li> <li> <p>AI HAT Plus integration</p> </li> <li> <p>Performance optimization guidelines</p> </li> </ul> </li> <li> <p>Removed outdated hardware documentation</p> </li> <li> <p>Consolidated monitoring into health system</p> </li> <li> <p>Updated hardware specifications</p> <ul> <li> <p>Raspberry Pi 5</p> </li> <li> <p>AI HAT Plus</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-19/#development-environment","title":"Development Environment","text":"<ul> <li> <p>Added Docker setup instructions</p> </li> <li> <p>Enhanced project setup guide</p> </li> <li> <p>Updated dependency documentation</p> </li> <li> <p>Documented container configurations</p> </li> <li> <p>Integrated health check system with Docker</p> </li> </ul>"},{"location":"meta/logs/2025-01-19/#architecture-updates","title":"Architecture Updates","text":"<ul> <li> <p>Refined service architecture documentation:</p> <ul> <li> <p>AI system components</p> </li> <li> <p>Client implementation</p> </li> <li> <p>Server infrastructure</p> </li> </ul> </li> <li> <p>Improved data schema specifications</p> </li> <li> <p>Enhanced system architecture overview</p> </li> <li> <p>Enhanced AI system documentation</p> <ul> <li> <p>Behavior model</p> </li> <li> <p>Difficulty system</p> </li> <li> <p>Training pipeline</p> </li> </ul> </li> <li> <p>Improved data schema documentation</p> <ul> <li> <p>Game state</p> </li> <li> <p>AI models</p> </li> <li> <p>Replay system</p> </li> </ul> </li> <li> <p>Reviewed system architecture</p> </li> </ul>"},{"location":"meta/logs/2025-01-19/#technical-details","title":"Technical Details","text":""},{"location":"meta/logs/2025-01-19/#health-monitoring-implementation","title":"Health Monitoring Implementation","text":"<ul> <li> <p>Health Check Endpoints</p> <ul> <li> <p>Standardized endpoint format: <code>/health</code></p> </li> <li> <p>Response time monitoring</p> </li> <li> <p>Resource usage tracking</p> </li> <li> <p>Dependency status checks</p> </li> </ul> </li> <li> <p>Resource Monitoring</p> <ul> <li> <p>CPU and memory tracking</p> </li> <li> <p>Disk usage monitoring</p> </li> <li> <p>Network performance metrics</p> </li> <li> <p>Temperature monitoring for Pi</p> </li> </ul> </li> <li> <p>Error Handling</p> <ul> <li> <p>Automatic recovery procedures</p> </li> <li> <p>Logging and alerting</p> </li> <li> <p>Failure mode documentation</p> </li> <li> <p>Recovery strategies</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-19/#docker-integration","title":"Docker Integration","text":"<ul> <li> <p>Container Setup</p> <ul> <li> <p>Service-specific Dockerfiles</p> </li> <li> <p>Compose configuration</p> </li> <li> <p>Network setup</p> </li> <li> <p>Volume management</p> </li> </ul> </li> <li> <p>Health Checks</p> <ul> <li> <p>Container health monitoring</p> </li> <li> <p>Service dependencies</p> </li> <li> <p>Restart policies</p> </li> <li> <p>Resource limits</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-19/#challenges-and-solutions","title":"Challenges and Solutions","text":""},{"location":"meta/logs/2025-01-19/#documentation-organization","title":"Documentation Organization","text":"<ul> <li> <p>Challenge: Complex documentation structure with many cross-references</p> </li> <li> <p>Solution: Implemented Quick Links and improved navigation hierarchy</p> </li> </ul>"},{"location":"meta/logs/2025-01-19/#health-monitoring","title":"Health Monitoring","text":"<ul> <li> <p>Challenge: Coordinating health checks across multiple services</p> </li> <li> <p>Solution: Standardized health check format and response structure</p> </li> </ul>"},{"location":"meta/logs/2025-01-19/#docker-configuration","title":"Docker Configuration","text":"<ul> <li> <p>Challenge: Balancing development ease with production requirements</p> </li> <li> <p>Solution: Created separate development and production configurations</p> </li> </ul>"},{"location":"meta/logs/2025-01-19/#technical-documentation","title":"Technical Documentation","text":"<ul> <li> <p>Challenge: Broken technical documentation links</p> <ul> <li>Solution: Updated file structure to match actual implementation and fixed navigation paths</li> </ul> </li> <li> <p>Challenge: Disorganized navigation structure</p> <ul> <li>Solution: Reordered sections for better user flow and logical grouping</li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-19/#next-steps","title":"Next Steps","text":"<ol> <li>Enhance API documentation</li> <li>Refine Docker configurations</li> <li>Add more detailed hardware setup guides</li> <li>Expand health monitoring documentation with examples</li> </ol>"},{"location":"meta/logs/2025-01-21/","title":"Documentation Formatting and Rules Enhancement (January 21, 2025)","text":"<p>Major documentation refactoring focused on standardizing markdown formatting and reorganizing content structure. Implemented Python-Markdown configuration across all documentation files. Consolidated combat system documentation from individual files into a centralized structure under world_building/. Removed redundant version history sections (29 files) and replaced with monitoring metrics. Migrated AI Development Index to meta/implementation/ai/. Updated mkdocs.yml with streamlined navigation and enhanced styling. Added Windsurf rules for automated log and social update formatting.</p>"},{"location":"meta/logs/2025-01-21/#session-overview","title":"Session Overview","text":"<pre><code>type: Documentation and Infrastructure\nduration_hours: 11\nhashtags: [documentation-format, python-markdown, windsurf-rules, combat-system, navigation-structure, mkdocs, material-theme, game-dev, cultural-gaming, edge-ai, build-in-public, raspberry-pi, ai-gaming]\n\nblockers: None\n</code></pre>"},{"location":"meta/logs/2025-01-21/#focus-areas","title":"Focus Areas","text":"<p>Key Focus Points</p> <ul> <li> <p>Documentation formatting standardization</p> </li> <li> <p>Combat system reorganization</p> </li> <li> <p>Navigation structure optimization</p> </li> <li> <p>Markdown configuration</p> </li> <li> <p>Content consolidation</p> </li> <li> <p>Documentation automation</p> </li> </ul>"},{"location":"meta/logs/2025-01-21/#changes-made","title":"Changes Made","text":""},{"location":"meta/logs/2025-01-21/#documentation-structure","title":"Documentation Structure","text":"<p>Structure Changes</p> <ul> <li> <p>Implemented Python-Markdown configuration:</p> <ul> <li> <p>Added auto-format settings for *.md files</p> </li> <li> <p>Configured program settings in .windsurfrules</p> </li> <li> <p>Standardized list formatting using *</p> </li> </ul> </li> <li> <p>Reorganized combat system documentation:</p> <ul> <li> <p>Migrated from combat_system/ to world_building/</p> </li> <li> <p>Consolidated 6 class files into single classes.md</p> </li> <li> <p>Updated balance_and_meta.md with concrete examples</p> </li> <li> <p>Added comprehensive testing methodologies</p> </li> </ul> </li> <li> <p>Optimized navigation structure:</p> <ul> <li> <p>Enhanced mkdocs.yml organization</p> </li> <li> <p>Added purple section labels</p> </li> <li> <p>Implemented consistent bold weights</p> </li> <li> <p>Maintained sticky navigation features</p> </li> </ul> </li> <li> <p>Migrated key documentation:</p> <ul> <li>Moved AI Development Index to meta/implementation/ai/</li> </ul> </li> </ul> <p>Improvements</p> <ul> <li> <p>Refactored documentation structure for better organization and readability</p> </li> <li> <p>Updated mkdocs.yml to reflect new navigation structure</p> </li> </ul>"},{"location":"meta/logs/2025-01-21/#script-relocation","title":"Script Relocation","text":"<p>Script Updates</p> <ul> <li> <p>Moved scripts to dedicated directories for better separation of concerns</p> </li> <li> <p>Updated paths in Makefile and GitHub Actions workflows to reflect new locations</p> </li> </ul>"},{"location":"meta/logs/2025-01-21/#python-markdown-configuration","title":"Python-Markdown Configuration","text":"<p>Configuration Changes</p> <ul> <li> <p>Implemented Python-Markdown configuration across all documentation files.</p> </li> <li> <p>Standardized formatting and ensured consistency throughout the documentation.</p> </li> </ul>"},{"location":"meta/logs/2025-01-21/#github-actions","title":"GitHub Actions","text":"<p>GitHub Actions Updates</p> <ul> <li>Updated GitHub Actions workflow to ensure compatibility with new script locations.</li> </ul>"},{"location":"meta/logs/2025-01-21/#content-updates","title":"Content Updates","text":"<p>Content Updates</p> <ul> <li> <p>Enhanced combat system documentation:</p> <ul> <li> <p>Added role specialization examples</p> </li> <li> <p>Documented synergy and counter mechanics</p> </li> <li> <p>Updated resource economy details</p> </li> <li> <p>Added meta-game considerations</p> </li> </ul> </li> <li> <p>Updated character system:</p> <ul> <li> <p>Consolidated class documentation</p> </li> <li> <p>Simplified stat system</p> </li> <li> <p>Removed luck attribute</p> </li> <li> <p>Added team composition analysis</p> </li> </ul> </li> <li> <p>Added automation rules:</p> <ul> <li> <p>Implemented pre-create hooks for logs</p> </li> <li> <p>Added format consistency checks</p> </li> <li> <p>Automated social update formatting</p> </li> <li> <p>Added documentation review requirements</p> </li> </ul> </li> <li> <p>Added Wraithwood Seer class with psychic abilities and ESP powers</p> </li> <li> <p>Updated class comparisons and team compositions</p> </li> <li> <p>Added new synergies and balance considerations</p> </li> <li> <p>Integrated Wraithwood Grove lore into world-building</p> </li> </ul>"},{"location":"meta/logs/2025-01-21/#code-formatting-and-linting","title":"Code Formatting and Linting","text":"<p>Code Formatting and Linting</p> <ul> <li> <p>Enhanced code formatting and linting:</p> <ul> <li> <p>Added autopep8 for automatic Python code style fixes</p> </li> <li> <p>Updated flake8 configuration to ignore site/ directory</p> </li> <li> <p>Increased max line length to 100 characters</p> </li> <li> <p>Added whitespace and blank line rules</p> </li> </ul> </li> <li> <p>Improved documentation scripts:</p> <ul> <li> <p>Fixed unused imports across validation scripts</p> </li> <li> <p>Standardized string quotes and formatting</p> </li> <li> <p>Enhanced code organization with proper spacing</p> </li> </ul> </li> <li> <p>Updated README:</p> <ul> <li> <p>Added autoformat command documentation</p> </li> <li> <p>Clarified linting success behavior</p> </li> <li> <p>Added log management script descriptions</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-21/#image-management","title":"Image Management","text":"<p>Image Processing Updates</p> <ul> <li> <p>Enhanced <code>image_processing.py</code>:</p> <ul> <li> <p>Added check mode with <code>--check</code> flag</p> </li> <li> <p>Added directory scanning with <code>--directory</code></p> </li> <li> <p>Added logging with timestamps</p> </li> <li> <p>Added image validation</p> </li> </ul> </li> <li> <p>Improved image processing:</p> <ul> <li> <p>Automatic metadata removal</p> </li> <li> <p>Size optimization</p> </li> <li> <p>DPI standardization</p> </li> <li> <p>Format validation</p> </li> </ul> </li> <li> <p>Added Makefile targets:</p> <ul> <li> <p><code>check-images</code>: Verify image optimization</p> </li> <li> <p><code>process-images</code>: Run image processing</p> </li> </ul> </li> <li> <p>GitHub Actions integration:</p> <ul> <li> <p>Added image check step</p> </li> <li> <p>Added image processing step</p> </li> <li> <p>Added validation before deployment</p> </li> <li> <p>Added automatic optimization</p> </li> </ul> </li> </ul> <p>Improvements</p> <ul> <li> <p>Automated image optimization</p> </li> <li> <p>Added validation checks</p> </li> <li> <p>Enhanced logging output</p> </li> <li> <p>Improved error handling</p> </li> <li> <p>Added GitHub Actions integration</p> </li> <li> <p>Simplified image processing workflow</p> </li> </ul>"},{"location":"meta/logs/2025-01-21/#documentation-updates","title":"Documentation Updates","text":"<p>README Updates</p> <p>Updated project README to document the complete development journey through research spikes:</p> <ul> <li> <p>Added reference to the original Simulat33 prototype (Python/Jupyter implementation)</p> </li> <li> <p>Added reference to huMon-gen spike for character stat generation and balancing</p> </li> <li> <p>Added reference to golang_turnbased_game_spike</p> </li> <li> <p>Clarified how each spike contributed to the current implementation</p> </li> </ul>"},{"location":"meta/logs/2025-01-21/#combat-balance-analysis","title":"Combat Balance Analysis","text":"<p>Analysis Overview</p> <p>Using AI-driven analysis of Schreiber and Romero's \"Game Balance\" book, we extracted and systematized key balance principles applicable to our combat system. The analysis focused on translating theoretical concepts into concrete, measurable parameters while maintaining the core game design vision.</p>"},{"location":"meta/logs/2025-01-21/#balance-fundamentals","title":"Balance Fundamentals","text":"<ul> <li> <p>Core Principles</p> <ul> <li> <p>Quantifiable metrics for objective assessment</p> </li> <li> <p>Role differentiation with flexibility</p> </li> <li> <p>Dynamic combat pacing</p> </li> <li> <p>Meaningful strategic choices</p> </li> <li> <p>Purposeful complexity</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-21/#character-roles","title":"Character Roles","text":"<ul> <li> <p>Tank</p> <ul> <li> <p>Focus: Damage mitigation and control</p> </li> <li> <p>Primary: Defensive abilities</p> </li> <li> <p>Secondary: Crowd control</p> </li> </ul> </li> <li> <p>Support</p> <ul> <li> <p>Focus: Team buffs and healing</p> </li> <li> <p>Primary: Healing abilities</p> </li> <li> <p>Secondary: Utility spells</p> </li> </ul> </li> <li> <p>DPS</p> <ul> <li> <p>Focus: Damage output</p> </li> <li> <p>Primary: Sustained or burst damage</p> </li> <li> <p>Secondary: Self-buffs</p> </li> </ul> </li> <li> <p>Hybrid</p> <ul> <li> <p>Focus: Versatility</p> </li> <li> <p>Primary: Mixed abilities</p> </li> <li> <p>Secondary: Role flexibility</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-21/#resource-systems","title":"Resource Systems","text":"<p>Resource Management</p> <ul> <li> <p>Primary Resource</p> <ul> <li> <p>Energy (100 base)</p> </li> <li> <p>Universal across classes</p> </li> </ul> </li> <li> <p>Secondary Resources</p> <ul> <li> <p>Class-specific mechanics</p> </li> <li> <p>Unique generation methods</p> </li> </ul> </li> <li> <p>Cooldown System</p> <ul> <li> <p>Major abilities: 3-5 turns</p> </li> <li> <p>Ultimate abilities: 8-10 turns</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-21/#combat-mechanics","title":"Combat Mechanics","text":"<ul> <li> <p>Turn Structure</p> <ul> <li> <p>Speed determines order</p> </li> <li> <p>Major and minor actions</p> </li> </ul> </li> <li> <p>Effect Duration</p> <ul> <li> <p>Status effects: 2-3 turns</p> </li> <li> <p>Crowd control: 1 turn max</p> </li> </ul> </li> <li> <p>Action Economy</p> <ul> <li> <p>1 major + 1 minor per turn</p> </li> <li> <p>Movement separate from actions</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-21/#balance-metrics","title":"Balance Metrics","text":"<p>Critical Thresholds</p> <ul> <li> <p>Win Rates</p> <ul> <li> <p>Target: 45-55%</p> </li> <li> <p>Maximum: 60%</p> </li> <li> <p>Minimum: 40%</p> </li> </ul> </li> <li> <p>Match Duration</p> <ul> <li> <p>Average: 5-7 minutes</p> </li> <li> <p>Maximum: 15 minutes</p> </li> </ul> </li> <li> <p>Resource Usage</p> <ul> <li> <p>70-80% efficiency target</p> </li> <li> <p>No resource waste mechanics</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-21/#meta-management","title":"Meta Management","text":"<ul> <li> <p>Patch Schedule</p> <ul> <li> <p>Minor: Every 2 weeks</p> </li> <li> <p>Major: Every 3 months</p> </li> </ul> </li> <li> <p>Balance Process</p> <ul> <li> <p>Data collection</p> </li> <li> <p>Community feedback</p> </li> <li> <p>Tournament analysis</p> </li> <li> <p>AI simulation testing</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-21/#technical-details","title":"Technical Details","text":""},{"location":"meta/logs/2025-01-21/#file-changes","title":"File Changes","text":"<pre><code>modified_files: 29\ncreated_files: 1\ndeleted_files: 9\nfile_patterns:\n  - \"*.md\"\n\n  - \"docs/*.md\"\n\n  - \"docs/meta/logs/*.md\"\n\n  - \"docs/meta/social/**/*.md\"\n</code></pre>"},{"location":"meta/logs/2025-01-21/#configuration-updates","title":"Configuration Updates","text":"<pre><code>markdown:\n  auto_format: true\n  program: python-markdown\n\n  bullet_style: \"*\"\n\n  indentation: 4 spaces\n\npre_create_hooks:\n  logs:\n    - Review 3 random existing logs\n\n    - Check current day updates\n\n    - Enforce format consistency\n\n  social:\n    - Review existing format\n\n    - Check current day updates\n\n    - Maintain consistency\n</code></pre>"},{"location":"meta/logs/2025-01-21/#navigation-changes","title":"Navigation Changes","text":"<pre><code>structure_updates:\n  - Moved combat system to world_building/\n\n  - Relocated AI Development Index\n\n  - Updated cross-references\n\n  - Enhanced section styling\n</code></pre>"},{"location":"meta/logs/2025-01-21/#challenges-and-solutions","title":"Challenges and Solutions","text":"<ul> <li> <p>Challenge: Fragmented combat system documentation</p> <ul> <li>Solution: Consolidated into world_building/ with centralized files</li> </ul> </li> <li> <p>Challenge: Inconsistent markdown formatting</p> <ul> <li>Solution: Implemented Python-Markdown configuration with standardized rules</li> </ul> </li> <li> <p>Challenge: Documentation maintenance overhead</p> <ul> <li>Solution: Added automated pre-create hooks and format checks</li> </ul> </li> <li> <p>Challenge: Navigation complexity</p> <ul> <li>Solution: Streamlined structure and enhanced visual hierarchy</li> </ul> </li> </ul>"},{"location":"meta/logs/2025-01-21/#additional-updates","title":"Additional Updates","text":""},{"location":"meta/logs/2025-01-21/#documentation-automation","title":"Documentation Automation","text":"<p>Automation Updates</p> <ul> <li> <p>Enhanced GitHub Actions workflow:</p> <ul> <li> <p>Added image processing automation</p> </li> <li> <p>Added validation before deployment</p> </li> <li> <p>Added code style checks</p> </li> <li> <p>Improved deployment reliability</p> </li> </ul> </li> <li> <p>Added development hours tracking:</p> <ul> <li> <p>Created <code>calculate_dev_hours.py</code> script</p> </li> <li> <p>Fixed script to only modify index.md</p> </li> <li> <p>Added total hours display to main page</p> </li> <li> <p>Fixed duplicate counter text issue</p> </li> </ul> </li> <li> <p>Added documentation formatting:</p> <ul> <li> <p>Created <code>format_docs.py</code> script</p> </li> <li> <p>Added automatic formatting to validation</p> </li> <li> <p>Fixed spacing and whitespace issues</p> </li> <li> <p>Enhanced markdown consistency</p> </li> </ul> </li> <li> <p>Enhanced code style:</p> <ul> <li> <p>Added ruff for fast linting with auto-fix</p> </li> <li> <p>Configured black and isort</p> </li> <li> <p>Added lenient code style rules</p> </li> <li> <p>Integrated with GitHub Actions</p> </li> </ul> </li> </ul> <p>Improvements</p> <ul> <li> <p>Automated image processing in deployment</p> </li> <li> <p>Added development progress tracking</p> </li> <li> <p>Enhanced log file consistency</p> </li> <li> <p>Improved deployment workflow</p> </li> <li> <p>Added automatic documentation formatting</p> </li> <li> <p>Enhanced markdown validation</p> </li> <li> <p>Added automated code style checks</p> </li> <li> <p>Simplified development workflow</p> </li> </ul>"},{"location":"meta/logs/2025-01-21/#documentation-scripts","title":"Documentation Scripts","text":"<p>Script Updates</p> <ul> <li> <p>Enhanced <code>calculate_dev_hours.py</code>:</p> <ul> <li> <p>Fixed duplicate counter text issue</p> </li> <li> <p>Improved regex pattern for admonition</p> </li> <li> <p>Fixed to only modify index.md</p> </li> <li> <p>Enhanced logging output</p> </li> </ul> </li> <li> <p>Updated <code>format_docs.py</code>:</p> <ul> <li> <p>Added support for nested admonitions</p> </li> <li> <p>Fixed spacing in lists</p> </li> <li> <p>Improved whitespace handling</p> </li> <li> <p>Enhanced markdown consistency</p> </li> </ul> </li> <li> <p>Updated <code>update_logs.py</code>:</p> <ul> <li> <p>Fixed to exclude README.md</p> </li> <li> <p>Improved file collection logic</p> </li> <li> <p>Added better error handling</p> </li> <li> <p>Enhanced logging</p> </li> </ul> </li> <li> <p>Enhanced Makefile:</p> <ul> <li> <p>Combined format targets</p> </li> <li> <p>Fixed update-docs target</p> </li> <li> <p>Updated help text</p> </li> <li> <p>Improved target organization</p> </li> </ul> </li> </ul> <p>Changes</p> <ul> <li> <p>Fixed development hours counter</p> </li> <li> <p>Improved documentation formatting</p> </li> <li> <p>Fixed script file handling</p> </li> <li> <p>Updated deployment process</p> </li> <li> <p>Added code style automation</p> </li> </ul>"},{"location":"meta/logs/2025-01-21/#recent-updates","title":"Recent Updates","text":"<ol> <li>Enhanced Makefile commands:</li> <li> <p>Renamed <code>scrub-images</code> to <code>process-images</code> for clarity</p> </li> <li> <p>Added automatic validation after processing</p> </li> <li> <p>Improved command descriptions and prompts</p> </li> <li> <p>Added comprehensive image optimization steps</p> </li> <li> <p>Updated documentation terminology:</p> </li> <li> <p>More inclusive language for image processing</p> </li> <li> <p>Better descriptions of optimization features</p> </li> <li> <p>Clearer command usage instructions</p> </li> <li> <p>Added detailed processing steps</p> </li> <li> <p>Automated Documentation Workflow:</p> </li> <li> <p>Added image processing to GitHub Actions</p> </li> <li> <p>Automated validation before deployment</p> </li> <li> <p>Added pull request checks</p> </li> <li> <p>Improved deployment reliability</p> </li> <li> <p>Files Modified:</p> <ul> <li> <p><code>Makefile</code>: Updated image processing commands</p> </li> <li> <p><code>docs/scripts/README.md</code>: Updated terminology</p> </li> <li> <p><code>docs/scripts/image_management/README.md</code>: Improved documentation</p> </li> <li> <p><code>.github/workflows/deploy-docs.yml</code>: Enhanced deployment</p> </li> </ul> </li> <li> <p>Improvements:</p> <ul> <li> <p>Automated image optimization</p> </li> <li> <p>Enhanced documentation clarity</p> </li> <li> <p>Improved code organization</p> </li> <li> <p>Enhanced deployment reliability</p> </li> </ul> </li> </ol>"},{"location":"meta/logs/2025-01-21/#notes","title":"Notes","text":"<pre><code>* All scripts now have clear installation instructions\n\n* Documentation is consistently formatted\n\n* Code style is enforced automatically\n\n* Images are optimized during deployment\n</code></pre>"},{"location":"meta/logs/2025-03-18/","title":"Game Mechanics Documentation and API Enhancement (March 18, 2025)","text":"<p>Comprehensive documentation update focusing on game mechanics, AI system documentation, and API specifications. Enhanced readability across technical documentation with consistent formatting and hierarchical structure. Implemented detailed rate limiting configuration and streamlined infrastructure documentation. Refined mythology and folklore documentation with proper formatting and expanded content.</p>"},{"location":"meta/logs/2025-03-18/#session-overview","title":"Session Overview","text":"<pre><code>type: Documentation Enhancement\nduration_hours: 13\nhashtags: [game-mechanics, ai-system, api-docs, documentation-structure, combat-system, rate-limiting, technical-docs, mythology, folklore, cultural-context]\n\nblockers: None\n</code></pre>"},{"location":"meta/logs/2025-03-18/#focus-areas","title":"Focus Areas","text":"<p>Key Focus Points</p> <ul> <li> <p>Game mechanics documentation creation</p> </li> <li> <p>AI system documentation enhancement</p> </li> <li> <p>API rate limiting configuration</p> </li> <li> <p>Documentation structure standardization</p> </li> <li> <p>Infrastructure documentation streamlining</p> </li> </ul>"},{"location":"meta/logs/2025-03-18/#changes-made","title":"Changes Made","text":""},{"location":"meta/logs/2025-03-18/#game-mechanics-documentation","title":"Game Mechanics Documentation","text":"<p>New Documentation</p> <ul> <li> <p>Created comprehensive game mechanics reference:</p> <ul> <li> <p>Detailed status effects documentation with categories</p> </li> <li> <p>Attack types specification with physical/spiritual/elemental</p> </li> <li> <p>Battle conditions and field effects</p> </li> <li> <p>Targeting system mechanics</p> </li> </ul> </li> <li> <p>Enhanced readability:</p> <ul> <li> <p>Added YAML frontmatter for metadata</p> </li> <li> <p>Implemented consistent hierarchical structure</p> </li> <li> <p>Removed redundant tables of contents</p> </li> <li> <p>Added descriptive admonitions</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-03-18/#ai-system-enhancement","title":"AI System Enhancement","text":"<p>Documentation Updates</p> <ul> <li> <p>Improved training pipeline documentation:</p> <ul> <li> <p>Enhanced data collection explanation</p> </li> <li> <p>Detailed model training process</p> </li> <li> <p>Clear deployment procedures</p> </li> <li> <p>Added monitoring metrics</p> </li> </ul> </li> <li> <p>Updated related components:</p> <ul> <li> <p>Behavior model configuration</p> </li> <li> <p>Difficulty system integration</p> </li> <li> <p>Performance monitoring guidelines</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-03-18/#api-documentation","title":"API Documentation","text":"<p>API Enhancements</p> <ul> <li> <p>Enhanced rate limiting documentation:</p> <ul> <li> <p>Added comprehensive configuration</p> </li> <li> <p>Included endpoint-specific limits</p> </li> <li> <p>Documented custom rate limiting</p> </li> <li> <p>Added error handling examples</p> </li> </ul> </li> <li> <p>Updated data schemas:</p> <ul> <li> <p>Game state schema alignment</p> </li> <li> <p>AI models documentation</p> </li> <li> <p>Replay system specification</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-03-18/#infrastructure-documentation","title":"Infrastructure Documentation","text":"<p>Streamlining</p> <ul> <li> <p>Hardware documentation:</p> <ul> <li> <p>Updated AI HAT Plus configuration</p> </li> <li> <p>Simplified code examples</p> </li> <li> <p>Enhanced readability</p> </li> </ul> </li> <li> <p>Health monitoring:</p> <ul> <li> <p>Consolidated best practices</p> </li> <li> <p>Streamlined monitoring metrics</p> </li> <li> <p>Updated error handling</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-03-18/#cicd-pipeline-enhancement","title":"CI/CD Pipeline Enhancement","text":"<p>GitHub Actions Workflow</p> <ul> <li> <p>Simplified documentation deployment pipeline:</p> <ul> <li> <p>Replaced GitHub Pages actions with direct Git-based deployment</p> </li> <li> <p>Eliminated dependency on problematic actions</p> </li> <li> <p>Implemented orphan branch deployment strategy</p> </li> <li> <p>Added <code>.nojekyll</code> file for proper asset rendering</p> </li> </ul> </li> <li> <p>Technical implementation:</p> <ul> <li> <p>Uses <code>git checkout --orphan gh-pages</code> to create clean branch</p> </li> <li> <p>Moves built documentation directly to branch root</p> </li> <li> <p>Force pushes to GitHub Pages branch</p> </li> <li> <p>Eliminates complex action dependencies</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-03-18/#technical-challenges-and-solutions","title":"Technical Challenges and Solutions","text":"<ul> <li> <p>Challenge: Documentation structure consistency</p> <ul> <li>Solution: Implemented standardized formatting with hierarchical bullet points</li> </ul> </li> <li> <p>Challenge: Rate limiting complexity</p> <ul> <li>Solution: Created comprehensive examples with clear categorization</li> </ul> </li> <li> <p>Challenge: AI system clarity</p> <ul> <li>Solution: Enhanced explanations with detailed process breakdowns</li> </ul> </li> </ul>"},{"location":"meta/logs/2025-03-18/#world-building-documentation","title":"World Building Documentation","text":"<p>Mythology and Folklore</p> <ul> <li> <p>Enhanced mythology-folklore.md documentation:</p> <ul> <li> <p>Reformatted all lists to use consistent numbered format</p> </li> <li> <p>Added explanatory paragraphs to each major section</p> </li> <li> <p>Improved cultural and historical context</p> </li> <li> <p>Added comprehensive bibliography with scholarly sources</p> </li> </ul> </li> <li> <p>Structural improvements:</p> <ul> <li> <p>Standardized section formatting</p> </li> <li> <p>Enhanced readability with proper indentation</p> </li> <li> <p>Added informative admonition blocks</p> </li> <li> <p>Organized content hierarchically</p> </li> </ul> </li> </ul>"},{"location":"meta/logs/2025-03-18/#technical-challenges-and-solutions_1","title":"Technical Challenges and Solutions","text":"<ul> <li> <p>Challenge: Documentation structure consistency</p> <ul> <li>Solution: Implemented standardized formatting with hierarchical bullet points</li> </ul> </li> <li> <p>Challenge: Rate limiting complexity</p> <ul> <li>Solution: Created comprehensive examples with clear categorization</li> </ul> </li> <li> <p>Challenge: AI system clarity</p> <ul> <li>Solution: Enhanced explanations with detailed process breakdowns</li> </ul> </li> <li> <p>Challenge: Cultural sensitivity in documentation</p> <ul> <li>Solution: Added context paragraphs and ethical considerations section</li> </ul> </li> <li> <p>Challenge: GitHub Actions deployment failures</p> <ul> <li>Solution: Implemented direct Git-based deployment approach that bypasses problematic GitHub Pages actions</li> </ul> </li> </ul>"},{"location":"meta/logs/2025-03-18/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Review and validate game mechanics implementation</p> </li> <li> <p>Test rate limiting configurations</p> </li> <li> <p>Monitor AI system performance with new documentation</p> </li> <li> <p>Consider adding interactive examples</p> </li> <li> <p>Plan for user feedback collection</p> </li> <li> <p>Continue enhancing world building documentation</p> </li> <li> <p>Monitor GitHub Pages deployment success</p> </li> <li> <p>Consider implementing similar Git-based deployment for other documentation sites</p> </li> </ul>"},{"location":"meta/phase1/","title":"Phase 1: Core Systems Implementation","text":""},{"location":"meta/phase1/#overview","title":"Overview","text":"<p>Duration: 2 weeks (10 working days) Current Status: In Progress</p>"},{"location":"meta/phase1/#high-level-objectives","title":"High-Level Objectives","text":"<ol> <li> <p>Project Setup and Infrastructure</p> </li> <li> <p>Game State Management</p> </li> <li> <p>Communication Infrastructure</p> </li> <li> <p>Basic AI Integration</p> </li> <li> <p>Turn System Foundation</p> </li> </ol>"},{"location":"meta/phase1/#core-requirements","title":"Core Requirements","text":""},{"location":"meta/phase1/#performance-tests","title":"Performance Tests","text":"<ul> <li> <p>[ ] AI responses &lt;100ms</p> </li> <li> <p>[ ] State updates &lt;10ms</p> </li> <li> <p>[ ] Network latency &lt;50ms</p> </li> </ul>"},{"location":"meta/phase1/#external-dependencies","title":"External Dependencies","text":"<ul> <li> <p>Go 1.21+</p> </li> <li> <p>Python 3.11+</p> </li> <li> <p>Node.js 18+</p> </li> <li> <p>MongoDB 6+</p> </li> </ul>"},{"location":"meta/phase1/#hardware-requirements","title":"Hardware Requirements","text":"<ul> <li> <p>Raspberry Pi 5</p> </li> <li> <p>AI HAT+</p> </li> <li> <p>Active cooling system</p> </li> </ul>"},{"location":"meta/phase1/#success-metrics","title":"Success Metrics","text":""},{"location":"meta/phase1/#technical-metrics","title":"Technical Metrics","text":"<ul> <li> <p>Build success rate &gt;99%</p> </li> <li> <p>Test coverage &gt;80%</p> </li> <li> <p>Performance within specs</p> </li> </ul>"},{"location":"meta/phase1/#risk-management","title":"Risk Management","text":""},{"location":"meta/phase1/#technical-risks","title":"Technical Risks","text":"<ul> <li> <p>[ ] Hardware compatibility issues</p> </li> <li> <p>[ ] Performance bottlenecks</p> </li> <li> <p>[ ] State consistency problems</p> </li> </ul>"},{"location":"meta/phase1/#mitigation-strategies","title":"Mitigation Strategies","text":"<ul> <li> <p>[ ] Early hardware testing</p> </li> <li> <p>[ ] Performance monitoring</p> </li> <li> <p>[ ] Comprehensive state validation</p> </li> </ul>"},{"location":"meta/phase1/1-project-setup/","title":"1. Project Setup and Infrastructure","text":""},{"location":"meta/phase1/1-project-setup/#documentation-references","title":"Documentation References","text":"<pre><code>Architecture:\n  system_overview: \"docs/overview/system-architecture.md\"\n\n  server_design: \"docs/implementation/server/architecture.md\"\n  client_design: \"docs/implementation/client/architecture.md\"\n  ai_design: \"docs/implementation/ai/architecture.md\"\n\nSetup_Guides:\n  repository: \"docs/technical/setup/repository.md\"\n  development: \"docs/technical/setup/development.md\"\n  ci_cd: \"docs/technical/setup/ci-cd.md\"\n\n  docker: \"docs/technical/setup/docker.md\"\n</code></pre>"},{"location":"meta/phase1/1-project-setup/#dependencies","title":"Dependencies","text":"<pre><code>Build_Requirements:\n  server:\n    language: \"Go 1.21+\"\n    key_packages:\n      - \"gorilla/websocket\"\n\n      - \"gorm\"\n\n  client:\n    language: \"TypeScript\"\n    framework: \"React\"\n    key_packages:\n      - \"react\"\n\n      - \"redux\"\n\n      - \"typescript\"\n\n  ai:\n    language: \"Python 3.11+\"\n    key_packages:\n      - \"tensorflow-lite\"\n\n      - \"numpy\"\n\n  docker:\n    engine: \"Docker 20.10+\"\n    compose: \"Docker Compose 2.2+\"\n</code></pre>"},{"location":"meta/phase1/1-project-setup/#tasks","title":"Tasks","text":""},{"location":"meta/phase1/1-project-setup/#11-development-environment-setup","title":"1.1 Development Environment Setup","text":"<p>Tasks and Acceptance Criteria:</p> <ul> <li> <p>[ ] Initialize Git repository structure</p> </li> <li> <p>[ ] Repository has clear structure with documentation</p> </li> <li> <p>[ ] Automated linting runs on commits</p> </li> <li> <p>[ ] Documentation site builds successfully</p> </li> <li> <p>[ ] All team members can build project locally</p> </li> <li> <p>[ ] Set up project documentation with MkDocs</p> </li> <li> <p>[ ] Documentation is accessible and properly organized</p> </li> <li> <p>[ ] Navigation structure is intuitive</p> </li> <li> <p>[ ] Configure linting and code formatting</p> </li> <li> <p>[ ] All code follows style guide</p> </li> <li> <p>[ ] Linting runs automatically</p> </li> <li> <p>[ ] Set up CI/CD pipeline</p> </li> <li> <p>[ ] Pipeline validates cross-component integration</p> </li> <li> <p>[ ] Pipeline runs automatically on commits</p> </li> <li> <p>[ ] Set up Docker environment</p> </li> <li> <p>[ ] Docker engine is installed and running</p> </li> <li> <p>[ ] Docker Compose is installed and running</p> </li> <li> <p>[ ] Docker images are built and running</p> </li> </ul>"},{"location":"meta/phase1/1-project-setup/#12-server-environment-go","title":"1.2 Server Environment (Go)","text":"<p>Tasks and Acceptance Criteria:</p> <ul> <li> <p>[ ] Set up Go 1.21+ environment</p> </li> <li> <p>[ ] Server builds successfully</p> </li> <li> <p>[ ] Dependencies are properly versioned</p> </li> <li> <p>[ ] Basic HTTP endpoint responds correctly</p> </li> <li> <p>[ ] Test suite runs successfully</p> </li> <li> <p>[ ] Configure server project structure</p> </li> <li> <p>[ ] Directory structure follows best practices</p> </li> <li> <p>[ ] Component boundaries are well-defined</p> </li> <li> <p>[ ] Set up dependency management</p> </li> <li> <p>[ ] Dependencies are properly versioned</p> </li> <li> <p>[ ] Installation process is documented</p> </li> <li> <p>[ ] Create basic server endpoints</p> </li> <li> <p>[ ] Endpoints are properly defined</p> </li> <li> <p>[ ] Error handling is in place</p> </li> <li> <p>[ ] Implement healthcheck endpoint</p> </li> <li> <p>[ ] Healthcheck endpoint responds correctly</p> </li> <li> <p>[ ] Healthcheck endpoint is properly documented</p> </li> </ul>"},{"location":"meta/phase1/1-project-setup/#13-client-environment-typescriptreact","title":"1.3 Client Environment (TypeScript/React)","text":"<p>Tasks and Acceptance Criteria:</p> <ul> <li> <p>[ ] Initialize React project</p> </li> <li> <p>[ ] Client builds without errors</p> </li> <li> <p>[ ] TypeScript type checking passes</p> </li> <li> <p>[ ] Basic UI renders correctly</p> </li> <li> <p>[ ] Development hot-reload works</p> </li> <li> <p>[ ] Set up TypeScript configuration</p> </li> <li> <p>[ ] TypeScript configuration is properly set up</p> </li> <li> <p>[ ] Type safety is enforced</p> </li> <li> <p>[ ] Configure build system</p> </li> <li> <p>[ ] Build system is properly configured</p> </li> <li> <p>[ ] Build process is automated</p> </li> <li> <p>[ ] Create basic UI shell</p> </li> <li> <p>[ ] UI shell is properly set up</p> </li> <li> <p>[ ] UI components are well-defined</p> </li> <li> <p>[ ] Implement healthcheck endpoint</p> </li> <li> <p>[ ] Healthcheck endpoint responds correctly</p> </li> <li> <p>[ ] Healthcheck endpoint is properly documented</p> </li> </ul>"},{"location":"meta/phase1/1-project-setup/#14-ai-environment-python","title":"1.4 AI Environment (Python)","text":"<p>Tasks and Acceptance Criteria:</p> <ul> <li> <p>[ ] Set up Python 3.11+ environment</p> </li> <li> <p>[ ] Python environment activates correctly</p> </li> <li> <p>[ ] TensorFlow Lite loads successfully</p> </li> <li> <p>[ ] Basic model inference works</p> </li> <li> <p>[ ] Test suite passes</p> </li> <li> <p>[ ] Configure AI project structure</p> </li> <li> <p>[ ] Directory structure follows best practices</p> </li> <li> <p>[ ] Component boundaries are well-defined</p> </li> <li> <p>[ ] Set up TensorFlow Lite</p> </li> <li> <p>[ ] TensorFlow Lite is properly set up</p> </li> <li> <p>[ ] Model optimization is in place</p> </li> <li> <p>[ ] Initialize model serving structure</p> </li> <li> <p>[ ] Model serving structure is properly set up</p> </li> <li> <p>[ ] Model serving is automated</p> </li> <li> <p>[ ] Implement healthcheck endpoint</p> </li> <li> <p>[ ] Healthcheck endpoint responds correctly</p> </li> <li> <p>[ ] Healthcheck endpoint is properly documented</p> </li> </ul>"},{"location":"meta/phase1/1-project-setup/#15-docker-environment","title":"1.5 Docker Environment","text":"<p>Tasks and Acceptance Criteria:</p> <ul> <li> <p>[ ] Set up Docker environment</p> </li> <li> <p>[ ] Docker engine is installed and running</p> </li> <li> <p>[ ] Docker Compose is installed and running</p> </li> <li> <p>[ ] Docker images are built and running</p> </li> <li> <p>[ ] Configure Docker Compose</p> </li> <li> <p>[ ] Docker Compose is properly configured</p> </li> <li> <p>[ ] Docker Compose file is properly documented</p> </li> <li> <p>[ ] Implement healthcheck endpoints</p> </li> <li> <p>[ ] Healthcheck endpoints respond correctly</p> </li> <li> <p>[ ] Healthcheck endpoints are properly documented</p> </li> </ul>"},{"location":"meta/phase1/2-game-state/","title":"2. Game State Management","text":""},{"location":"meta/phase1/2-game-state/#documentation-references","title":"Documentation References","text":"<pre><code>Technical_Specs:\n  state_management: \"docs/technical/game/state.md\"\n  data_schemas: \"docs/technical/data-schemas/game-state.md\"\n\n  validation: \"docs/technical/game/validation.md\"\n\nImplementation_Guides:\n  state_system: \"docs/implementation/server/state-management.md\"\n\n  serialization: \"docs/implementation/server/serialization.md\"\n</code></pre>"},{"location":"meta/phase1/2-game-state/#dependencies","title":"Dependencies","text":"<pre><code>Core_Dependencies:\n  state_management:\n    requires: [\"server_setup\"]\n    blocks: [\"game_loop\"]\n\n  serialization:\n    requires: [\"state_management\"]\n    blocks: [\"websocket\"]\n</code></pre>"},{"location":"meta/phase1/2-game-state/#tasks","title":"Tasks","text":""},{"location":"meta/phase1/2-game-state/#21-core-state-design","title":"2.1 Core State Design","text":"<p>Tasks and Acceptance Criteria:</p> <ul> <li> <p>[ ] Design state structure</p> </li> <li> <p>[ ] State structure is properly defined</p> </li> <li> <p>[ ] Data types are properly specified</p> </li> <li> <p>[ ] Validation rules are in place</p> </li> <li> <p>[ ] Implement state validation</p> </li> <li> <p>[ ] Validation rules are properly implemented</p> </li> <li> <p>[ ] Edge cases are handled</p> </li> <li> <p>[ ] State transitions are properly handled</p> </li> <li> <p>[ ] Error handling is in place</p> </li> </ul>"},{"location":"meta/phase1/2-game-state/#22-state-persistence","title":"2.2 State Persistence","text":"<p>Tasks and Acceptance Criteria:</p> <ul> <li> <p>[ ] Set up state persistence</p> </li> <li> <p>[ ] State persistence is properly set up</p> </li> <li> <p>[ ] Data integrity is maintained</p> </li> <li> <p>[ ] Recovery mechanisms are in place</p> </li> <li> <p>[ ] Implement state versioning</p> </li> <li> <p>[ ] State versioning is properly set up</p> </li> <li> <p>[ ] Versioning is automated</p> </li> </ul>"},{"location":"meta/phase1/3-communication/","title":"3. Communication Infrastructure","text":""},{"location":"meta/phase1/3-communication/#documentation-references","title":"Documentation References","text":"<pre><code>API_Specs:\n  websocket: \"docs/technical/api/websocket.md\"\n  rest: \"docs/technical/api/rest.md\"\n  events: \"docs/technical/api/events.md\"\n\nImplementation_Guides:\n  server_comms: \"docs/implementation/server/communication.md\"\n  client_comms: \"docs/implementation/client/communication.md\"\n</code></pre>"},{"location":"meta/phase1/3-communication/#dependencies","title":"Dependencies","text":"<pre><code>Core_Dependencies:\n  websocket:\n    requires: [\"server_setup\", \"state_management\"]\n    blocks: [\"client_development\"]\n</code></pre>"},{"location":"meta/phase1/3-communication/#tasks","title":"Tasks","text":""},{"location":"meta/phase1/3-communication/#31-websocket-infrastructure","title":"3.1 WebSocket Infrastructure","text":"<p>Tasks and Acceptance Criteria:</p> <ul> <li> <p>[ ] Set up WebSocket server</p> </li> <li> <p>[ ] WebSocket connections are stable</p> </li> <li> <p>[ ] Event handling is properly set up</p> </li> <li> <p>[ ] Error handling is in place</p> </li> <li> <p>[ ] Implement connection management</p> </li> <li> <p>[ ] Connection management is properly set up</p> </li> <li> <p>[ ] Connection pooling is implemented</p> </li> <li> <p>[ ] Connection recovery is properly set up</p> </li> <li> <p>[ ] Connection recovery is automated</p> </li> </ul>"},{"location":"meta/phase1/4-ai-integration/","title":"4. Basic AI Integration","text":""},{"location":"meta/phase1/4-ai-integration/#documentation-references","title":"Documentation References","text":"<pre><code>AI_Specs:\n  core: \"docs/technical/ai/core.md\"\n  inference: \"docs/technical/ai/inference.md\"\n  hardware: \"docs/technical/ai/hardware.md\"\n\nImplementation_Guides:\n  ai_setup: \"docs/implementation/ai/setup.md\"\n  model_integration: \"docs/implementation/ai/model-integration.md\"\n</code></pre>"},{"location":"meta/phase1/4-ai-integration/#dependencies","title":"Dependencies","text":"<pre><code>Core_Dependencies:\n  basic_ai:\n    requires: [\"hardware_setup\", \"state_management\"]\n    blocks: [\"game_loop\"]\n</code></pre>"},{"location":"meta/phase1/4-ai-integration/#tasks","title":"Tasks","text":""},{"location":"meta/phase1/4-ai-integration/#41-hardware-setup","title":"4.1 Hardware Setup","text":"<p>Tasks and Acceptance Criteria:</p> <ul> <li> <p>[ ] Configure AI HAT+</p> </li> <li> <p>[ ] AI HAT+ is properly configured</p> </li> <li> <p>[ ] Hardware acceleration is in place</p> </li> <li> <p>[ ] Set up hardware acceleration</p> </li> <li> <p>[ ] Hardware acceleration is properly set up</p> </li> <li> <p>[ ] Performance monitoring is in place</p> </li> <li> <p>[ ] Configure hardware failover</p> </li> <li> <p>[ ] Hardware failover is properly set up</p> </li> <li> <p>[ ] Failover is automated</p> </li> </ul>"},{"location":"meta/phase1/5-turn-system/","title":"5. Turn System Foundation","text":""},{"location":"meta/phase1/5-turn-system/#documentation-references","title":"Documentation References","text":"<pre><code>Game_Specs:\n  turn_system: \"docs/technical/game/turns.md\"\n  action_validation: \"docs/technical/game/actions.md\"\n  state_transitions: \"docs/technical/game/transitions.md\"\n\nImplementation_Guides:\n  turn_management: \"docs/implementation/server/turn-system.md\"\n\n  action_handling: \"docs/implementation/server/action-handling.md\"\n</code></pre>"},{"location":"meta/phase1/5-turn-system/#dependencies","title":"Dependencies","text":"<pre><code>Core_Dependencies:\n  turn_system:\n    requires: [\"state_management\", \"basic_ai\"]\n    blocks: [\"combat_system\"]\n</code></pre>"},{"location":"meta/phase1/5-turn-system/#tasks","title":"Tasks","text":""},{"location":"meta/phase1/5-turn-system/#51-core-turn-logic","title":"5.1 Core Turn Logic","text":"<p>Tasks and Acceptance Criteria:</p> <ul> <li> <p>[ ] Implement turn order system</p> </li> <li> <p>[ ] Turn order system is properly set up</p> </li> <li> <p>[ ] Priority system is implemented</p> </li> <li> <p>[ ] Edge cases are handled</p> </li> <li> <p>[ ] Set up turn transitions</p> </li> <li> <p>[ ] Turn transitions are properly set up</p> </li> <li> <p>[ ] State updates are atomic</p> </li> <li> <p>[ ] Edge cases are handled</p> </li> <li> <p>[ ] Implement interrupt system</p> </li> <li> <p>[ ] Interrupt system is properly set up</p> </li> <li> <p>[ ] Interrupt system is automated</p> </li> </ul>"},{"location":"meta/social/","title":"Social Updates","text":"<p>This section contains our project announcements and social media updates, organized by date. These updates track our development progress, share insights about our technical decisions, and highlight key milestones.</p>"},{"location":"meta/social/#update-categories","title":"Update Categories","text":"<p>Our social updates typically cover:</p> <ul> <li> <p>Development Progress</p> </li> <li> <p>Technical Deep Dives</p> </li> <li> <p>AI/ML Insights</p> </li> <li> <p>Hardware Optimizations</p> </li> <li> <p>Community Feedback</p> </li> <li> <p>Project Milestones</p> </li> </ul>"},{"location":"meta/social/linkedin/","title":"LinkedIn Updates","text":"<p>This section contains all LinkedIn posts related to The Path (AI-Pi) project, organized chronologically. Each post is stored in its own file with the date as the filename.</p>"},{"location":"meta/social/linkedin/#post-structure","title":"Post Structure","text":"<p>Each post file contains:</p> <ol> <li>Original post date</li> <li>Post content</li> <li>Hashtags used</li> <li>Links (if any)</li> </ol>"},{"location":"meta/social/linkedin/#purpose","title":"Purpose","text":"<p>These posts serve as a record of:</p> <ul> <li> <p>Project announcements</p> </li> <li> <p>Development updates</p> </li> <li> <p>Technical insights</p> </li> <li> <p>Methodology discussions</p> </li> </ul>"},{"location":"meta/social/linkedin/#organization","title":"Organization","text":"<p>Posts are stored in individual files named by date (YYYY-MM-DD.md) and are automatically arranged in reverse chronological order.</p>"},{"location":"meta/social/linkedin/2024-12-27/","title":"Hardware Teaser","text":"<pre><code>date: 2024-12-27\n\nplatform: LinkedIn\ntype: Teaser\nhashtags: [AI, Hardware, RaspberryPi]\n</code></pre> <pre><code>A few weeks ago I shared my new personal mission statement, \"To advance systems engineering and device-centered AI application development...\"\n\nSo what do we have here\u2026?\n26 TOPS of AI accelerated processing. \ud83d\udc7e\n\nHere we go!\n\n#AI #SoftwareEngineering #AgenticAI #DeveloperTools #Innovation #CodingWithAI #AIAssistants\n</code></pre>"},{"location":"meta/social/linkedin/2025-01-03/","title":"Project Announcement","text":"<pre><code>date: 2025-01-03\n\nplatform: LinkedIn\ntype: Announcement\nhashtags: [EdgeAI, GameDev, RaspberryPi, ArtificialIntelligence, SoftwareEngineering, AgenticAI]\nlinks:\n  - https://lnkd.in/gmgxEAt7\n</code></pre> <pre><code>\ud83d\udc3aExcited to announce my latest project: #ThePath (AI-Pi)!\n\nI'm creating an #edge AI-powered turn-based combat game that runs entirely on #RaspberryPi hardware, pushing the boundaries of what's possible with local AI processing.\n\n\ud83d\udc7e Check it out: https://lnkd.in/gmgxEAt7\n\n-----\n\n\ud83d\udd25 What makes this unique?\n\n\ud83d\udc49\ud83c\udffe I've developed a novel \"AI-First\" documentation approach that enables efficient development with #agentic IDE tools like #Windsurf. This methodology allows me to tackle complex AI projects while maintaining context and coherence across development sessions.\n\n\ud83d\udc49\ud83c\udffe Through this project, I'm exploring new ways to make AI development more manageable and coherent, especially when working with large, complex systems that push the limits of context windows.\n\n#EdgeAI #GameDev #RaspberryPi #ArtificialIntelligence #SoftwareEngineering #AgenticAI\n</code></pre>"},{"location":"meta/social/linkedin/2025-01-07/","title":"Documentation-First Approach","text":"<pre><code>date: 2025-01-07\n\nplatform: LinkedIn\ntype: Methodology\nhashtags: [AI, SoftwareEngineering, AgenticAI, DeveloperTools, Innovation, CodingWithAI, AIAssistants]\nlinks:\n  - https://lnkd.in/gmgxEAt7\n</code></pre> <pre><code>#Wolfpack\n\n\ud83d\udd25 I've been experimenting with a new way to work with AI coding assistants, and I'm ready to put it to the test with my latest project: The Path (AI-Pi), an edge AI game for Raspberry Pi.\n\nInstead of jumping straight into coding, I've developed a \"documentation-first\" approach that treats project documentation as a direct input for AI context.\n\nHere's what makes it unique:\n\n\ud83d\udc49\ud83c\udffe I create a comprehensive project scope that serves as a \"mental model\" for AI tools\n\n\ud83d\udc49\ud83c\udffe An AI Development Index acts as the primary entry point, helping AI tools navigate and understand the entire project\n\n\ud83d\udc49\ud83c\udffe All documentation is cross-referenced and structured specifically for AI consumption\n\nThe scope itself becomes part of the development environment\n\nThink of it like creating a \"brain\" for AI tools before starting development. This solves a key challenge: helping AI assistants maintain context and understanding across a complex project.\n\nI'm documenting this approach as I go, and I'll be sharing insights about how it impacts development with agentic AI tools like Windsurf.\n\n\ud83d\udc49\ud83c\udffe Check it out: https://lnkd.in/gmgxEAt7\n\n#AI #SoftwareEngineering #AgenticAI #DeveloperTools #Innovation #CodingWithAI #AIAssistants\n</code></pre>"},{"location":"meta/social/linkedin/2025-01-08/","title":"AI Development Pro Tip","text":"<pre><code>date: 2025-01-08\n\nplatform: LinkedIn\ntype: Technical Insight\nhashtags: [AI, SoftwareEngineering, Development, Documentation]\nlinks:\n  - https://lnkd.in/gmgxEAt7\n</code></pre> <pre><code>\ud83d\udd25 Pro Tip for AI-Assisted Development\n\nOne of the biggest challenges when developing with AI tools is managing complex project scopes within the constraints of context windows and token limits. I've found that maintaining a structured development log is a game-changer for tracking intentions and changes across work sessions.\n\nWant to see it in action? Check out my latest project: https://lnkd.in/gmgxEAt7\n\n---\n\n\ud83d\udc3a Why it matters:\n\n\ud83d\udc49\ud83c\udffe Helps AI tools understand project evolution\n\ud83d\udc49\ud83c\udffe Maintains alignment between docs and implementation\n\ud83d\udc49\ud83c\udffe Organizes work into AI-friendly chunks\n\n\ud83d\udc49\ud83c\udffe Makes it easy to resume work with full context\n\nI'm using this approach in my current project, combining it with AI-friendly scope docs and technical specifications. I also store the session details in YAML code-blocks, because these are easy to parse and convert into chartable data- in the event that I want to do some data analysis.\n\nDoing this results in a smoother development process with more consistent goals and better-organized tasks. This approach, in addition to well written GIT history, makes for a development process that is incredibly self-referencing.\n\n#AI #SoftwareEngineering #AgenticAI #DeveloperTools #Innovation #CodingWithAI #AIAssistants\n</code></pre>"},{"location":"meta/social/linkedin/2025-01-14/","title":"Workflow Improvements Update","text":"<pre><code>date: 2025-01-14\n\nplatform: LinkedIn\ntype: Development Update\nhashtags: [BuildInPublic, CodingWithAI, DevTools, SoftwareEngineering, Documentation]\nlinks:\n  - https://lnkd.in/gmgxEAt7\n</code></pre> <pre><code>\ud83d\udc3a Quick update on The Path (AI-Pi):\n\nAdded some practical improvements to the development workflow today. Nothing groundbreaking, but it's making the day-to-day work with AI tools smoother:\n\n\ud83d\udc49\ud83c\udffe Set up a Makefile to handle common tasks\n\n\ud83d\udc49\ud83c\udffe Added scripts to auto-update development logs\n\n\ud83d\udc49\ud83c\udffe Built a proper documentation site with MkDocs\n\nThe doc site is turning out to be pretty useful - it's not just for humans. Having a structured place for project scope, technical details, and development logs helps AI tools maintain context between sessions. The logs especially help track the project's evolution and decision-making.\n\nIt's interesting how small improvements to documentation structure can make such a difference in AI-assisted development. When the AI can easily understand the project's scope and history, the coding sessions become much more productive.\n\n\ud83d\udcbb On the hardware side, I upgraded the Raspberry Pi case to something more premium. Currently its housed inside of the KKSB PI-5 case, which has space for Hats and the Active cooler\n\n\ud83d\udc7e Project link if you're curious: https://lnkd.in/gmgxEAt7\n\n#BuildInPublic #CodingWithAI #DevTools #SoftwareEngineering #Documentation\n</code></pre>"},{"location":"meta/social/linkedin/2025-01-17/","title":"LinkedIn Update - January 17, 2025","text":"<pre><code>date: 2025-01-17\n\nplatform: LinkedIn\ntype: Development Update\nhashtags: [Documentation, GitHub, OpenSource, BuildInPublic]\nlinks:\n  - https://materdev.github.io/thepath-ai_pi/\n</code></pre> <pre><code>\ud83d\udc3a The Path (AI-Pi) documentation site is now live!\n\n\ud83d\udc49\ud83c\udffe Check it out: https://materdev.github.io/thepath-ai_pi/\n\n\ud83d\udd25 What's new:\n\n- Comprehensive development logs\n\n- Technical documentation\n\n- Project scope and research objectives\n\n- Social media updates archive\n\nOne cool thing about this setup is that the docs are structured to be AI-friendly, helping tools like Windsurf maintain context across work sessions. The development logs especially are formatted with YAML blocks that make them easy to parse and analyze programmatically, should I need structured metadata.\n\n\ud83d\udca1 Pro tip:\n\nIf you're building AI-assisted projects, consider treating your documentation as a first-class citizen in your development process. It's not just about recording what you did - it's about creating a knowledge base that both humans and AI can effectively use.\n\n#Documentation #GitHub #OpenSource #BuildInPublic #AIAssistants #DeveloperTools #SoftwareEngineering\n</code></pre>"},{"location":"meta/social/linkedin/2025-01-19/","title":"LinkedIn Update - January 19, 2025","text":"<pre><code>date: 2025-01-19\n\nplatform: LinkedIn\ntype: Development Update\nhashtags: [AI, SoftwareEngineering, Documentation, AgenticAI, DeveloperTools]\nlinks:\n  - https://materdev.github.io/thepath-ai_pi/\n</code></pre> <pre><code>#Wolfpack\n\n\ud83d\udd25 Quick update on The Path (AI-Pi)'s documentation evolution!\n\nBeen working on a lot of editing to fix up my project scope and making the docs even more AI-friendly, and I'm excited to share some practical improvements:\n\n\ud83d\udc49\ud83c\udffe Added structured metadata to all development logs\n\ud83d\udc49\ud83c\udffe Implemented comprehensive health monitoring docs\n\ud83d\udc49\ud83c\udffe Set up Docker configuration guidelines\n\ud83d\udc49\ud83c\udffe Enhanced navigation for better context flow\n\n\ud83e\udd14 Why it matters:\n\nWhen you're working with AI tools, having well-structured docs isn't just about keeping things organized - it's about creating a knowledge base that AI can actually understand and use effectively. The more structured your documentation, the better your AI tools can help you.\n\nWant to see how it all comes together? Check out our latest updates:\nhttps://materdev.github.io/thepath-ai_pi/\n\n#AI #SoftwareEngineering #AgenticAI #DeveloperTools #Documentation #BuildInPublic#AgenticAI #DeveloperTools #Documentation #BuildInPublic\n</code></pre>"},{"location":"meta/social/linkedin/2025-01-21/","title":"LinkedIn Update - January 21, 2025","text":"<pre><code>date: 2025-01-21\n\nplatform: LinkedIn\ntype: Development Update\nhashtags: [GameDev, Hoodoo, GameDesign, CulturalGaming, EdgeAI]\nlinks:\n  - https://github.com/MaterDev/thepath-ai_pi\n</code></pre> <pre><code>#Wolfpack\n\nIts time for another update for The Path (AI-Pi)! Added two major pieces to our foundation today.\n\nReally excited about how we're integrating Hoodoo, Conjure, and Rootwork traditions as the base inspiration for the lore and mythology. These aren't just aesthetic choices - they're the deep roots that inform everything from world-building to character design. Each element draws from authentic spiritual practices and historical contexts. This is based on about 2.5 years of research and world building on the topic.\n\nNext, I worked on game balance details. Been studying Schreiber and Romero's book and using it to shape our combat mechanics. Created concrete metrics for everything - win rates, match duration, resource usage.\n\n Documented cultural elements from African, Indigenous, and Caribbean traditions\n Set up proper resource management systems (that 100 base energy though! )\n Defined clear role boundaries while keeping things flexible\n Got those combat mechanics feeling just right\n\nAlso cleaned up a bunch of documentation - moved things around, made it more organized, set up some automation. Making sure everything stays clean and consistent as we grow.\n\nI love how this project keeps pushing me to learn and grow in different directions. Every day is a new challenge connecting tradition with technology.\n\n Want to see what we're building? Check it out: https://materdev.github.io/thepath-ai_pi/\n\n Pro tip: When building games inspired by cultural traditions, start with deep research and documentation before jumping into mechanics. Understanding the authentic systems and practices first will naturally guide your game design decisions later. Your mechanics will feel more genuine and your world more cohesive.\n\n#GameDev #Hoodoo #GameDesign #CulturalGaming #EdgeAI #BuildInPublic\n</code></pre> <pre><code>date: 2025-01-21\n\nplatform: LinkedIn\ntype: Technical Update\nhashtags: [Python, CodeQuality, Documentation, AutomatedTesting, BuildInPublic]\nlinks:\n  - https://github.com/MaterDev/thepath-ai_pi\n</code></pre> <pre><code>#Wolfpack\n\nQuick technical update on The Path (AI-Pi)! Just wrapped up some major code quality improvements that I'm pretty excited about.\n\n Added autopep8 for automatic Python code formatting - because life's too short to manually fix whitespace. Now our code stays clean and consistent without the hassle.\n\n Key improvements:\n\u2022 Automated code formatting with autopep8\n\u2022 Enhanced flake8 configuration for modern Python\n\u2022 Streamlined documentation validation\n\u2022 Better organization of validation scripts\n\u2022 Added automated log management\n\n Pro tip: Invest in your development tools early. Good tooling saves time, reduces cognitive load, and keeps your codebase maintainable as it grows. We just saved hours of future work by setting up proper automation now.\n\nThe best part? All our documentation tools are now working together seamlessly. From validation to log management, everything just... works.\n\n#Python #CodeQuality #Documentation #AutomatedTesting #BuildInPublic\n</code></pre> <pre><code>date: 2025-01-21\n\nplatform: LinkedIn\ntype: Project History\nhashtags: [GameDev, TurnBasedGames, SoftwareEngineering, Python, Golang, TypeScript, BuildInPublic]\nlinks:\n  - https://github.com/MaterDev/thepath-ai_pi#project-origins\n</code></pre> <p>```text</p>"},{"location":"meta/social/linkedin/2025-01-21/#wolfpack","title":"Wolfpack","text":"<p>Been quiet about this, but I'm excited to finally share that this project is built on more than 2.5 years of development that I've been pursuing through art and #GameDev research!</p> <p>The journey of developing this idea has involved a lot of different tech and tools:</p> <p>Started with #Python, building Simulat33 in #JupyterNotebook - where the core battle mechanics and character systems came to life</p> <p>Next came huMon-gen for procedural character stat generation - using ancestral tree patterns and data visualization to generate and balance character stats programmatically</p> <p>Finally modernized everything with #Golang and #TypeScript - proper REST API and React frontend proving these concepts work in production</p> <p>Each experiment shaped what we see today: \u2023 Battle mechanics and buff systems from Simulat33 \u2023 Balanced, scalable character stats from huMon-gen</p> <p>\u2023 Modern architecture from the Go implementation</p> <p>Check out the full README: https://github.com/MaterDev/thepath-ai_pi</p>"},{"location":"meta/social/linkedin/2025-01-21/#gamedev-turnbasedgames-softwareengineering-researchanddevelopment-buildinpublic","title":"GameDev #TurnBasedGames #SoftwareEngineering #ResearchAndDevelopment #BuildInPublic","text":""},{"location":"overview/project-scope/","title":"The Path (AI-Pi) Project Scope","text":""},{"location":"overview/project-scope/#core-features","title":"Core Features","text":""},{"location":"overview/project-scope/#1-edge-ai-gaming","title":"1. Edge AI Gaming","text":"<ul> <li> <p>Local AI processing on Raspberry Pi 5</p> </li> <li> <p>AI HAT+ hardware acceleration</p> </li> <li> <p>Adaptive difficulty system (0.2-0.95 range)</p> </li> <li> <p>Basic performance monitoring</p> </li> </ul>"},{"location":"overview/project-scope/#2-turn-based-combat","title":"2. Turn-Based Combat","text":"<ul> <li> <p>Strategic class-based system</p> </li> <li> <p>Basic buff/debuff mechanics</p> </li> <li> <p>Turn-based actions</p> </li> <li> <p>Status effects</p> </li> </ul>"},{"location":"overview/project-scope/#3-battle-system","title":"3. Battle System","text":"<ul> <li> <p>Basic battle state tracking</p> </li> <li> <p>Turn management</p> </li> <li> <p>Win/loss recording</p> </li> <li> <p>Simple stats tracking</p> </li> </ul>"},{"location":"overview/project-scope/#4-user-features","title":"4. User Features","text":"<ul> <li> <p>User authentication</p> </li> <li> <p>Battle creation/joining</p> </li> <li> <p>Basic battle history</p> </li> <li> <p>Forfeit option</p> </li> </ul>"},{"location":"overview/project-scope/#technical-objectives","title":"Technical Objectives","text":""},{"location":"overview/project-scope/#edge-ai-implementation","title":"Edge AI Implementation","text":"<ul> <li> <p>Real-time decision making</p> </li> <li> <p>Adaptive difficulty scaling</p> </li> <li> <p>Personality-driven AI behavior</p> </li> <li> <p>Hardware-optimized processing</p> </li> </ul>"},{"location":"overview/project-scope/#performance-targets","title":"Performance Targets","text":"<ul> <li> <p>Responsive gameplay</p> </li> <li> <p>Efficient resource usage</p> </li> <li> <p>Optimized rendering</p> </li> <li> <p>Smooth animations</p> </li> </ul>"},{"location":"overview/project-scope/#cultural-integration","title":"Cultural Integration","text":""},{"location":"overview/project-scope/#traditional-elements","title":"Traditional Elements","text":"<ul> <li> <p>Authentic representation of practices</p> </li> <li> <p>Respectful adaptation of concepts</p> </li> <li> <p>Community-informed development</p> </li> <li> <p>Historical accuracy</p> </li> </ul>"},{"location":"overview/project-scope/#modern-implementation","title":"Modern Implementation","text":"<ul> <li> <p>Interactive gameplay mechanics</p> </li> <li> <p>Digital world building</p> </li> <li> <p>Accessible learning paths</p> </li> <li> <p>Engaging narratives</p> </li> </ul>"},{"location":"overview/project-scope/#development-timeline","title":"Development Timeline","text":""},{"location":"overview/project-scope/#phase-1-foundation","title":"Phase 1: Foundation","text":"<ul> <li> <p>Core combat system</p> </li> <li> <p>Basic AI implementation</p> </li> <li> <p>Character class design</p> </li> <li> <p>Performance optimization</p> </li> </ul>"},{"location":"overview/project-scope/#phase-2-enhancement","title":"Phase 2: Enhancement","text":"<ul> <li> <p>Advanced AI behaviors</p> </li> <li> <p>Extended character options</p> </li> <li> <p>Expanded world building</p> </li> <li> <p>Community feedback integration</p> </li> </ul>"},{"location":"overview/project-scope/#phase-3-polish","title":"Phase 3: Polish","text":"<ul> <li> <p>UI/UX refinement</p> </li> <li> <p>Performance tuning</p> </li> <li> <p>Content expansion</p> </li> <li> <p>System balancing</p> </li> </ul>"},{"location":"overview/project-scope/#technical-requirements","title":"Technical Requirements","text":""},{"location":"overview/project-scope/#hardware","title":"Hardware","text":"<pre><code>Platform:\n  device: \"Raspberry Pi 5\"\n  ram: \"8GB\"\n  storage: \"32GB+\"\n  accelerator: \"AI HAT+\"\n  cooling: \"Active\"\n</code></pre>"},{"location":"overview/project-scope/#software","title":"Software","text":"<pre><code>Stack:\n  server: \"Go 1.21+\"\n  client: \"TypeScript/React\"\n  ai: \"Python 3.11+\"\n  database: \"MongoDB\"\n\nDependencies:\n  - WebSocket\n\n  - TensorFlow Lite\n\n  - React/Material-UI\n\n  - Hardware drivers\n</code></pre>"},{"location":"overview/project-scope/#deliverables","title":"Deliverables","text":""},{"location":"overview/project-scope/#1-core-system","title":"1. Core System","text":"<ul> <li> <p>Game server</p> </li> <li> <p>AI engine</p> </li> <li> <p>Client application</p> </li> <li> <p>Basic configuration</p> </li> </ul>"},{"location":"overview/project-scope/#2-documentation","title":"2. Documentation","text":"<ul> <li> <p>Technical specifications</p> </li> <li> <p>API documentation</p> </li> <li> <p>Setup guides</p> </li> <li> <p>User manual</p> </li> </ul>"},{"location":"overview/project-scope/#3-development-tools","title":"3. Development Tools","text":"<ul> <li> <p>Build scripts</p> </li> <li> <p>Basic tests</p> </li> <li> <p>Simple monitoring</p> </li> <li> <p>Deploy configs</p> </li> </ul>"},{"location":"overview/project-scope/#success-criteria","title":"Success Criteria","text":""},{"location":"overview/project-scope/#technical","title":"Technical","text":"<ul> <li> <p>Stable performance on target hardware</p> </li> <li> <p>Responsive AI decision making</p> </li> <li> <p>Efficient resource utilization</p> </li> <li> <p>Smooth user experience</p> </li> </ul>"},{"location":"overview/project-scope/#cultural","title":"Cultural","text":"<ul> <li> <p>Authentic representation</p> </li> <li> <p>Community acceptance</p> </li> <li> <p>Educational value</p> </li> <li> <p>Engaging gameplay</p> </li> </ul>"},{"location":"overview/project-scope/#development","title":"Development","text":"<ul> <li> <p>Maintainable codebase</p> </li> <li> <p>Clear documentation</p> </li> <li> <p>Scalable systems</p> </li> <li> <p>Efficient workflows</p> </li> </ul>"},{"location":"overview/research-objectives/","title":"Research Objectives","text":""},{"location":"overview/research-objectives/#primary-research-goals","title":"Primary Research Goals","text":"<p>The Path (AI-Pi) investigates several key areas in edge AI gaming:</p>"},{"location":"overview/research-objectives/#1-edge-ai-performance","title":"1. Edge AI Performance","text":"<ul> <li> <p>Complex AI behavior within 100ms response time</p> </li> <li> <p>Memory optimization under 512MB limit</p> </li> <li> <p>Hardware acceleration via AI HAT+</p> </li> <li> <p>Power consumption patterns</p> </li> </ul>"},{"location":"overview/research-objectives/#2-adaptive-gaming-ai","title":"2. Adaptive Gaming AI","text":"<ul> <li> <p>Transformer-based behavior models</p> </li> <li> <p>Dynamic difficulty (0.2-0.95 range)</p> </li> <li> <p>Personality-driven actions</p> </li> <li> <p>Real-time adaptation</p> </li> </ul>"},{"location":"overview/research-objectives/#3-hardware-optimization","title":"3. Hardware Optimization","text":"<ul> <li> <p>AI HAT+ acceleration techniques</p> </li> <li> <p>Memory management strategies</p> </li> <li> <p>Power efficiency patterns</p> </li> <li> <p>Thermal considerations</p> </li> </ul>"},{"location":"overview/research-objectives/#research-questions","title":"Research Questions","text":""},{"location":"overview/research-objectives/#1-performance-metrics","title":"1. Performance Metrics","text":"<ul> <li> <p>Can we maintain &lt;100ms AI response time?</p> </li> <li> <p>How to optimize for 512MB memory limit?</p> </li> <li> <p>What's the impact of hardware acceleration?</p> </li> <li> <p>How to balance complexity vs. speed?</p> </li> </ul>"},{"location":"overview/research-objectives/#2-player-experience","title":"2. Player Experience","text":"<ul> <li> <p>How do players respond to difficulty range?</p> </li> <li> <p>What makes AI personalities feel natural?</p> </li> <li> <p>How does local processing affect engagement?</p> </li> <li> <p>What's the optimal adaptation rate?</p> </li> </ul>"},{"location":"overview/research-objectives/#3-technical-feasibility","title":"3. Technical Feasibility","text":"<ul> <li> <p>Can Transformer models run efficiently on edge?</p> </li> <li> <p>What are the practical model size limits?</p> </li> <li> <p>How to optimize hardware acceleration?</p> </li> <li> <p>What are the thermal constraints?</p> </li> </ul>"},{"location":"overview/research-objectives/#methodology","title":"Methodology","text":""},{"location":"overview/research-objectives/#1-data-collection","title":"1. Data Collection","text":"<ul> <li> <p>Game state recordings (MongoDB)</p> </li> <li> <p>Player action patterns</p> </li> <li> <p>System performance metrics</p> </li> <li> <p>AI decision processes</p> </li> </ul>"},{"location":"overview/research-objectives/#2-analysis-approaches","title":"2. Analysis Approaches","text":"<ul> <li> <p>Response time analysis (&lt;100ms target)</p> </li> <li> <p>Memory usage patterns (&lt;512MB)</p> </li> <li> <p>CPU utilization (&lt;80%)</p> </li> <li> <p>Temperature monitoring</p> </li> </ul>"},{"location":"overview/research-objectives/#3-validation-methods","title":"3. Validation Methods","text":"<ul> <li> <p>Automated performance tests</p> </li> <li> <p>Player feedback analysis</p> </li> <li> <p>Hardware stress testing</p> </li> <li> <p>Long-term stability monitoring</p> </li> </ul>"},{"location":"overview/research-objectives/#expected-outcomes","title":"Expected Outcomes","text":""},{"location":"overview/research-objectives/#1-technical-insights","title":"1. Technical Insights","text":"<ul> <li> <p>Edge AI performance boundaries</p> </li> <li> <p>Optimization techniques</p> </li> <li> <p>Hardware utilization patterns</p> </li> <li> <p>Scaling limitations</p> </li> </ul>"},{"location":"overview/research-objectives/#2-player-behavior","title":"2. Player Behavior","text":"<ul> <li> <p>Difficulty preference patterns</p> </li> <li> <p>Engagement metrics</p> </li> <li> <p>Learning adaptation rates</p> </li> <li> <p>Personality preferences</p> </li> </ul>"},{"location":"overview/research-objectives/#3-system-design","title":"3. System Design","text":"<ul> <li> <p>Architecture recommendations</p> </li> <li> <p>Hardware configuration guides</p> </li> <li> <p>Performance optimization patterns</p> </li> <li> <p>Development guidelines</p> </li> </ul>"},{"location":"overview/research-objectives/#research-impact","title":"Research Impact","text":""},{"location":"overview/research-objectives/#1-edge-ai-gaming","title":"1. Edge AI Gaming","text":"<ul> <li> <p>Feasibility demonstration</p> </li> <li> <p>Performance benchmarks</p> </li> <li> <p>Design patterns</p> </li> <li> <p>Implementation guides</p> </li> </ul>"},{"location":"overview/research-objectives/#2-hardware-optimization","title":"2. Hardware Optimization","text":"<ul> <li> <p>AI HAT+ usage patterns</p> </li> <li> <p>Memory management techniques</p> </li> <li> <p>Power optimization strategies</p> </li> <li> <p>Thermal solutions</p> </li> </ul>"},{"location":"overview/research-objectives/#3-development-practices","title":"3. Development Practices","text":"<ul> <li> <p>Edge AI design patterns</p> </li> <li> <p>Testing methodologies</p> </li> <li> <p>Documentation standards</p> </li> <li> <p>Performance monitoring</p> </li> </ul>"},{"location":"overview/system-architecture/","title":"System Architecture","text":""},{"location":"overview/system-architecture/#overview","title":"Overview","text":"<p>The Path (AI-Pi) uses a modular architecture designed for edge AI gaming, with clear separation between game logic, AI processing, and data management.</p>"},{"location":"overview/system-architecture/#system-components","title":"System Components","text":"<pre><code>graph TD\n    A[Game Client] --&gt; B[Game Server]\n\n    B --&gt; C[AI Engine]\n\n    C --&gt; D[AI HAT+]\n\n    B --&gt; E[Data Store]\n\n    C --&gt; E\n</code></pre>"},{"location":"overview/system-architecture/#core-components","title":"Core Components","text":"<ul> <li> <p>Game Server (Go)</p> <ul> <li> <p>Handles game state management</p> </li> <li> <p>WebSocket communication</p> </li> <li> <p>JSON state serialization</p> </li> <li> <p>Turn sequencing</p> </li> <li> <p>Action validation</p> </li> </ul> </li> <li> <p>AI Engine (Python)</p> <ul> <li> <p>TensorFlow Lite inference</p> </li> <li> <p>Dynamic difficulty (0.2-0.95)</p> </li> <li> <p>Personality system</p> </li> <li> <p>Training pipeline (Mac Mini M1)</p> </li> </ul> </li> <li> <p>Game Client (TypeScript)</p> <ul> <li> <p>React with Material-UI</p> </li> <li> <p>Redux state management</p> </li> <li> <p>WebSocket communication</p> </li> <li> <p>Simple battle UI</p> </li> </ul> </li> <li> <p>Hardware Layer</p> <ul> <li> <p>Raspberry Pi 5 (8GB)</p> </li> <li> <p>AI HAT+ acceleration</p> </li> <li> <p>Active cooling</p> </li> <li> <p>Local storage</p> </li> </ul> </li> </ul>"},{"location":"overview/system-architecture/#data-flow","title":"Data Flow","text":"<ol> <li>Game State Management</li> </ol> <pre><code>Client Action -&gt; Server Validation -&gt; State Update -&gt; AI Processing -&gt; Response\n</code></pre> <ol> <li>AI Decision Pipeline</li> </ol> <pre><code>State Input -&gt; Feature Extraction -&gt; TFLite Inference -&gt; Action Selection -&gt; Validation\n</code></pre> <ol> <li>Battle System</li> </ol> <pre><code>User Login -&gt; Create/Join Battle -&gt; Turn Exchange -&gt; Battle End -&gt; Stats Update\n</code></pre>"},{"location":"overview/system-architecture/#integration-points","title":"Integration Points","text":""},{"location":"overview/system-architecture/#1-server-client","title":"1. Server-Client","text":"<pre><code>interface GameConnection {\n    // WebSocket connection for battle management\n    connect(token: string): Promise&lt;void&gt;\n    createBattle(): Promise&lt;string&gt;\n    joinBattle(battleId: string): Promise&lt;void&gt;\n    submitAction(action: GameAction): Promise&lt;void&gt;\n    forfeit(): Promise&lt;void&gt;\n    onStateUpdate(handler: (state: GameState) =&gt; void): void\n}\n</code></pre>"},{"location":"overview/system-architecture/#2-server-ai","title":"2. Server-AI","text":"<pre><code>class AIInterface:\n    \"\"\"AI engine interface\"\"\"\n    async def process_turn(\n        self,\n        state: GameState,\n        difficulty: float\n    ) -&gt; GameAction:\n\n        \"\"\"Process game state and return next action\"\"\"\n</code></pre>"},{"location":"overview/system-architecture/#3-client-ui-states","title":"3. Client UI States","text":"<pre><code>interface UIState {\n    // Simple UI states\n    isPlayerTurn: boolean\n    isWaiting: boolean\n    availableActions: string[]\n    battleStatus: 'active' | 'victory' | 'defeat'\n}\n</code></pre>"},{"location":"overview/system-architecture/#performance-considerations","title":"Performance Considerations","text":"<ol> <li> <p>AI Processing</p> <ul> <li> <p>TensorFlow Lite optimization</p> </li> <li> <p>Batch inference when needed</p> </li> <li> <p>Simple state management</p> </li> </ul> </li> <li> <p>Client Interface</p> <ul> <li> <p>Material-UI components</p> </li> <li> <p>Basic animations for state changes</p> </li> <li> <p>Disabled controls during AI turns</p> </li> </ul> </li> <li> <p>Data Management</p> <ul> <li> <p>Local game state</p> </li> <li> <p>Basic user authentication</p> </li> <li> <p>Battle history storage</p> </li> </ul> </li> </ol>"},{"location":"scripts/","title":"Overview of Documentation Scripts","text":"<p>The code for this documentation contains scripts designed to maintain the quality and integrity of the AI-Pi documentation system. These tools automate the processes of validation, logging, and content management to ensure consistency and accuracy across all documentation.</p>"},{"location":"scripts/#requirements","title":"Requirements","text":"<p>Global Dependencies</p> <ul> <li> <p>Python 3.9+</p> </li> <li> <p>Operating System: Linux, macOS, or Windows</p> </li> <li> <p>Git (for version control)</p> </li> <li> <p>Make (for running convenience commands)</p> </li> </ul> <p>Each script category has its own specific dependencies. See their respective README files for details:</p> <ul> <li> <p>Image Management</p> </li> <li> <p>Documentation Validation</p> </li> <li> <p>Log Management</p> </li> </ul>"},{"location":"scripts/#methodology","title":"Methodology","text":"<p>Our documentation system is built on several key principles:</p> <ol> <li> <p>Automated Validation: Scripts verify documentation structure, links, and content integrity</p> </li> <li> <p>Consistent Formatting: Tools ensure uniform style and presentation</p> </li> <li> <p>Privacy Protection: Automated removal of sensitive metadata from AI-generated images</p> </li> <li> <p>Version Control: Systematic tracking of documentation changes</p> </li> </ol>"},{"location":"scripts/#script-categories","title":"Script Categories","text":"<p>Image Management (<code>image_management/</code>)</p> <p>Scripts for managing and optimizing images:</p> <ul> <li> <p>Image optimization and validation</p> </li> <li> <p>Metadata management</p> </li> <li> <p>Size and DPI standardization</p> </li> <li> <p>Format validation</p> </li> </ul> <p>See Image Management Documentation for details.</p> <p>Documentation Validation (<code>doc_validation/</code>)</p> <p>Scripts that verify and maintain documentation quality:</p> <ul> <li> <p>Link checking and validation</p> </li> <li> <p>Format validation and auto-formatting</p> </li> <li> <p>Structure verification</p> </li> <li> <p>Content integrity checks</p> </li> <li> <p>Code style enforcement</p> </li> <li> <p>Consistent spacing and style</p> </li> </ul> <p>See Validation Documentation for details.</p> <p>Log Management (<code>log_management/</code>)</p> <p>Scripts for managing development logs and tracking progress:</p> <ul> <li> <p><code>update_logs.py</code>: Updates documentation navigation with log files</p> </li> <li> <p><code>calculate_dev_hours.py</code>: Tracks total development hours and updates main page</p> </li> <li> <p>Automatically runs during documentation deployment</p> </li> <li> <p>Maintains consistent log format and structure</p> </li> </ul>"},{"location":"scripts/#best-practices","title":"Best Practices","text":"<ol> <li>Run validation scripts before committing changes</li> <li> <p>Always check images for metadata using <code>make check-images</code></p> </li> <li> <p>Keep logs updated with significant changes</p> </li> <li>Follow the established documentation structure</li> </ol>"},{"location":"scripts/#getting-started","title":"Getting Started","text":"<p>See individual script directories for detailed usage instructions:</p> <ul> <li> <p>Image Management Documentation</p> </li> <li> <p>Documentation Validation Guide</p> </li> <li> <p>Log Management Guide</p> </li> </ul>"},{"location":"scripts/doc_validation/","title":"Documentation Validation Package","text":"<p>This package provides a comprehensive set of tools for validating documentation in the agenic context system. It helps maintain documentation quality, consistency, and integrity through automated validation checks.</p>"},{"location":"scripts/doc_validation/#requirements","title":"Requirements","text":"<p>Dependencies</p> <ul> <li> <p>Python 3.9+</p> </li> <li> <p>PyYAML&gt;=6.0</p> </li> <li> <p>Markdown&gt;=3.3</p> </li> <li> <p>Operating System: Linux, macOS, or Windows</p> </li> </ul> <p>To install dependencies:</p> <pre><code>pip install PyYAML&gt;=6.0 Markdown&gt;=3.3\n</code></pre>"},{"location":"scripts/doc_validation/#components","title":"Components","text":""},{"location":"scripts/doc_validation/#validation-scripts","title":"Validation Scripts","text":"<ul> <li> <p><code>validate_docs.py</code>: Main validation script that runs all checks</p> </li> <li> <p><code>format_docs.py</code>: Markdown formatting script</p> </li> <li> <p><code>health_checker.py</code>: Documentation health checks</p> </li> <li> <p><code>ref_validator.py</code>: Link and reference validation</p> </li> <li> <p><code>validation_types.py</code>: Shared types and utilities</p> </li> </ul>"},{"location":"scripts/doc_validation/#features","title":"Features","text":"<ul> <li> <p>Link checking and validation</p> </li> <li> <p>Format validation and auto-formatting</p> </li> <li> <p>Structure verification</p> </li> <li> <p>Content integrity checks</p> </li> <li> <p>Consistent spacing and style</p> </li> </ul>"},{"location":"scripts/doc_validation/#code-style","title":"Code Style","text":"<p>The project uses several tools to maintain code quality:</p> <ul> <li> <p><code>ruff</code>: Fast Python linter with auto-fix</p> </li> <li> <p><code>black</code>: Code formatting</p> </li> <li> <p><code>isort</code>: Import sorting</p> </li> </ul> <p>These are configured in <code>pyproject.toml</code> with sensible defaults that prioritize productivity over strict enforcement.</p>"},{"location":"scripts/doc_validation/#scripts","title":"Scripts","text":""},{"location":"scripts/doc_validation/#validate_docspy","title":"<code>validate_docs.py</code>","text":"<p>Validates documentation quality and generates reports:</p> <ul> <li> <p>Link checking</p> </li> <li> <p>Format validation</p> </li> <li> <p>Structure verification</p> </li> <li> <p>Content integrity checks</p> </li> <li> <p>Automatically formats documentation before validation</p> </li> </ul>"},{"location":"scripts/doc_validation/#format_docspy","title":"<code>format_docs.py</code>","text":"<p>Formats markdown files according to project standards:</p> <ul> <li> <p>Fixes trailing whitespace</p> </li> <li> <p>Ensures consistent blank lines</p> </li> <li> <p>Fixes list spacing</p> </li> <li> <p>Fixes heading spacing</p> </li> <li> <p>Fixes code block spacing</p> </li> <li> <p>Fixes admonition spacing</p> </li> </ul>"},{"location":"scripts/doc_validation/#usage","title":"Usage","text":"<p>Run via Makefile commands:</p> <pre><code>make validate-docs  # Run all validation checks\n\nmake format        # Format code and documentation\n\nmake lint          # Verify code style\n</code></pre> <p>Alternatively, the validation package can be used through the main validation script:</p> <pre><code>./validate_docs.py /path/to/docs\n</code></pre> <p>This will:</p> <ul> <li> <p>Validate all documentation files in the specified directory</p> </li> <li> <p>Generate a detailed report with validation results</p> </li> <li> <p>Save the report to the .reports directory with a unique filename based on timestamp and UUID</p> </li> <li> <p>Provide a symlink to the latest report for easy access</p> </li> </ul>"},{"location":"scripts/doc_validation/#output","title":"Output","text":"<p>The validation process generates two types of output:</p> <ol> <li> <p>Human-readable report (<code>validation_report_TIMESTAMP.txt</code>)</p> </li> <li> <p>Summary statistics</p> </li> <li> <p>Detailed validation results</p> </li> <li> <p>Issue descriptions and locations</p> </li> <li> <p>JSON results (<code>validation_results_TIMESTAMP.json</code>)</p> </li> <li> <p>Raw validation data</p> </li> <li> <p>Detailed statistics</p> </li> <li> <p>Machine-readable format</p> </li> </ol>"},{"location":"scripts/doc_validation/#best-practices","title":"Best Practices","text":"<ol> <li>Run validations before committing documentation changes</li> <li>Review all validation reports carefully</li> <li>Address errors before warnings</li> <li>Keep the style guide updated</li> <li>Monitor documentation health trends</li> </ol>"},{"location":"scripts/doc_validation/#implementation-notes","title":"Implementation Notes","text":"<ul> <li> <p>All validators return <code>ValidationResult</code> objects</p> </li> <li> <p>Results include both issues and statistics</p> </li> <li> <p>Issues are categorized by severity</p> </li> <li> <p>File paths are stored relative to docs root</p> </li> <li> <p>JSON output preserves all validation details</p> </li> </ul>"},{"location":"scripts/image_management/","title":"Image Management Scripts","text":"<p>This directory contains scripts for managing and optimizing images used in the documentation.</p>"},{"location":"scripts/image_management/#requirements","title":"Requirements","text":"<p>Dependencies</p> <ul> <li> <p>Python 3.9+</p> </li> <li> <p>Pillow (PIL) library</p> </li> <li> <p>Operating System: Linux, macOS, or Windows</p> </li> </ul> <p>To install dependencies:</p> <pre><code>pip install Pillow&gt;=10.0.0\n</code></pre>"},{"location":"scripts/image_management/#purpose","title":"Purpose","text":"<p>The primary purpose of these tools is to protect privacy and security when using AI-generated images. Many AI image generation services (like Midjourney and DALL-E) embed metadata in images that could potentially:</p> <ul> <li> <p>Contain account identifiers</p> </li> <li> <p>Include API keys or session data</p> </li> <li> <p>Reveal prompts used for generation</p> </li> <li> <p>Link to personal or organizational accounts</p> </li> </ul>"},{"location":"scripts/image_management/#image-management","title":"Image Management","text":"<p>Tools for managing and optimizing images in the documentation.</p>"},{"location":"scripts/image_management/#image-processing-image_processingpy","title":"Image Processing (<code>image_processing.py</code>)","text":"<p>Main script for image optimization and validation:</p> <ul> <li> <p>Automatic metadata management</p> </li> <li> <p>Size optimization</p> </li> <li> <p>DPI standardization</p> </li> <li> <p>Format validation</p> </li> <li> <p>Directory scanning</p> </li> <li> <p>Check mode for validation</p> </li> </ul>"},{"location":"scripts/image_management/#usage","title":"Usage","text":"<p>Run via Makefile commands:</p> <pre><code># Check images for optimization needs\n\nmake check-images\n\n# Process and optimize images\n\nmake process-images\n</code></pre> <p>Or directly:</p> <pre><code># Check images in a directory\n\npython image_processing.py --directory docs/ --check\n\n# Process images in a directory\n\npython image_processing.py --directory docs/\n</code></pre>"},{"location":"scripts/image_management/#integration","title":"Integration","text":"<p>The image processing is integrated into the GitHub Actions workflow and runs automatically during deployment:</p> <ol> <li>Images are checked for optimization needs</li> <li>Images are processed if needed</li> <li>Changes are committed automatically</li> <li>Documentation is rebuilt with optimized images</li> </ol>"},{"location":"scripts/image_management/#features","title":"Features","text":"<ul> <li> <p>Metadata Management:</p> </li> <li> <p>Remove sensitive metadata</p> </li> <li> <p>Preserve essential image data</p> </li> <li> <p>Validate metadata removal</p> </li> <li> <p>Size Optimization:</p> </li> <li> <p>Automatic resizing</p> </li> <li> <p>DPI standardization</p> </li> <li> <p>Format-specific settings</p> </li> <li> <p>Validation:</p> </li> <li> <p>Size checks</p> </li> <li> <p>Format validation</p> </li> <li> <p>DPI verification</p> </li> <li> <p>Metadata scanning</p> </li> </ul>"},{"location":"scripts/image_management/#configuration","title":"Configuration","text":"<p>Image processing settings are configured in the script:</p> <ul> <li> <p>Max image width: 800px</p> </li> <li> <p>DPI: 72</p> </li> <li> <p>Quality: 95%</p> </li> <li> <p>Supported formats: jpg, png, gif</p> </li> </ul>"},{"location":"scripts/image_management/#makefile-commands","title":"Makefile Commands","text":"<p>For convenience, you can use these Makefile commands:</p> <pre><code># Check for images needing processing\n\nmake check-images\n\n# Process and optimize images (includes confirmation prompt)\n\nmake process-images\n</code></pre> <p>The <code>process-images</code> command will:</p> <ol> <li>Ask for confirmation before making changes</li> <li> <p>Process all images in the repository:</p> <ul> <li> <p>Remove metadata (EXIF, XMP, etc.)</p> </li> <li> <p>Resize to max width 800px (maintaining aspect ratio)</p> </li> <li> <p>Set DPI to 72 for web optimization</p> </li> <li> <p>Optimize quality settings (95% JPEG, optimized PNG)</p> </li> </ul> </li> <li> <p>Verify all changes were applied correctly</p> </li> </ol>"},{"location":"scripts/image_management/#important-note","title":"Important Note","text":"<p>Always run <code>make check-images</code> before committing new images to ensure they meet our standards for:</p> <ul> <li> <p>Privacy (no metadata)</p> </li> <li> <p>Web optimization (correct size and DPI)</p> </li> <li> <p>File size (optimized formats)</p> </li> </ul> <p>This is especially important for images generated using Midjourney, DALL-E, or other AI services.</p>"},{"location":"scripts/log_management/","title":"Log Management Scripts","text":"<p>This directory contains scripts for managing development logs and social media updates.</p>"},{"location":"scripts/log_management/#requirements","title":"Requirements","text":"<p>Dependencies</p> <ul> <li> <p>Python 3.9+</p> </li> <li> <p>PyYAML&gt;=6.0</p> </li> <li> <p>python-frontmatter&gt;=1.0.0</p> </li> <li> <p>Python-Markdown (for admonitions)</p> </li> <li> <p>Operating System: Linux, macOS, or Windows</p> </li> </ul> <p>To install dependencies:</p> <pre><code>pip install PyYAML&gt;=6.0 python-frontmatter&gt;=1.0.0 python-markdown\n</code></pre>"},{"location":"scripts/log_management/#tools-included","title":"Tools Included","text":""},{"location":"scripts/log_management/#log-navigation-manager-update_logspy","title":"Log Navigation Manager (<code>update_logs.py</code>)","text":"<ul> <li> <p>Updates <code>mkdocs.yml</code> with the latest log files</p> </li> <li> <p>Maintains chronological ordering of logs</p> </li> <li> <p>Ensures proper navigation structure</p> </li> <li> <p>Integrates new logs into the documentation</p> </li> <li> <p>Handles both development logs and social updates</p> </li> </ul>"},{"location":"scripts/log_management/#mkdocs-log-generator-gen_logspy","title":"MkDocs Log Generator (<code>gen_logs.py</code>)","text":"<ul> <li> <p>Automatically builds <code>log_pages.yml</code> for MkDocs</p> </li> <li> <p>Creates chronological navigation structure</p> </li> <li> <p>Excludes index files from generation</p> </li> <li> <p>Integrates with MkDocs build process</p> </li> <li> <p>Ensures proper date-based organization</p> </li> </ul>"},{"location":"scripts/log_management/#development-hours-tracker-calculate_dev_hourspy","title":"Development Hours Tracker (<code>calculate_dev_hours.py</code>)","text":"<ul> <li> <p>Calculates total development hours from log files and updates the main documentation page.</p> </li> <li> <p>Scans all log files for <code>duration_hours</code> field</p> </li> <li> <p>Calculates total development time</p> </li> <li> <p>Updates <code>docs/index.md</code> with an admonition showing total hours</p> </li> <li> <p>Runs automatically during documentation deployment</p> </li> </ul>"},{"location":"scripts/log_management/#purpose","title":"Purpose","text":"<p>These tools are essential for maintaining a clear and organized log structure within the documentation, aiding both AI agents and human developers in navigating the project's history and updates.</p>"},{"location":"scripts/log_management/#usage","title":"Usage","text":"<p>The scripts are typically run through the Makefile:</p> <pre><code>make update-logs  # Updates navigation and calculates total development hours\n</code></pre>"},{"location":"scripts/log_management/#log-file-format","title":"Log File Format","text":"<p>Each log file should include a YAML block with the following fields:</p> <pre><code>type: [Type of work]\nduration_hours: [Duration in hours, e.g., 4.5]\nhashtags: [comma-separated-tags]\n\nblockers: [Any blockers or None]\n</code></pre>"},{"location":"technical/dependencies/","title":"Project Dependencies","text":""},{"location":"technical/dependencies/#overview","title":"Overview","text":"<p>This document lists all project dependencies and their versions to ensure consistent development and deployment.</p>"},{"location":"technical/dependencies/#server-dependencies-go","title":"Server Dependencies (Go)","text":"<pre><code>// go.mod\nmodule github.com/mater-dev/thepath-ai_pi\n\ngo 1.21\n\nrequire (\n    github.com/gorilla/websocket v1.5.1\n    github.com/gin-gonic/gin v1.9.1\n\n    github.com/golang-jwt/jwt/v5 v5.2.0\n\n    github.com/google/uuid v1.5.0\n    go.mongodb.org/mongo-driver v1.13.1\n\n)\n</code></pre>"},{"location":"technical/dependencies/#client-dependencies-typescript","title":"Client Dependencies (TypeScript)","text":"<pre><code>{\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n\n    \"redux\": \"^5.0.0\",\n    \"react-redux\": \"^9.0.4\",\n\n    \"@reduxjs/toolkit\": \"^2.0.1\",\n    \"@mui/material\": \"^5.15.0\",\n    \"@mui/icons-material\": \"^5.15.0\",\n\n    \"@emotion/react\": \"^11.11.1\",\n    \"@emotion/styled\": \"^11.11.0\",\n    \"typescript\": \"^5.3.3\",\n    \"axios\": \"^1.6.2\",\n    \"socket.io-client\": \"^4.7.2\"\n\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"^18.2.45\",\n    \"@types/react-dom\": \"^18.2.18\",\n\n    \"@typescript-eslint/eslint-plugin\": \"^6.15.0\",\n\n    \"@typescript-eslint/parser\": \"^6.15.0\",\n\n    \"eslint\": \"^8.56.0\",\n    \"jest\": \"^29.7.0\",\n    \"@testing-library/react\": \"^14.1.2\",\n\n    \"vite\": \"^5.0.10\"\n  }\n}\n</code></pre>"},{"location":"technical/dependencies/#ai-dependencies-python","title":"AI Dependencies (Python)","text":"<pre><code># requirements.txt\n\ntensorflow-lite==2.14.0\n\nnumpy==1.24.3\npandas==2.1.4\nscikit-learn==1.3.2\n\nflask==3.0.0\ngunicorn==21.2.0\nprometheus-client==0.19.0\n</code></pre>"},{"location":"technical/dependencies/#development-tools","title":"Development Tools","text":""},{"location":"technical/dependencies/#version-control","title":"Version Control","text":"<ul> <li> <p>Git 2.39+</p> </li> <li> <p>GitHub CLI 2.0+</p> </li> <li> <p>Git LFS 3.0+</p> </li> </ul>"},{"location":"technical/dependencies/#build-tools","title":"Build Tools","text":"<ul> <li> <p>Docker 20.10+</p> </li> <li> <p>Docker Compose 2.2+</p> </li> <li> <p>Make 4.3+</p> </li> </ul>"},{"location":"technical/dependencies/#code-quality","title":"Code Quality","text":"<ul> <li> <p>ESLint 8.56+</p> </li> <li> <p>Prettier 3.1+</p> </li> <li> <p>golangci-lint 1.55+</p> </li> <li> <p>black 23.12+</p> </li> <li> <p>isort 5.13+</p> </li> </ul>"},{"location":"technical/dependencies/#testing","title":"Testing","text":"<ul> <li> <p>Jest 29.7+</p> </li> <li> <p>React Testing Library 14.1+</p> </li> <li> <p>Go testing</p> </li> <li> <p>pytest 7.4+</p> </li> </ul>"},{"location":"technical/dependencies/#infrastructure-dependencies","title":"Infrastructure Dependencies","text":""},{"location":"technical/dependencies/#databases","title":"Databases","text":"<ul> <li> <p>MongoDB 5.0+</p> </li> <li> <p>Redis 7.0+ (optional)</p> </li> </ul>"},{"location":"technical/dependencies/#monitoring","title":"Monitoring","text":"<ul> <li> <p>Prometheus 2.45+</p> </li> <li> <p>Grafana 10.2+</p> </li> </ul>"},{"location":"technical/dependencies/#cicd","title":"CI/CD","text":"<ul> <li> <p>GitHub Actions</p> </li> <li> <p>Docker Registry</p> </li> <li> <p>Ansible 2.15+</p> </li> </ul>"},{"location":"technical/dependencies/#hardware-requirements","title":"Hardware Requirements","text":""},{"location":"technical/dependencies/#development","title":"Development","text":"<ul> <li> <p>CPU: 4+ cores</p> </li> <li> <p>RAM: 8GB+</p> </li> <li> <p>Storage: 20GB+</p> </li> <li> <p>OS: Linux/macOS/Windows</p> </li> </ul>"},{"location":"technical/dependencies/#production-raspberry-pi-5","title":"Production (Raspberry Pi 5)","text":"<ul> <li> <p>CPU: BCM2712</p> </li> <li> <p>RAM: 8GB</p> </li> <li> <p>Storage: 32GB+</p> </li> <li> <p>AI HAT+: Coral Edge TPU</p> </li> </ul>"},{"location":"technical/dependencies/#version-control_1","title":"Version Control","text":""},{"location":"technical/dependencies/#git-configuration","title":"Git Configuration","text":"<ul> <li> <p>LFS for model files</p> </li> <li> <p>Husky for pre-commit hooks</p> </li> <li> <p>Conventional commits</p> </li> </ul>"},{"location":"technical/dependencies/#branching-strategy","title":"Branching Strategy","text":"<ul> <li> <p>main: production</p> </li> <li> <p>develop: integration</p> </li> <li> <p>feature/*: features</p> </li> <li> <p>bugfix/*: bug fixes</p> </li> </ul>"},{"location":"technical/dependencies/#dependency-management","title":"Dependency Management","text":""},{"location":"technical/dependencies/#update-policy","title":"Update Policy","text":"<ul> <li> <p>Security updates: Immediate</p> </li> <li> <p>Major versions: Quarterly</p> </li> <li> <p>Minor versions: Monthly</p> </li> <li> <p>Patches: Weekly</p> </li> </ul>"},{"location":"technical/dependencies/#version-constraints","title":"Version Constraints","text":"<ul> <li> <p>Production: Fixed versions</p> </li> <li> <p>Development: Caret ranges</p> </li> <li> <p>CI/CD: Latest stable</p> </li> </ul>"},{"location":"technical/dependencies/#container-images","title":"Container Images","text":""},{"location":"technical/dependencies/#base-images","title":"Base Images","text":"<ul> <li> <p>Go: golang:1.21-alpine</p> </li> <li> <p>Node: node:18-alpine</p> </li> <li> <p>Python: python:3.11-slim</p> </li> <li> <p>MongoDB: mongo:5</p> </li> </ul>"},{"location":"technical/dependencies/#custom-images","title":"Custom Images","text":"<ul> <li> <p>Server: thepath-ai_pi/server</p> </li> <li> <p>Client: thepath-ai_pi/client</p> </li> <li> <p>AI: thepath-ai_pi/ai</p> </li> </ul>"},{"location":"technical/ai-system/behavior-model/","title":"AI Behavior Model","text":""},{"location":"technical/ai-system/behavior-model/#overview","title":"Overview","text":"<p>The AI system uses TensorFlow Lite for efficient inference on the Raspberry Pi 5 with AI HAT+ acceleration. Training is performed on Mac Mini M1, with the trained models deployed to the Raspberry Pi.</p>"},{"location":"technical/ai-system/behavior-model/#core-components","title":"Core Components","text":"<ol> <li> <p>Model Architecture</p> </li> <li> <p>Input: Game state features</p> </li> <li> <p>Output: Action probabilities</p> </li> <li> <p>Format: TensorFlow Lite</p> </li> <li> <p>Size: Optimized for edge deployment</p> </li> <li> <p>Decision Making</p> </li> </ol> <pre><code>class BattleAI:\n    def __init__(self, model_path: str):\n        self.interpreter = tf.lite.Interpreter(model_path=model_path)\n        self.interpreter.allocate_tensors()\n\n    def decide_action(self, state: GameState, difficulty: float) -&gt; Action:\n\n        \"\"\"Process game state and return next action\"\"\"\n        features = self.extract_features(state)\n        predictions = self.run_inference(features)\n        return self.select_action(predictions, difficulty)\n</code></pre> <ol> <li>Difficulty Scaling</li> </ol> <pre><code>def scale_difficulty(predictions: np.ndarray, difficulty: float) -&gt; np.ndarray:\n\n    \"\"\"Adjust action selection based on difficulty level (0.2-0.95)\"\"\"\n\n    # Simple temperature scaling\n\n    return predictions ** (1.0 / difficulty)\n</code></pre>"},{"location":"technical/ai-system/behavior-model/#training-pipeline","title":"Training Pipeline","text":"<ol> <li> <p>Data Collection</p> </li> <li> <p>Battle records</p> </li> <li> <p>Action outcomes</p> </li> <li> <p>Win/loss statistics</p> </li> <li> <p>Training Environment</p> </li> <li> <p>Platform: Mac Mini M1</p> </li> <li> <p>Framework: TensorFlow</p> </li> <li> <p>Output: TFLite model</p> </li> <li> <p>Model Deployment</p> </li> </ol> <pre><code>def deploy_model(model_path: str):\n    \"\"\"Deploy model to Raspberry Pi\"\"\"\n    interpreter = tf.lite.Interpreter(model_path=model_path)\n    interpreter.allocate_tensors()\n\n    # Verify model\n\n    input_details = interpreter.get_input_details()\n    output_details = interpreter.get_output_details()\n    return interpreter\n</code></pre>"},{"location":"technical/ai-system/behavior-model/#state-management","title":"State Management","text":"<ol> <li>Feature Extraction</li> </ol> <pre><code>def extract_features(state: GameState) -&gt; np.ndarray:\n\n    \"\"\"Extract relevant features from game state\"\"\"\n    features = [\n        state.player.health / 100.0,\n        state.opponent.health / 100.0,\n        state.player.energy / 100.0,\n        *encode_status_effects(state.player.status),\n\n        *encode_status_effects(state.opponent.status)\n\n    ]\n    return np.array(features, dtype=np.float32)\n</code></pre> <ol> <li>Action Selection</li> </ol> <pre><code>def select_action(predictions: np.ndarray, difficulty: float) -&gt; Action:\n\n    \"\"\"Select action based on model predictions and difficulty\"\"\"\n    scaled = scale_difficulty(predictions, difficulty)\n    action_idx = np.random.choice(len(scaled), p=scaled)\n    return ACTIONS[action_idx]\n</code></pre>"},{"location":"technical/ai-system/behavior-model/#integration","title":"Integration","text":"<ol> <li>WebSocket Handler</li> </ol> <pre><code>class AIHandler:\n    def __init__(self, model_path: str):\n        self.ai = BattleAI(model_path)\n\n    async def handle_turn(self, state: dict, difficulty: float):\n        \"\"\"Handle turn request from game server\"\"\"\n        action = self.ai.decide_action(state, difficulty)\n        return {'action': action.to_dict()}\n</code></pre> <ol> <li>Performance Monitoring</li> </ol> <pre><code>class AIMonitor:\n    def __init__(self):\n        self.inference_times = []\n\n    def log_inference(self, duration: float):\n        \"\"\"Log inference time\"\"\"\n        self.inference_times.append(duration)\n</code></pre>"},{"location":"technical/ai-system/behavior-model/#monitoring","title":"Monitoring","text":"<ul> <li> <p>Model performance metrics</p> </li> <li> <p>Decision confidence scores</p> </li> <li> <p>Response time tracking</p> </li> <li> <p>Resource utilization</p> </li> </ul>"},{"location":"technical/ai-system/behavior-model/#configuration","title":"Configuration","text":"<p>The AI system can be configured through a YAML configuration file:</p> <pre><code>model_path: 'path/to/model.tflite'\ndifficulty: 0.5\n</code></pre>"},{"location":"technical/ai-system/behavior-model/#configuration-options","title":"Configuration Options","text":"Option Description Default <p>| model_path | Path to TFLite model | 'path/to/model.tflite' | | difficulty | Difficulty level (0.2-0.95) | 0.5 |</p>"},{"location":"technical/ai-system/behavior-model/#performance-tuning","title":"Performance Tuning","text":"<ol> <li>Memory Usage</li> <li> <p>Adjust model size based on available RAM</p> </li> <li> <p>Use feature selection to reduce input dimension</p> </li> <li> <p>Processing Speed</p> </li> <li> <p>Configure batch_size for inference</p> </li> <li> <p>Enable hardware acceleration when available</p> </li> </ol>"},{"location":"technical/ai-system/difficulty-system/","title":"Difficulty System","text":""},{"location":"technical/ai-system/difficulty-system/#overview","title":"Overview","text":"<p>The difficulty system provides basic adjustment of AI behavior using a simple scaling factor from 0.2 to 0.95.</p>"},{"location":"technical/ai-system/difficulty-system/#core-components","title":"Core Components","text":""},{"location":"technical/ai-system/difficulty-system/#difficulty-levels","title":"Difficulty Levels","text":"<pre><code>class DifficultyLevel:\n    \"\"\"Basic difficulty settings\"\"\"\n    BEGINNER = 0.2    # Very easy, mostly random actions\n\n    EASY = 0.4       # Basic strategy\n\n    NORMAL = 0.6     # Balanced decisions\n\n    HARD = 0.8      # Strong strategy\n\n    EXPERT = 0.95    # Near-optimal play\n\ndef apply_difficulty(predictions: np.ndarray, difficulty: float) -&gt; np.ndarray:\n\n    \"\"\"Apply difficulty scaling to model predictions\"\"\"\n    # Scale predictions using temperature scaling\n\n    # Lower difficulty = higher temperature = more random\n\n    temperature = 1.0 / max(0.2, min(0.95, difficulty))\n    scaled = predictions ** temperature\n\n    return scaled / scaled.sum()\n</code></pre>"},{"location":"technical/ai-system/difficulty-system/#action-selection","title":"Action Selection","text":"<pre><code>class ActionSelector:\n    \"\"\"Selects actions based on model predictions and difficulty\"\"\"\n    def __init__(self, difficulty: float):\n        self.difficulty = difficulty\n\n    def select_action(self, predictions: np.ndarray) -&gt; int:\n\n        \"\"\"Select action using scaled predictions\"\"\"\n        scaled_probs = apply_difficulty(predictions, self.difficulty)\n        return np.random.choice(len(scaled_probs), p=scaled_probs)\n\n    def get_top_actions(self, predictions: np.ndarray, n: int = 3) -&gt; List[int]:\n\n        \"\"\"Get top n actions for UI feedback\"\"\"\n        scaled_probs = apply_difficulty(predictions, self.difficulty)\n        return np.argsort(scaled_probs)[-n:][::-1]\n</code></pre>"},{"location":"technical/ai-system/difficulty-system/#basic-adaptation","title":"Basic Adaptation","text":"<pre><code>class DifficultyAdjuster:\n    \"\"\"Simple difficulty adjustment based on win/loss\"\"\"\n    def __init__(self, initial_difficulty: float = 0.6):\n        self.current_difficulty = initial_difficulty\n        self.adjustment_rate = 0.1\n        self.min_difficulty = 0.2\n        self.max_difficulty = 0.95\n\n    def adjust_after_battle(self, player_won: bool):\n        \"\"\"Adjust difficulty after battle\"\"\"\n        if player_won:\n            # Increase difficulty\n\n            self.current_difficulty = min(\n                self.max_difficulty,\n                self.current_difficulty + self.adjustment_rate\n            )\n        else:\n            # Decrease difficulty\n\n            self.current_difficulty = max(\n                self.min_difficulty,\n                self.current_difficulty - self.adjustment_rate\n\n            )\n</code></pre>"},{"location":"technical/ai-system/difficulty-system/#integration","title":"Integration","text":"<pre><code>class BattleAI:\n    \"\"\"Main AI class for battles\"\"\"\n    def __init__(self, model_path: str, difficulty: float = 0.6):\n        self.interpreter = tf.lite.Interpreter(model_path=model_path)\n        self.interpreter.allocate_tensors()\n        self.action_selector = ActionSelector(difficulty)\n        self.difficulty_adjuster = DifficultyAdjuster(difficulty)\n\n    def get_action(self, state: GameState) -&gt; Action:\n\n        \"\"\"Get next action for battle\"\"\"\n        # Get model predictions\n\n        features = extract_features(state)\n        predictions = run_inference(self.interpreter, features)\n\n        # Select action using difficulty scaling\n\n        action_idx = self.action_selector.select_action(predictions)\n        return ACTIONS[action_idx]\n\n    def update_difficulty(self, battle_result: bool):\n        \"\"\"Update difficulty after battle\"\"\"\n        self.difficulty_adjuster.adjust_after_battle(battle_result)\n        self.action_selector.difficulty = self.difficulty_adjuster.current_difficulty\n</code></pre>"},{"location":"technical/ai-system/training-pipeline/","title":"AI Training Pipeline","text":"<p>Overview</p> <p>Our AI training system uses a Mac Mini M1 for developing and training models, which are then deployed to Raspberry Pi for gameplay. Think of it as teaching a computer to play our game by showing it examples of good gameplay, then packaging that knowledge into a format that can run efficiently on smaller devices.</p>"},{"location":"technical/ai-system/training-pipeline/#training-process","title":"Training Process","text":""},{"location":"technical/ai-system/training-pipeline/#1-data-collection","title":"1. Data Collection","text":"<p>During this phase, we gather information about how players and AI agents interact in battles:</p> <ul> <li> <p>Battle States:</p> <ul> <li> <p>Game State Snapshots:</p> <ul> <li> <p>Player positions and health levels</p> </li> <li> <p>Current status effects on each entity</p> </li> <li> <p>Available action choices</p> </li> <li> <p>Environmental conditions</p> </li> </ul> </li> <li> <p>State Transitions:</p> <ul> <li> <p>How states change after actions</p> </li> <li> <p>Impact of different moves</p> </li> </ul> </li> </ul> </li> <li> <p>Action History:</p> <ul> <li> <p>Player Decisions:</p> <ul> <li> <p>Chosen actions in each state</p> </li> <li> <p>Timing of action selections</p> </li> <li> <p>Action combinations used</p> </li> </ul> </li> <li> <p>Outcome Analysis:</p> <ul> <li> <p>Effectiveness of each action</p> </li> <li> <p>Damage or healing amounts</p> </li> <li> <p>Status effect applications</p> </li> </ul> </li> </ul> </li> <li> <p>Match Results:</p> <ul> <li> <p>Battle Statistics:</p> <ul> <li> <p>Win/loss records by strategy</p> </li> <li> <p>Average battle duration</p> </li> <li> <p>Resource management patterns</p> </li> </ul> </li> <li> <p>Strategic Analysis:</p> <ul> <li> <p>Key turning points in battles</p> </li> <li> <p>Successful tactical patterns</p> </li> <li> <p>Common victory conditions</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"technical/ai-system/training-pipeline/#2-model-training","title":"2. Model Training","text":"<p>Training process on the Mac Mini M1, leveraging its computational capabilities:</p> <ul> <li> <p>Data Preparation:</p> <ul> <li> <p>Preprocessing Steps:</p> <ul> <li> <p>Clean and normalize battle data</p> </li> <li> <p>Remove invalid or corrupt records</p> </li> <li> <p>Balance dataset across strategies</p> </li> </ul> </li> <li> <p>Data Organization:</p> <ul> <li> <p>Split into training/validation sets</p> </li> <li> <p>Create test scenarios</p> </li> <li> <p>Apply data augmentation techniques</p> </li> </ul> </li> </ul> </li> <li> <p>Learning Process:</p> <ul> <li> <p>Model Architecture:</p> <ul> <li> <p>Initialize neural network layers</p> </li> <li> <p>Configure learning parameters</p> </li> <li> <p>Set up optimization strategy</p> </li> </ul> </li> <li> <p>Training Execution:</p> <ul> <li> <p>Run training iterations</p> </li> <li> <p>Monitor convergence metrics</p> </li> <li> <p>Adjust hyperparameters</p> </li> </ul> </li> </ul> </li> <li> <p>Model Optimization:</p> <ul> <li> <p>Performance Tuning:</p> <ul> <li> <p>Optimize model architecture</p> </li> <li> <p>Reduce computational overhead</p> </li> <li> <p>Improve response time</p> </li> </ul> </li> <li> <p>Format Conversion:</p> <ul> <li> <p>Convert to TFLite format</p> </li> <li> <p>Verify behavior consistency</p> </li> <li> <p>Optimize memory usage</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"technical/ai-system/training-pipeline/#3-deployment","title":"3. Deployment","text":"<p>Carefully deploying the trained model to Raspberry Pi hardware:</p> <ul> <li> <p>Model Transfer:</p> <ul> <li> <p>Security Measures:</p> <ul> <li> <p>Encrypt model during transfer</p> </li> <li> <p>Verify file integrity</p> </li> <li> <p>Backup previous version</p> </li> </ul> </li> <li> <p>Version Control:</p> <ul> <li> <p>Track model versions</p> </li> <li> <p>Document changes</p> </li> <li> <p>Maintain rollback points</p> </li> </ul> </li> </ul> </li> <li> <p>System Integration:</p> <ul> <li> <p>Runtime Setup:</p> <ul> <li> <p>Configure TFLite interpreter</p> </li> <li> <p>Set memory allocations</p> </li> <li> <p>Initialize caching system</p> </li> </ul> </li> <li> <p>Performance Validation:</p> <ul> <li> <p>Measure inference speed</p> </li> <li> <p>Check memory usage</p> </li> <li> <p>Verify prediction quality</p> </li> </ul> </li> </ul> </li> <li> <p>Production Release:</p> <ul> <li> <p>Deployment Steps:</p> <ul> <li> <p>Schedule maintenance window</p> </li> <li> <p>Update active model</p> </li> <li> <p>Enable monitoring systems</p> </li> </ul> </li> <li> <p>Quality Assurance:</p> <ul> <li> <p>Run validation battles</p> </li> <li> <p>Monitor performance metrics</p> </li> <li> <p>Prepare rollback procedure</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"technical/ai-system/training-pipeline/#pipeline-components","title":"Pipeline Components","text":"<pre><code>graph TD\n    A[Data Collection] --&gt; B[Data Processing]\n\n    B --&gt; C[Model Training]\n\n    C --&gt; D[Model Export]\n\n    D --&gt; E[Deployment]\n\n    E --&gt; F[Monitoring]\n</code></pre>"},{"location":"technical/ai-system/training-pipeline/#data-processing-pipeline","title":"Data Processing Pipeline","text":"<pre><code>class DataPipeline:\n    \"\"\"Transforms raw battle data into a format our AI can learn from.\n\n    This pipeline handles three main tasks:\n    1. Converting game states into numbers (feature vectors)\n    2. Extracting the actions taken in each state\n    3. Creating additional training examples through augmentation\n    \"\"\"\n\n    def __init__(self, config: Dict[str, Any]):\n        self.config = config\n        self.preprocessor = Preprocessor()      # Converts raw data to features\n\n        self.augmenter = DataAugmenter()       # Creates additional examples\n\n    def process_battle_data(self, battle_records: List[BattleRecord]) -&gt; np.ndarray:\n\n        \"\"\"Transform battle recordings into training data\n\n        Args:\n            battle_records: List of recorded battles to learn from\n\n        Returns:\n            Processed data ready for model training\n        \"\"\"\n        processed = []\n\n        for record in battle_records:\n            # Step 1: Convert game states into numbers our model can understand\n\n            states = self.preprocessor.convert_states(record.states)\n\n            # Step 2: Extract what actions were taken in each state\n\n            actions = self.preprocessor.extract_actions(record.actions)\n\n            # Step 3: Create additional training examples if enabled\n\n            if self.config.get('use_augmentation'):\n                states, actions = self.augmenter.augment(states, actions)\n\n            processed.append((states, actions))\n\n        return np.array(processed)\n</code></pre>"},{"location":"technical/ai-system/training-pipeline/#model-training","title":"Model Training","text":"<pre><code>class ModelTrainer:\n    \"\"\"Teaches our AI model how to play the game using battle examples.\n\n    This trainer:\n    1. Sets up the neural network structure\n    2. Shows it many examples of good gameplay\n    3. Tests how well it's learning\n    4. Adjusts its learning process as needed\n    \"\"\"\n\n    def train_model(self, data: np.ndarray, params: Dict[str, Any]) -&gt; tf.keras.Model:\n\n        \"\"\"Train the AI model using processed battle data\n\n        Args:\n            data: Processed battle examples to learn from\n            params: Training settings (learning rate, etc.)\n\n        Returns:\n            Trained model ready for gameplay\n        \"\"\"\n        # Step 1: Set up the neural network structure\n\n        model = self._build_model(params)\n\n        # Step 2: Split data into training set and test set\n\n        train_data, val_data = self._split_data(data)\n\n        # Step 3: Train the model on our battle examples\n\n        history = model.fit(\n            train_data,\n            validation_data=val_data,\n            epochs=params['epochs'],           # Number of training rounds\n\n            callbacks=self._get_callbacks()    # Training monitors\n\n        )\n\n        return model\n\n    def export_to_tflite(self, model: tf.keras.Model) -&gt; bytes:\n\n        \"\"\"Export trained model to TFLite format\"\"\"\n        converter = tf.lite.TFLiteConverter.from_keras_model(model)\n        converter.optimizations = [tf.lite.Optimize.DEFAULT]\n        return converter.convert()\n</code></pre>"},{"location":"technical/ai-system/training-pipeline/#monitoring","title":"Monitoring","text":"<p>We track several key metrics to ensure the pipeline is working effectively:</p>"},{"location":"technical/ai-system/training-pipeline/#training-metrics","title":"Training Metrics","text":"<ul> <li> <p>Model Performance:</p> <ul> <li> <p>Accuracy and loss curves over time</p> </li> <li> <p>Validation metrics against test data</p> </li> <li> <p>Convergence rate analysis</p> </li> </ul> </li> <li> <p>Resource Usage:</p> <ul> <li> <p>Training speed per epoch</p> </li> <li> <p>Memory consumption patterns</p> </li> <li> <p>GPU utilization metrics</p> </li> </ul> </li> </ul>"},{"location":"technical/ai-system/training-pipeline/#deployment-health","title":"Deployment Health","text":"<ul> <li> <p>Runtime Performance:</p> <ul> <li> <p>Average inference speed on Pi</p> </li> <li> <p>Memory footprint during battles</p> </li> <li> <p>Temperature monitoring data</p> </li> </ul> </li> <li> <p>Model Quality:</p> <ul> <li> <p>Prediction accuracy in battles</p> </li> <li> <p>Response time consistency</p> </li> <li> <p>Error rate tracking</p> </li> </ul> </li> </ul>"},{"location":"technical/ai-system/training-pipeline/#error-tracking","title":"Error Tracking","text":"<ul> <li> <p>Pipeline Issues:</p> <ul> <li> <p>Data processing errors</p> </li> <li> <p>Training interruptions</p> </li> <li> <p>Failed model conversions</p> </li> </ul> </li> <li> <p>Runtime Issues:</p> <ul> <li> <p>Deployment failures</p> </li> <li> <p>Performance degradation</p> </li> <li> <p>Resource exhaustion</p> </li> </ul> </li> </ul> <p>Performance Tips</p> <ul> <li> <p>Resource Management:</p> <ul> <li> <p>Monitor CPU/GPU usage patterns</p> </li> <li> <p>Track memory usage over time</p> </li> <li> <p>Watch for thermal throttling</p> </li> </ul> </li> <li> <p>Quality Assurance:</p> <ul> <li> <p>Test with various batch sizes</p> </li> <li> <p>Validate against edge cases</p> </li> <li> <p>Keep recent model backups</p> </li> </ul> </li> </ul>"},{"location":"technical/ai-system/training-pipeline/#data-collection","title":"Data Collection","text":"<pre><code>@dataclass\nclass BattleExample:\n    \"\"\"Single battle training example\"\"\"\n    state: np.ndarray        # Game state features\n\n    action_taken: int        # Action index\n\n    reward: float           # Battle outcome (-1, 0, 1)\n\n    next_state: np.ndarray  # Resulting state\n\n    done: bool             # Battle ended\n\nclass DataCollector:\n    \"\"\"Collects battle data for training\"\"\"\n    def __init__(self, max_examples: int = 10000):\n        self.examples = []\n        self.max_examples = max_examples\n\n    def add_example(self, example: BattleExample):\n        \"\"\"Add battle example to dataset\"\"\"\n        self.examples.append(example)\n        if len(self.examples) &gt; self.max_examples:\n            self.examples.pop(0)\n\n    def get_training_data(self) -&gt; Tuple[np.ndarray, np.ndarray]:\n\n        \"\"\"Get training data in TF format\"\"\"\n        states = np.array([ex.state for ex in self.examples])\n        actions = np.array([ex.action_taken for ex in self.examples])\n        return states, actions\n</code></pre>"},{"location":"technical/ai-system/training-pipeline/#model-deployment","title":"Model Deployment","text":"<pre><code>class ModelDeployer:\n    \"\"\"Handles model deployment to Raspberry Pi\"\"\"\n    def __init__(self, model_path: str):\n        self.interpreter = tf.lite.Interpreter(model_path=model_path)\n        self.interpreter.allocate_tensors()\n\n        # Get input/output details\n\n        self.input_details = self.interpreter.get_input_details()\n        self.output_details = self.interpreter.get_output_details()\n\n    def run_inference(self, state: np.ndarray) -&gt; np.ndarray:\n\n        \"\"\"Run model inference\"\"\"\n        self.interpreter.set_tensor(\n            self.input_details[0]['index'],\n            state.reshape(1, -1)\n\n        )\n\n        self.interpreter.invoke()\n\n        return self.interpreter.get_tensor(\n            self.output_details[0]['index']\n        )[0]\n</code></pre>"},{"location":"technical/api/endpoints/","title":"API Endpoints","text":""},{"location":"technical/api/endpoints/#overview","title":"Overview","text":"<p>This document defines all API endpoints and WebSocket events used in the system. All endpoints use JSON for request/response bodies.</p>"},{"location":"technical/api/endpoints/#implementation","title":"Implementation","text":""},{"location":"technical/api/endpoints/#authentication","title":"Authentication","text":"<pre><code>from fastapi import Depends, HTTPException\nfrom fastapi.security import OAuth2PasswordBearer\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = await validate_token(token)\n    if not user:\n        raise HTTPException(status_code=401, detail=\"Invalid token\")\n    return user\n</code></pre>"},{"location":"technical/api/endpoints/#rest-endpoints","title":"REST Endpoints","text":""},{"location":"technical/api/endpoints/#authentication_1","title":"Authentication","text":"<ul> <li> <p><code>POST /auth/login</code>: User login</p> </li> <li> <p><code>POST /auth/register</code>: New user registration</p> </li> <li> <p><code>POST /auth/refresh</code>: Refresh access token</p> </li> <li> <p><code>POST /auth/logout</code>: User logout</p> </li> </ul>"},{"location":"technical/api/endpoints/#battle-management","title":"Battle Management","text":"<ul> <li> <p><code>POST /battles</code>: Create new battle</p> </li> <li> <p><code>GET /battles</code>: List available battles</p> </li> <li> <p><code>GET /battles/{id}</code>: Get battle details</p> </li> <li> <p><code>POST /battles/{id}/join</code>: Join existing battle</p> </li> <li> <p><code>POST /battles/{id}/forfeit</code>: Forfeit battle</p> </li> </ul>"},{"location":"technical/api/endpoints/#user-management","title":"User Management","text":"<ul> <li> <p><code>GET /users/me</code>: Get current user</p> </li> <li> <p><code>PATCH /users/me</code>: Update user profile</p> </li> <li> <p><code>GET /users/{id}</code>: Get user details</p> </li> <li> <p><code>GET /users/{id}/stats</code>: Get user stats</p> </li> </ul>"},{"location":"technical/api/endpoints/#game-state","title":"Game State","text":"<ul> <li> <p><code>GET /state</code>: Get current game state</p> </li> <li> <p><code>GET /state/history</code>: Get state history</p> </li> <li> <p><code>GET /state/replay/{id}</code>: Get battle replay</p> </li> </ul>"},{"location":"technical/api/endpoints/#websocket-events","title":"WebSocket Events","text":""},{"location":"technical/api/endpoints/#connection-events","title":"Connection Events","text":"<ul> <li> <p><code>connect</code>: Initial connection</p> </li> <li> <p><code>disconnect</code>: Client disconnect</p> </li> <li> <p><code>reconnect</code>: Client reconnection</p> </li> <li> <p><code>error</code>: Connection error</p> </li> </ul>"},{"location":"technical/api/endpoints/#game-events","title":"Game Events","text":"<ul> <li> <p><code>game:start</code>: Battle starts</p> </li> <li> <p><code>game:action</code>: Player action</p> </li> <li> <p><code>game:update</code>: State update</p> </li> <li> <p><code>game:end</code>: Battle ends</p> </li> </ul>"},{"location":"technical/api/endpoints/#ai-events","title":"AI Events","text":"<ul> <li> <p><code>ai:thinking</code>: AI processing</p> </li> <li> <p><code>ai:action</code>: AI action taken</p> </li> <li> <p><code>ai:error</code>: AI processing error</p> </li> <li> <p><code>ai:ready</code>: AI ready for next turn</p> </li> </ul>"},{"location":"technical/api/endpoints/#system-events","title":"System Events","text":"<ul> <li> <p><code>system:maintenance</code>: System maintenance</p> </li> <li> <p><code>system:error</code>: System error</p> </li> <li> <p><code>system:restart</code>: System restart</p> </li> <li> <p><code>system:update</code>: System update</p> </li> </ul>"},{"location":"technical/api/endpoints/#data-schemas","title":"Data Schemas","text":""},{"location":"technical/api/endpoints/#authentication_2","title":"Authentication","text":"<pre><code>interface AuthRequest {\n    username: string\n    password: string\n}\n\ninterface AuthResponse {\n    token: string\n    refreshToken: string\n    expiresIn: number\n}\n</code></pre>"},{"location":"technical/api/endpoints/#battle","title":"Battle","text":"<pre><code>interface Battle {\n    id: string\n    players: Player[]\n    state: GameState\n    status: BattleStatus\n    createdAt: number\n    updatedAt: number\n}\n\ntype BattleStatus = 'WAITING' | 'ACTIVE' | 'FINISHED'\n</code></pre>"},{"location":"technical/api/endpoints/#game-state_1","title":"Game State","text":"<pre><code>interface GameState {\n    battleId: string\n    round: number\n    currentTurn: string\n    players: {\n        [playerId: string]: PlayerState\n    }\n    status: GameStatus\n    lastAction?: GameAction\n}\n\ninterface PlayerState {\n    health: number\n    energy: number\n    status: StatusEffect[]\n    position: Position\n}\n</code></pre>"},{"location":"technical/api/endpoints/#error-handling","title":"Error Handling","text":""},{"location":"technical/api/endpoints/#http-status-codes","title":"HTTP Status Codes","text":"<ul> <li> <p>200: Success</p> </li> <li> <p>201: Created</p> </li> <li> <p>400: Bad Request</p> </li> <li> <p>401: Unauthorized</p> </li> <li> <p>403: Forbidden</p> </li> <li> <p>404: Not Found</p> </li> <li> <p>409: Conflict</p> </li> <li> <p>429: Too Many Requests</p> </li> <li> <p>500: Server Error</p> </li> </ul>"},{"location":"technical/api/endpoints/#error-response","title":"Error Response","text":"<pre><code>interface ErrorResponse {\n    code: string\n    message: string\n    details?: any\n}\n</code></pre>"},{"location":"technical/api/endpoints/#rate-limiting","title":"Rate Limiting","text":""},{"location":"technical/api/endpoints/#limits","title":"Limits","text":"<ul> <li> <p>Authentication: 5 requests/minute</p> </li> <li> <p>Battle Creation: 2 requests/minute</p> </li> <li> <p>Game Actions: 30 requests/minute</p> </li> <li> <p>State Queries: 60 requests/minute</p> </li> </ul>"},{"location":"technical/api/endpoints/#headers","title":"Headers","text":"<ul> <li> <p><code>X-RateLimit-Limit</code></p> </li> <li> <p><code>X-RateLimit-Remaining</code></p> </li> <li> <p><code>X-RateLimit-Reset</code></p> </li> </ul>"},{"location":"technical/api/endpoints/#websocket-protocol","title":"WebSocket Protocol","text":""},{"location":"technical/api/endpoints/#connection","title":"Connection","text":"<ul> <li> <p>Max reconnect attempts: 5</p> </li> <li> <p>Reconnect delay: 1000ms</p> </li> <li> <p>Ping interval: 30000ms</p> </li> <li> <p>Pong timeout: 5000ms</p> </li> </ul>"},{"location":"technical/api/endpoints/#message-format","title":"Message Format","text":"<ul> <li> <p>JSON encoding</p> </li> <li> <p>UTF-8 character set</p> </li> <li> <p>Binary messages not supported</p> </li> <li> <p>Max message size: 16KB</p> </li> </ul>"},{"location":"technical/api/endpoints/#security","title":"Security","text":""},{"location":"technical/api/endpoints/#authentication_3","title":"Authentication","text":"<ul> <li> <p>JWT tokens</p> </li> <li> <p>HTTPS required</p> </li> <li> <p>CORS enabled</p> </li> <li> <p>XSS protection</p> </li> </ul>"},{"location":"technical/api/endpoints/#rate-limiting_1","title":"Rate Limiting","text":"<ul> <li> <p>Per-user limits</p> </li> <li> <p>Per-IP limits</p> </li> <li> <p>Burst allowance</p> </li> <li> <p>Sliding window</p> </li> </ul>"},{"location":"technical/api/endpoints/#usage","title":"Usage","text":""},{"location":"technical/api/endpoints/#authentication_4","title":"Authentication","text":"<pre><code># Get authentication token\n\ncurl -X POST http://localhost:8000/token \\\n\n  -H \"Content-Type: application/x-www-form-urlencoded\" \\\n\n  -d \"username=user&amp;password=pass\"\n\n# Use token in subsequent requests\n\ncurl -X GET http://localhost:8000/api/v1/game/state \\\n\n  -H \"Authorization: Bearer {token}\"\n</code></pre>"},{"location":"technical/api/endpoints/#game-state-management","title":"Game State Management","text":"<pre><code>import requests\n\ndef update_game_state(token: str, state: dict):\n    response = requests.post(\n        \"http://localhost:8000/api/v1/game/state\",\n        headers={\"Authorization\": f\"Bearer {token}\"},\n        json=state\n    )\n    return response.json()\n</code></pre>"},{"location":"technical/api/endpoints/#ai-interactions","title":"AI Interactions","text":"<pre><code>def get_ai_action(token: str, context: dict):\n    response = requests.post(\n        \"http://localhost:8000/api/v1/ai/action\",\n        headers={\"Authorization\": f\"Bearer {token}\"},\n        json=context\n    )\n    return response.json()\n</code></pre>"},{"location":"technical/api/endpoints/#configuration","title":"Configuration","text":""},{"location":"technical/api/endpoints/#environment-variables","title":"Environment Variables","text":"<pre><code># API configuration\n\nAPI_HOST=localhost\nAPI_PORT=8000\nAPI_DEBUG=false\n\n# Authentication\n\nAUTH_SECRET_KEY=your-secret-key\n\nAUTH_ALGORITHM=HS256\nAUTH_TOKEN_EXPIRE_MINUTES=30\n\n# Rate Limiting\n\nRATE_LIMIT_REQUESTS=100\nRATE_LIMIT_PERIOD=60\n</code></pre>"},{"location":"technical/api/endpoints/#rate-limiting-configuration","title":"Rate Limiting Configuration","text":"<p>Rate limiting is implemented using SlowAPI to prevent abuse and ensure fair resource usage.</p>"},{"location":"technical/api/endpoints/#basic-setup","title":"Basic Setup","text":"<pre><code>from fastapi import FastAPI, Request\nfrom slowapi import Limiter, _rate_limit_exceeded_handler\nfrom slowapi.errors import RateLimitExceeded\nfrom slowapi.util import get_remote_address\n\n# Initialize limiter with IP-based rate limiting\n\nlimiter = Limiter(key_func=get_remote_address)\napp = FastAPI()\napp.state.limiter = limiter\napp.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)\n</code></pre>"},{"location":"technical/api/endpoints/#endpoint-specific-limits","title":"Endpoint-Specific Limits","text":"<pre><code># Standard endpoints\n\n@app.get(\"/api/v1/game/state\")\n@limiter.limit(\"100/minute\")\nasync def get_game_state(request: Request):\n    return {\"status\": \"success\"}\n\n# Authentication endpoints (more restrictive)\n\n@app.post(\"/api/v1/auth/login\")\n@limiter.limit(\"5/minute\")\nasync def login(request: Request):\n    return {\"status\": \"success\"}\n\n# Battle action endpoints\n\n@app.post(\"/api/v1/battles/{battle_id}/action\")\n@limiter.limit(\"30/minute\")\nasync def battle_action(battle_id: str, request: Request):\n    return {\"status\": \"success\"}\n\n# AI interaction endpoints\n\n@app.post(\"/api/v1/ai/action\")\n@limiter.limit(\"20/minute\")\nasync def ai_action(request: Request):\n    return {\"status\": \"success\"}\n</code></pre>"},{"location":"technical/api/endpoints/#custom-rate-limiting","title":"Custom Rate Limiting","text":"<pre><code># Dynamic rate limiting based on user tier\n\ndef get_user_limit(request: Request):\n    user = get_current_user(request)\n    limits = {\n        \"free\": \"60/minute\",\n        \"premium\": \"120/minute\",\n        \"unlimited\": \"1000/minute\"\n    }\n    return limits.get(user.tier, \"30/minute\")\n\n@app.get(\"/api/v1/premium/features\")\n@limiter.limit(get_user_limit)\nasync def premium_features(request: Request):\n    return {\"status\": \"success\"}\n\n# Burst handling for WebSocket connections\n\n@app.websocket(\"/ws/game\")\n@limiter.limit(\"1000/minute\", key_func=get_websocket_client_ip)\nasync def game_websocket(websocket: WebSocket):\n    await websocket.accept()\n</code></pre>"},{"location":"technical/api/endpoints/#global-configuration","title":"Global Configuration","text":"<pre><code># Default limits for different endpoint types\n\nDEFAULT_LIMITS = {\n    \"auth\": \"5/minute\",      # Authentication endpoints\n\n    \"read\": \"100/minute\",    # GET requests\n\n    \"write\": \"30/minute\",    # POST/PUT/DELETE requests\n\n    \"ai\": \"20/minute\",      # AI interaction endpoints\n\n    \"websocket\": \"1000/minute\" # WebSocket connections\n\n}\n</code></pre>"},{"location":"technical/api/endpoints/#rate-limit-storage-configuration","title":"Rate limit storage configuration","text":"<pre><code>limiter.storage = RedisStorage(redis_url)\n</code></pre>"},{"location":"technical/api/endpoints/#custom-error-handling","title":"Custom error handling","text":"<pre><code>@app.exception_handler(RateLimitExceeded)\nasync def custom_rate_limit_handler(request: Request, exc: RateLimitExceeded):\n    return JSONResponse(\n        status_code=429,\n        content={\n            \"error\": \"Rate limit exceeded\",\n            \"reset_at\": exc.reset_at.timestamp(),\n            \"retry_after\": exc.retry_after\n        }\n    )\n</code></pre>"},{"location":"technical/client/ui-specification/","title":"Client UI Specification","text":""},{"location":"technical/client/ui-specification/#overview","title":"Overview","text":"<p>The client interface is a simple, Material-UI based battle system focusing on turn-based combat mechanics.</p>"},{"location":"technical/client/ui-specification/#core-components","title":"Core Components","text":""},{"location":"technical/client/ui-specification/#1-authentication","title":"1. Authentication","text":"<ul> <li> <p>Login form</p> </li> <li> <p>Basic user profile display</p> </li> <li> <p>Session management</p> </li> </ul>"},{"location":"technical/client/ui-specification/#2-battle-management","title":"2. Battle Management","text":"<pre><code>interface BattleControls {\n    // Core battle actions\n    createBattle(): void\n    joinBattle(id: string): void\n    forfeitBattle(): void\n    exitBattle(): void\n}\n</code></pre>"},{"location":"technical/client/ui-specification/#3-battle-interface","title":"3. Battle Interface","text":"<ul> <li> <p>Health/Energy displays</p> </li> <li> <p>Action buttons (Attack, Defend, Special)</p> </li> <li> <p>Status effect indicators</p> </li> <li> <p>Turn indicator</p> </li> <li> <p>Opponent state display</p> </li> </ul>"},{"location":"technical/client/ui-specification/#4-state-indicators","title":"4. State Indicators","text":"<pre><code>interface UIStates {\n    isPlayerTurn: boolean      // Enable/disable controls\n    isWaiting: boolean         // Show loading state\n    battleStatus: 'active' | 'victory' | 'defeat'\n    availableActions: string[]\n}\n</code></pre>"},{"location":"technical/client/ui-specification/#component-structure","title":"Component Structure","text":""},{"location":"technical/client/ui-specification/#1-layout","title":"1. Layout","text":"<pre><code>interface BattleLayout {\n    header: {\n        playerInfo: PlayerDisplay\n        battleStatus: StatusBar\n    }\n    main: {\n        battlefield: BattleView\n        actionPanel: ActionButtons\n    }\n    footer: {\n        statusEffects: EffectList\n        exitButton: Button\n    }\n}\n</code></pre>"},{"location":"technical/client/ui-specification/#2-material-ui-components","title":"2. Material-UI Components","text":"<pre><code>// Core components used\nimport {\n    Button,\n    Card,\n    CircularProgress,\n    Dialog,\n    LinearProgress,\n    Typography\n} from '@mui/material'\n</code></pre>"},{"location":"technical/client/ui-specification/#state-management","title":"State Management","text":""},{"location":"technical/client/ui-specification/#1-redux-store","title":"1. Redux Store","text":"<pre><code>interface BattleState {\n    // Core state\n    battleId: string | null\n    playerState: PlayerState\n    opponentState: OpponentState\n    turnState: TurnState\n\n    // UI state\n    loading: boolean\n    error: string | null\n    activeAction: string | null\n}\n</code></pre>"},{"location":"technical/client/ui-specification/#2-actions","title":"2. Actions","text":"<pre><code>type BattleAction =\n    | { type: 'CREATE_BATTLE' }\n    | { type: 'JOIN_BATTLE', payload: string }\n    | { type: 'SUBMIT_ACTION', payload: GameAction }\n    | { type: 'FORFEIT_BATTLE' }\n    | { type: 'UPDATE_STATE', payload: GameState }\n</code></pre>"},{"location":"technical/client/ui-specification/#user-interactions","title":"User Interactions","text":""},{"location":"technical/client/ui-specification/#1-battle-flow","title":"1. Battle Flow","text":"<ol> <li>User logs in</li> <li>Creates or joins battle</li> <li>Waits for turn</li> <li>Selects action when available</li> <li>Waits for opponent</li> <li>Repeats until battle ends</li> </ol>"},{"location":"technical/client/ui-specification/#2-action-states","title":"2. Action States","text":"<ul> <li> <p>Buttons disabled during opponent's turn</p> </li> <li> <p>Loading indicator during AI processing</p> </li> <li> <p>Clear victory/defeat states</p> </li> <li> <p>Forfeit available during player's turn</p> </li> </ul>"},{"location":"technical/client/ui-specification/#error-handling","title":"Error Handling","text":""},{"location":"technical/client/ui-specification/#1-basic-error-states","title":"1. Basic Error States","text":"<ul> <li> <p>Connection lost</p> </li> <li> <p>Invalid action</p> </li> <li> <p>Battle ended</p> </li> <li> <p>Server error</p> </li> </ul>"},{"location":"technical/client/ui-specification/#2-user-feedback","title":"2. User Feedback","text":"<ul> <li> <p>Error messages</p> </li> <li> <p>Action confirmations</p> </li> <li> <p>Status updates</p> </li> <li> <p>Battle results</p> </li> </ul>"},{"location":"technical/client/ui-specification/#styling","title":"Styling","text":""},{"location":"technical/client/ui-specification/#1-material-ui-theme","title":"1. Material-UI Theme","text":"<pre><code>const theme = createTheme({\n    palette: {\n        primary: {\n            main: '#1976d2'\n\n        },\n        secondary: {\n            main: '#dc004e'\n\n        }\n    },\n    components: {\n        MuiButton: {\n            styleOverrides: {\n                root: {\n                    margin: '8px'\n                }\n            }\n        }\n    }\n})\n</code></pre>"},{"location":"technical/client/ui-specification/#2-layout-structure","title":"2. Layout Structure","text":"<pre><code>.battle-container {\n\n    display: grid;\n    grid-template-rows: auto 1fr auto;\n\n    height: 100vh;\n    padding: 16px;\n}\n\n.action-panel {\n\n    display: flex;\n    justify-content: center;\n\n    gap: 16px;\n    padding: 16px;\n}\n</code></pre>"},{"location":"technical/data-schemas/ai-models/","title":"AI Model Schemas","text":""},{"location":"technical/data-schemas/ai-models/#overview","title":"Overview","text":"<p>This document defines the data structures used for AI model training and inference. The system uses TensorFlow Lite for deployment on Raspberry Pi, with training done on Mac Mini M1.</p>"},{"location":"technical/data-schemas/ai-models/#model-input","title":"Model Input","text":"<pre><code>@dataclass\nclass BattleFeatures:\n    \"\"\"Features extracted from battle state\"\"\"\n    # Player features\n\n    player_health: float      # Normalized (0-1)\n\n    player_energy: float      # Normalized (0-1)\n\n    player_statuses: List[int] # One-hot encoded\n\n    # AI features\n\n    ai_health: float         # Normalized (0-1)\n\n    ai_energy: float        # Normalized (0-1)\n\n    ai_statuses: List[int]  # One-hot encoded\n\n    # Battle context\n\n    round: int             # Current round\n\n    turns_taken: int       # Turns in current round\n\n    def to_array(self) -&gt; np.ndarray:\n\n        \"\"\"Convert to model input array\"\"\"\n        return np.array([\n            self.player_health,\n            self.player_energy,\n            *self.player_statuses,\n\n            self.ai_health,\n            self.ai_energy,\n            *self.ai_statuses,\n\n            self.round / 20.0,  # Normalize round\n\n            self.turns_taken / 2.0  # Normalize turns\n\n        ])\n</code></pre>"},{"location":"technical/data-schemas/ai-models/#model-output","title":"Model Output","text":"<pre><code>@dataclass\nclass ActionPrediction:\n    \"\"\"Model prediction for next action\"\"\"\n    action_probs: np.ndarray  # Probability per action\n\n    def get_action(self, difficulty: float) -&gt; int:\n\n        \"\"\"Get action index using difficulty scaling\"\"\"\n        # Apply temperature scaling\n\n        temperature = 1.0 / max(0.2, min(0.95, difficulty))\n        scaled = self.action_probs ** temperature\n\n        scaled /= scaled.sum()\n\n        # Sample action\n\n        return np.random.choice(len(scaled), p=scaled)\n\n    def get_top_k(self, k: int = 3) -&gt; List[Tuple[int, float]]:\n\n        \"\"\"Get top k actions and probabilities\"\"\"\n        indices = np.argsort(self.action_probs)[-k:][::-1]\n\n        return [(i, self.action_probs[i]) for i in indices]\n</code></pre>"},{"location":"technical/data-schemas/ai-models/#training-data","title":"Training Data","text":"<pre><code>@dataclass\nclass TrainingExample:\n    \"\"\"Single training example\"\"\"\n    features: np.ndarray     # Input features\n\n    action: int             # Chosen action\n\n    reward: float          # Battle outcome\n\n    def to_tf_data(self) -&gt; Tuple[np.ndarray, np.ndarray]:\n\n        \"\"\"Convert to TensorFlow training data\"\"\"\n        return self.features, np.array([self.action])\n\nclass TrainingDataset:\n    \"\"\"Collection of training examples\"\"\"\n    def __init__(self, max_size: int = 10000):\n        self.examples: List[TrainingExample] = []\n        self.max_size = max_size\n\n    def add(self, example: TrainingExample):\n        \"\"\"Add example to dataset\"\"\"\n        self.examples.append(example)\n        if len(self.examples) &gt; self.max_size:\n            self.examples.pop(0)\n\n    def to_tf_dataset(self) -&gt; tf.data.Dataset:\n\n        \"\"\"Convert to TensorFlow dataset\"\"\"\n        features = np.array([ex.features for ex in self.examples])\n        actions = np.array([ex.action for ex in self.examples])\n        return tf.data.Dataset.from_tensor_slices((features, actions))\n</code></pre>"},{"location":"technical/data-schemas/ai-models/#model-configuration","title":"Model Configuration","text":"<pre><code>@dataclass\nclass ModelConfig:\n    \"\"\"TensorFlow Lite model configuration\"\"\"\n    input_size: int = 16     # Feature vector size\n\n    hidden_size: int = 64    # Hidden layer size\n\n    output_size: int = 3     # Number of actions\n\n    def create_model(self) -&gt; tf.keras.Model:\n\n        \"\"\"Create TensorFlow model\"\"\"\n        return tf.keras.Sequential([\n            tf.keras.layers.Dense(self.hidden_size, activation='relu'),\n            tf.keras.layers.Dense(self.output_size, activation='softmax')\n        ])\n\n@dataclass\nclass TrainingConfig:\n    \"\"\"Training configuration\"\"\"\n    batch_size: int = 32\n    epochs: int = 10\n    learning_rate: float = 0.001\n    validation_split: float = 0.2\n\n    def get_optimizer(self) -&gt; tf.keras.optimizers.Optimizer:\n\n        \"\"\"Get TensorFlow optimizer\"\"\"\n        return tf.keras.optimizers.Adam(learning_rate=self.learning_rate)\n</code></pre>"},{"location":"technical/data-schemas/ai-models/#model-export","title":"Model Export","text":"<pre><code>def export_for_pi(model: tf.keras.Model, path: str):\n    \"\"\"Export model for Raspberry Pi\"\"\"\n    converter = tf.lite.TFLiteConverter.from_keras_model(model)\n    converter.optimizations = [tf.lite.Optimize.DEFAULT]\n    converter.target_spec.supported_types = [tf.float32]\n\n    tflite_model = converter.convert()\n    with open(path, 'wb') as f:\n        f.write(tflite_model)\n\nclass ModelDeployer:\n    \"\"\"Deploy and run model on Raspberry Pi\"\"\"\n    def __init__(self, model_path: str):\n        self.interpreter = tf.lite.Interpreter(model_path=model_path)\n        self.interpreter.allocate_tensors()\n\n        self.input_details = self.interpreter.get_input_details()\n        self.output_details = self.interpreter.get_output_details()\n\n    def predict(self, features: np.ndarray) -&gt; ActionPrediction:\n\n        \"\"\"Run inference on Pi\"\"\"\n        self.interpreter.set_tensor(\n            self.input_details[0]['index'],\n            features.reshape(1, -1)\n\n        )\n\n        self.interpreter.invoke()\n\n        probs = self.interpreter.get_tensor(\n            self.output_details[0]['index']\n        )[0]\n\n        return ActionPrediction(probs)\n</code></pre>"},{"location":"technical/data-schemas/game-state/","title":"Game State Schemas","text":""},{"location":"technical/data-schemas/game-state/#overview","title":"Overview","text":"<p>This document defines the core data structures used in the battle system. These schemas are designed to be:</p> <ul> <li> <p>Simple and focused on battles</p> </li> <li> <p>Language-agnostic (Go/Python)</p> </li> <li> <p>JSON-serializable</p> </li> <li> <p>WebSocket-friendly</p> </li> </ul> <p>Related Documentation</p> <p>For detailed information about game mechanics, refer to:</p> <ul> <li> <p>Status Effects</p> </li> <li> <p>Attack Types</p> </li> <li> <p>Battle Conditions</p> </li> <li> <p>Targeting System</p> </li> </ul>"},{"location":"technical/data-schemas/game-state/#core-types","title":"Core Types","text":"<pre><code>// Base types\ntype ID string          // Unique identifier\ntype Timestamp int64    // Unix milliseconds\n\n// Common interfaces\ntype Serializable interface {\n    Marshal() ([]byte, error)\n    Unmarshal([]byte) error\n}\n\n// Attack type enums (see attack-types.md for details)\n\ntype AttackType string\n\nconst (\n    // Physical\n    AttackTypeSlash     AttackType = \"SLASH\"\n    AttackTypePierce    AttackType = \"PIERCE\"\n    AttackTypeBlunt     AttackType = \"BLUNT\"\n    AttackTypeRend      AttackType = \"REND\"\n    AttackTypeConstrict AttackType = \"CONSTRICT\"\n    AttackTypeImpact    AttackType = \"IMPACT\"\n    AttackTypeCrush     AttackType = \"CRUSH\"\n\n    // Spiritual\n    AttackTypeRoot      AttackType = \"ROOT\"\n    AttackTypeSpirit    AttackType = \"SPIRIT\"\n    AttackTypePsychic   AttackType = \"PSYCHIC\"\n    AttackTypeCrystal   AttackType = \"CRYSTAL\"\n    AttackTypeBlood     AttackType = \"BLOOD\"\n    AttackTypeBone      AttackType = \"BONE\"\n    AttackTypeBody      AttackType = \"BODY\"\n\n    // Elemental\n    AttackTypeFire      AttackType = \"FIRE\"\n    AttackTypeWater     AttackType = \"WATER\"\n    AttackTypeAir       AttackType = \"AIR\"\n    AttackTypeEarth     AttackType = \"EARTH\"\n    AttackTypeLightning AttackType = \"LIGHTNING\"\n    AttackTypePoison    AttackType = \"POISON\"\n    AttackTypeFrost     AttackType = \"FROST\"\n)\n\n// Status effect types (see status-effects.md for details)\n\ntype StatusEffectType string\n\nconst (\n    // Damage Effects\n    StatusEffectDamage      StatusEffectType = \"DAMAGE\"\n    StatusEffectDrain       StatusEffectType = \"DRAIN\"\n    StatusEffectBurn        StatusEffectType = \"BURN\"\n    StatusEffectBleed       StatusEffectType = \"BLEED\"\n    StatusEffectTrueDamage  StatusEffectType = \"TRUE_DAMAGE\"\n    StatusEffectCounter     StatusEffectType = \"COUNTER\"\n    StatusEffectShatter     StatusEffectType = \"SHATTER\"\n\n    // Defensive Effects\n    StatusEffectShield      StatusEffectType = \"SHIELD\"\n    StatusEffectBarrier     StatusEffectType = \"BARRIER\"\n    StatusEffectReflect     StatusEffectType = \"REFLECT\"\n    StatusEffectImmune      StatusEffectType = \"IMMUNE\"\n    StatusEffectGuard       StatusEffectType = \"GUARD\"\n    StatusEffectAbsorb      StatusEffectType = \"ABSORB\"\n    StatusEffectEvasion     StatusEffectType = \"EVASION\"\n\n    // Recovery Effects\n    StatusEffectHeal        StatusEffectType = \"HEAL\"\n    StatusEffectRegenerate  StatusEffectType = \"REGENERATE\"\n    StatusEffectCleanse     StatusEffectType = \"CLEANSE\"\n    StatusEffectRevive      StatusEffectType = \"REVIVE\"\n    StatusEffectLifesteal   StatusEffectType = \"LIFESTEAL\"\n    StatusEffectRestore     StatusEffectType = \"RESTORE\"\n    StatusEffectPurify      StatusEffectType = \"PURIFY\"\n\n    // Debuffs\n    StatusEffectWeaken      StatusEffectType = \"WEAKEN\"\n    StatusEffectVulnerable  StatusEffectType = \"VULNERABLE\"\n    StatusEffectSilence     StatusEffectType = \"SILENCE\"\n    StatusEffectStun        StatusEffectType = \"STUN\"\n    StatusEffectRoot        StatusEffectType = \"ROOT\"\n    StatusEffectSlow        StatusEffectType = \"SLOW\"\n    StatusEffectBlind       StatusEffectType = \"BLIND\"\n\n    // Buffs\n    StatusEffectStrengthen  StatusEffectType = \"STRENGTHEN\"\n    StatusEffectHaste       StatusEffectType = \"HASTE\"\n    StatusEffectEmpower     StatusEffectType = \"EMPOWER\"\n    StatusEffectFortify     StatusEffectType = \"FORTIFY\"\n    StatusEffectPrecision   StatusEffectType = \"PRECISION\"\n    StatusEffectEnergize    StatusEffectType = \"ENERGIZE\"\n    StatusEffectInspire     StatusEffectType = \"INSPIRE\"\n\n    // Control Effects\n    StatusEffectCharm       StatusEffectType = \"CHARM\"\n    StatusEffectFear        StatusEffectType = \"FEAR\"\n    StatusEffectTaunt       StatusEffectType = \"TAUNT\"\n    StatusEffectConfuse     StatusEffectType = \"CONFUSE\"\n    StatusEffectSleep       StatusEffectType = \"SLEEP\"\n    StatusEffectParalyze    StatusEffectType = \"PARALYZE\"\n    StatusEffectBanish      StatusEffectType = \"BANISH\"\n\n    // Utility Effects\n    StatusEffectMark        StatusEffectType = \"MARK\"\n    StatusEffectLink        StatusEffectType = \"LINK\"\n    StatusEffectCopy        StatusEffectType = \"COPY\"\n    StatusEffectTransform   StatusEffectType = \"TRANSFORM\"\n    StatusEffectStance      StatusEffectType = \"STANCE\"\n    StatusEffectChannel     StatusEffectType = \"CHANNEL\"\n    StatusEffectLock        StatusEffectType = \"LOCK\"\n)\n</code></pre>"},{"location":"technical/data-schemas/game-state/#battle-state","title":"Battle State","text":"<pre><code>// Main battle state\ntype BattleState struct {\n    ID          ID                      `json:\"id\"`\n    Timestamp   Timestamp               `json:\"timestamp\"`\n    Players     map[ID]*PlayerState     `json:\"players\"`\n\n    Field       *FieldState             `json:\"field\"`      // Current field conditions\n\n    TurnOrder   []ID                    `json:\"turnOrder\"`\n    CurrentTurn ID                      `json:\"currentTurn\"`\n    Round       int                     `json:\"round\"`\n    Status      BattleStatus            `json:\"status\"`\n}\n\ntype BattleStatus string\n\nconst (\n    BattleStatusActive   BattleStatus = \"ACTIVE\"\n    BattleStatusFinished BattleStatus = \"FINISHED\"\n)\n\n// Player state in battle\ntype PlayerState struct {\n    ID            ID                           `json:\"id\"`\n    Name          string                       `json:\"name\"`\n    Health        int                          `json:\"health\"`\n    Energy        int                          `json:\"energy\"`\n    StatusEffects map[StatusEffectType]*Effect `json:\"statusEffects\"`\n\n    Class         string                       `json:\"class\"`\n    IsAI         bool                         `json:\"isAI\"`\n}\n\n// Status effect instance\ntype Effect struct {\n    Type      StatusEffectType `json:\"type\"`\n    Value     float64          `json:\"value\"`    // Magnitude of the effect\n    Duration  int             `json:\"duration\"`  // Rounds remaining\n    Source    ID              `json:\"source\"`    // Who applied the effect\n}\n\n// Field conditions state\ntype FieldState struct {\n    Conditions []FieldCondition `json:\"conditions\"`\n    Duration   map[string]int  `json:\"duration\"`    // Rounds remaining per condition\n}\n\ntype FieldCondition struct {\n    Name        string    `json:\"name\"`\n    Source      string    `json:\"source\"`   // Class or attack type that created it\n    Modifiers   []Modifier `json:\"modifiers\"`\n}\n\ntype Modifier struct {\n    Type      string  `json:\"type\"`    // What is being modified\n    Value     float64 `json:\"value\"`   // Modification amount\n    Condition string  `json:\"condition\"` // When this applies\n} ActionData `json:\"data\"`\n}\n\ntype ActionData struct {\n    Power        int              `json:\"power\"`        // Base power\n    Effects      []StatusEffect   `json:\"effects\"`      // Status effects to apply\n    Requirements Requirements     `json:\"requirements\"` // Costs and conditions\n}\n\ntype StatusEffect struct {\n    Type     StatusEffectType `json:\"type\"`\n    Value    float64         `json:\"value\"`    // Magnitude\n    Duration int            `json:\"duration\"`  // How many rounds\n}\n\ntype Requirements struct {\n    EnergyCost    int      `json:\"energyCost\"`\n    HealthCost    int      `json:\"healthCost\"`\n    Conditions    []string `json:\"conditions\"` // Required field conditions\n    StatusEffects []string `json:\"status\"`     // Required status effects\n}\n</code></pre>"},{"location":"technical/data-schemas/game-state/#battle-events","title":"Battle Events","text":"<pre><code>// Event sent over WebSocket\ntype BattleEvent struct {\n    Type      string          `json:\"type\"`\n    BattleID  ID             `json:\"battleId\"`\n    Timestamp Timestamp       `json:\"timestamp\"`\n    Data      any            `json:\"data\"`\n}\n\n// Event types\nconst (\n    // Turn Management\n    EventTurnStart    = \"TURN_START\"\n    EventTurnEnd      = \"TURN_END\"\n    EventRoundStart   = \"ROUND_START\"\n    EventRoundEnd     = \"ROUND_END\"\n\n    // Actions and Effects\n    EventActionTaken  = \"ACTION_TAKEN\"\n    EventEffectApplied = \"EFFECT_APPLIED\"\n    EventEffectExpired = \"EFFECT_EXPIRED\"\n\n    // Field Conditions\n    EventFieldChanged = \"FIELD_CHANGED\"\n    EventFieldExpired = \"FIELD_EXPIRED\"\n\n    // Battle Flow\n    EventStatusUpdate = \"STATUS_UPDATE\"\n    EventBattleEnd    = \"BATTLE_END\"\n)\n\n// Action result with detailed effect information\ntype ActionResult struct {\n    Success     bool                  `json:\"success\"`\n    Message     string                `json:\"message,omitempty\"`\n    Damage      DamageResult         `json:\"damage,omitempty\"`\n    Effects     []EffectResult       `json:\"effects,omitempty\"`\n    FieldEffects []FieldCondition    `json:\"fieldEffects,omitempty\"`\n}\n\ntype DamageResult struct {\n    Amount    int        `json:\"amount\"`\n    Type      AttackType `json:\"type\"`\n    Modifiers []Modifier `json:\"modifiers\"` // What modified the damage\n}\n\ntype EffectResult struct {\n    Type      StatusEffectType `json:\"type\"`\n    Success   bool            `json:\"success\"`\n    Duration  int            `json:\"duration\"`\n    Value     float64        `json:\"value\"`\n    Resisted  bool           `json:\"resisted\"` // If target was immune/resistant\n}\n</code></pre>"},{"location":"technical/data-schemas/game-state/#battle-configuration","title":"Battle Configuration","text":"<pre><code>// Initial battle setup\ntype BattleConfig struct {\n    PlayerID     ID      `json:\"playerId\"`\n    PlayerClass  string  `json:\"playerClass\"`  // Character class\n    Difficulty   float64 `json:\"difficulty\"`   // 0.2-0.95\n\n    AIPersona    string  `json:\"aiPersona,omitempty\"`\n    InitialField []FieldCondition `json:\"initialField,omitempty\"`\n}\n\n// Battle result with detailed statistics\ntype BattleResult struct {\n    BattleID    ID      `json:\"battleId\"`\n    Winner      ID      `json:\"winner\"`\n    Duration    int     `json:\"duration\"`    // Rounds\n    PlayerStats Stats   `json:\"playerStats\"`\n    AIStats     Stats   `json:\"aiStats\"`\n    FieldStats  FieldStats `json:\"fieldStats\"`\n}\n\ntype Stats struct {\n    // Damage Stats\n    DamageDealt     map[AttackType]int `json:\"damageDealt\"`    // By attack type\n    DamageTaken     map[AttackType]int `json:\"damageTaken\"`    // By attack type\n    EffectsApplied  map[StatusEffectType]int `json:\"effectsApplied\"`\n    EffectsReceived map[StatusEffectType]int `json:\"effectsReceived\"`\n\n    // Resource Stats\n    EnergyUsed    int `json:\"energyUsed\"`\n    HealthLost    int `json:\"healthLost\"`\n    EnergyGained  int `json:\"energyGained\"`\n    HealthGained  int `json:\"healthGained\"`\n\n    // Battle Stats\n    ActionsUsed   int `json:\"actionsUsed\"`\n    RoundsPlayed  int `json:\"roundsPlayed\"`\n}\n\ntype FieldStats struct {\n    ConditionsTriggered map[string]int `json:\"conditionsTriggered\"`\n    TotalDuration       int           `json:\"totalDuration\"`\n    MaxConditions       int           `json:\"maxConditions\"`\n}\n</code></pre>"},{"location":"technical/data-schemas/game-state/#example-usage","title":"Example Usage","text":"<p>```go // Initialize battle with field conditions battle := &amp;BattleState{     ID:        NewID(),     Timestamp: Now(),     Players:   make(map[ID]*PlayerState),</p> <pre><code>Field:     &amp;FieldState{\n    Conditions: []FieldCondition{},\n    Duration:   make(map[string]int),\n},\nStatus:    BattleStatusActive,\n</code></pre> <p>}</p> <p>// Add player with status effects tracking battle.Players[playerID] = &amp;PlayerState{     ID:            playerID,     Name:          \"Player\",     Health:        100,     Energy:        100,     Class:         \"Crystal Vanguard\",     StatusEffects: make(map[StatusEffectType]*Effect),</p> <p>}</p> <p>// Add AI opponent battle.Players[aiID] = &amp;PlayerState{     ID:            aiID,     Name:          \"AI Opponent\",     Health:        100,     Energy:        100,     Class:         \"Wraithwood Seer\",     StatusEffects: make(map[StatusEffectType]*Effect),</p> <pre><code>IsAI:          true,\n</code></pre> <p>}</p> <p>// Set turn order and initial field condition battle.TurnOrder = []ID{playerID, aiID} battle.CurrentTurn = playerID</p> <p>// Apply class-based field effect</p> <p>battle.Field.Conditions = append(battle.Field.Conditions, FieldCondition{     Name:   \"Crystal Field\",     Source: \"Crystal Vanguard\",     Modifiers: []Modifier{         {Type: \"CRYSTAL_DAMAGE\", Value: 1.2},         {Type: \"PHYSICAL_DAMAGE\", Value: 0.8},     }, }) battle.Field.Duration[\"Crystal Field\"] = 3 // Lasts 3 rounds</p>"},{"location":"technical/data-schemas/replay-system/","title":"Battle Replay System","text":""},{"location":"technical/data-schemas/replay-system/#overview","title":"Overview","text":"<p>A simple system for recording battle events for training data collection and basic replay functionality.</p>"},{"location":"technical/data-schemas/replay-system/#core-types","title":"Core Types","text":"<pre><code>// Base types\ntype ID string          // Unique identifier\ntype Timestamp int64    // Unix milliseconds\ntype ActionType string  // Type of action\n\n// Common interfaces\ntype Serializable interface {\n    Marshal() ([]byte, error)\n    Unmarshal([]byte) error\n}\n</code></pre>"},{"location":"technical/data-schemas/replay-system/#battle-recording","title":"Battle Recording","text":"<pre><code>// Main replay record\ntype BattleRecord struct {\n    ID          ID              `json:\"id\"`\n    StartTime   Timestamp       `json:\"startTime\"`\n    EndTime     Timestamp       `json:\"endTime\"`\n    Events      []BattleEvent   `json:\"events\"`\n    Config      BattleConfig    `json:\"config\"`\n    Result      BattleResult    `json:\"result\"`\n}\n\n// Single battle event\ntype BattleEvent struct {\n    Type      string    `json:\"type\"`\n    Timestamp Timestamp `json:\"timestamp\"`\n    Data      any       `json:\"data\"`\n}\n\n// Event types\nconst (\n    EventBattleStart   = \"BATTLE_START\"\n    EventTurnStart     = \"TURN_START\"\n    EventActionTaken   = \"ACTION_TAKEN\"\n    EventStateUpdate   = \"STATE_UPDATE\"\n    EventBattleEnd     = \"BATTLE_END\"\n)\n\n// Event data structures\ntype ActionEvent struct {\n    ActorID    ID         `json:\"actorId\"`\n    Action     Action     `json:\"action\"`\n    Result     ActionResult `json:\"result\"`\n}\n\ntype StateEvent struct {\n    State      BattleState `json:\"state\"`\n    Delta      StateDelta  `json:\"delta,omitempty\"`\n}\n\ntype StateDelta struct {\n    HealthChanges map[ID]int    `json:\"healthChanges,omitempty\"`\n    StatusChanges map[ID][]string `json:\"statusChanges,omitempty\"`\n}\n</code></pre>"},{"location":"technical/data-schemas/replay-system/#recording-system","title":"Recording System","text":"<pre><code>// Battle recorder\ntype BattleRecorder struct {\n    currentBattle *BattleRecord\n\n    events        []BattleEvent\n}\n\nfunc NewBattleRecorder(config BattleConfig) *BattleRecorder {\n\n    return &amp;BattleRecorder{\n        currentBattle: &amp;BattleRecord{\n            ID:        NewID(),\n            StartTime: Now(),\n            Config:    config,\n            Events:    make([]BattleEvent, 0),\n        },\n    }\n}\n\nfunc (r *BattleRecorder) RecordEvent(eventType string, data any) {\n\n    event := BattleEvent{\n        Type:      eventType,\n        Timestamp: Now(),\n        Data:      data,\n    }\n    r.events = append(r.events, event)\n}\n\nfunc (r *BattleRecorder) FinishRecording(result BattleResult) *BattleRecord {\n\n    r.currentBattle.EndTime = Now()\n    r.currentBattle.Events = r.events\n    r.currentBattle.Result = result\n    return r.currentBattle\n}\n</code></pre>"},{"location":"technical/data-schemas/replay-system/#replay-system","title":"Replay System","text":"<pre><code>// Battle replay player\ntype BattlePlayer struct {\n    record    *BattleRecord\n\n    position  int\n    state     *BattleState\n\n}\n\nfunc NewBattlePlayer(record *BattleRecord) *BattlePlayer {\n\n    return &amp;BattlePlayer{\n        record:   record,\n        position: 0,\n        state:    nil,\n    }\n}\n\nfunc (p *BattlePlayer) NextEvent() *BattleEvent {\n\n    if p.position &gt;= len(p.record.Events) {\n        return nil\n    }\n    event := p.record.Events[p.position]\n    p.position++\n    return &amp;event\n}\n\nfunc (p *BattlePlayer) PrevEvent() *BattleEvent {\n\n    if p.position &lt;= 0 {\n        return nil\n    }\n    p.position--\n\n    return &amp;p.record.Events[p.position]\n}\n\nfunc (p *BattlePlayer) JumpToTime(timestamp Timestamp) {\n\n    // Find closest event\n    for i, event := range p.record.Events {\n        if event.Timestamp &gt;= timestamp {\n            p.position = i\n            break\n        }\n    }\n}\n</code></pre>"},{"location":"technical/data-schemas/replay-system/#storage","title":"Storage","text":"<pre><code>// Simple file-based storage\n\ntype ReplayStorage struct {\n    basePath string\n}\n\nfunc (s *ReplayStorage) SaveReplay(record *BattleRecord) error {\n\n    data, err := json.Marshal(record)\n    if err != nil {\n        return err\n    }\n\n    filename := fmt.Sprintf(\"%s/%s.json\", s.basePath, record.ID)\n    return os.WriteFile(filename, data, 0644)\n}\n\nfunc (s *ReplayStorage) LoadReplay(id ID) (*BattleRecord, error) {\n\n    filename := fmt.Sprintf(\"%s/%s.json\", s.basePath, id)\n    data, err := os.ReadFile(filename)\n    if err != nil {\n        return nil, err\n    }\n\n    var record BattleRecord\n    if err := json.Unmarshal(data, &amp;record); err != nil {\n        return nil, err\n    }\n    return &amp;record, nil\n}\n</code></pre>"},{"location":"technical/game-mechanics/attack-types/","title":"Attack Types Reference","text":"<p>Overview</p> <p>This document details the various attack types in the combat system, including their characteristics and typical applications.</p>"},{"location":"technical/game-mechanics/attack-types/#physical-attack-types","title":"Physical Attack Types","text":"Attack Type Description <p>| Slash | Blade weapons, ritual knives | | Pierce | Precise strikes, needle-like attacks |</p> <p>| Blunt | Crushing blows, staff strikes | | Rend | Tearing attacks, claw-based damage |</p> <p>| Constrict | Binding/squeezing damage | | Impact | Focused force, concentrated strikes | | Crush | Heavy, devastating blows |</p>"},{"location":"technical/game-mechanics/attack-types/#spiritual-attack-types","title":"Spiritual Attack Types","text":"Attack Type Description <p>| Root | Plant and earth-based damage |</p> <p>| Spirit | Pure spiritual force | | Psychic | Mental/consciousness damage | | Crystal | Mineral-based attacks |</p> <p>| Blood | Life force manipulation | | Bone | Ancestral power damage | | Body | Physical form manipulation |</p>"},{"location":"technical/game-mechanics/attack-types/#elemental-attack-types","title":"Elemental Attack Types","text":"Attack Type Description <p>| Fire | Purifying flame | | Water | Flowing/cleansing damage | | Air | Wind/breath attacks | | Earth | Solid/grounding damage | | Lightning | Sudden/shocking force | | Poison | Toxic/corrupting damage | | Frost | Freezing/slowing damage |</p>"},{"location":"technical/game-mechanics/battle-conditions/","title":"Battle Conditions Reference","text":"<p>Overview</p> <p>This document outlines the various conditions that can affect combat, including turn order priority, environmental effects, and class-specific modifiers.</p>"},{"location":"technical/game-mechanics/battle-conditions/#speed-priority","title":"Speed Priority","text":"Priority Description <p>| Quick | Moves that always act first in the turn | | Normal | Standard priority moves | | Slow | Moves that always act last in the turn | | Counter | Only activates in response to opponent's move | | Delayed | Takes effect at end of next turn |</p>"},{"location":"technical/game-mechanics/battle-conditions/#field-conditions","title":"Field Conditions","text":""},{"location":"technical/game-mechanics/battle-conditions/#class-based-effects","title":"Class-Based Effects","text":"Condition Description Source <p>| Sacred Ground | Spiritual moves gain <code>x%</code> power boost, Physical moves deal <code>x%</code> less damage | The Blessed | | Holy Sanctuary | Negative status effects expire after 1 turn, healing increased by <code>x%</code> | The Blessed | | Crystal Field | Crystal attacks deal <code>x%</code> more damage, physical attacks deal <code>x%</code> less damage | Crystal Vanguard | | Crystal Haven | Defense increased by <code>x%</code>, attack speed reduced by <code>x%</code> | Crystal Vanguard | | Shadow Realm | Psychic and Spirit damage increased by <code>x%</code>, healing reduced by <code>x%</code> | Wraithwood Seer | | Mind Field | All attacks have <code>x%</code> chance to inflict confusion | Wraithwood Seer | | Primal Arena | Physical and Root damage increased by <code>x%</code>, Spiritual decreased by <code>x%</code> | Primal Shifter | | Wild Territory | All units gain <code>x%</code> speed but lose <code>x%</code> accuracy | Primal Shifter | | Spirit Mist | All damage becomes Spirit type, status effects have double duration | Conjuror | | Echo Chamber | All moves have <code>x%</code> chance to trigger twice | Conjuror | | War Ground | Physical damage increased by <code>x%</code>, healing reduced by <code>x%</code> | Zealot | | Passion Field | Attack speed increased by <code>x%</code>, defense reduced by <code>x%</code> | Zealot |</p>"},{"location":"technical/game-mechanics/battle-conditions/#attack-type-effects","title":"Attack Type Effects","text":"Condition Description Source <p>| Blade Storm | Slash damage increased by <code>x%</code>, evasion reduced by <code>x%</code> | Slash | | Sharp Wind | All attacks gain Slash property, accuracy reduced by <code>x%</code> | Slash | | Pierce Veil | Pierce attacks ignore <code>x%</code> defense, all units take <code>x%</code> more damage | Pierce | | Needle Rain | Pierce attacks cause Bleed, defense reduced by <code>x%</code> | Pierce | | Impact Zone | Blunt attacks deal <code>x%</code> more damage, speed reduced by <code>x%</code> | Blunt | | Crushing Field | Blunt attacks have <code>x%</code> chance to Stun, movement speed reduced | Blunt | | Spirit Nexus | Spirit damage increased by <code>x%</code>, physical damage reduced by <code>x%</code> | Spirit | | Soul Mist | Spirit attacks have <code>x%</code> lifesteal, defense reduced by <code>x%</code> | Spirit | | Blood Moon | Blood attacks gain <code>x%</code> lifesteal, healing reduced by <code>x%</code> | Blood | | Crimson Field | Blood attacks deal bonus damage to shields, HP costs increased by <code>x%</code> | Blood | | Bone Yard | Bone attacks deal <code>x%</code> more damage, healing reduced by <code>x%</code> | Bone | | Ancestral Ground | Bone attacks ignore <code>x%</code> defense, speed reduced by <code>x%</code> | Bone | | Fire Storm | Fire damage increased by <code>x%</code>, Water damage reduced by <code>x%</code> | Fire | | Burning Ground | Fire attacks apply Burn, all units take <code>x%</code> more damage | Fire | | Frost Field | Frost attacks slow targets by <code>x%</code>, Fire damage reduced by <code>x%</code> | Frost | | Ice Mirror | Frost attacks have <code>x%</code> chance to freeze, movement speed reduced | Frost |</p>"},{"location":"technical/game-mechanics/battle-conditions/#stat-based-effects","title":"Stat-Based Effects","text":"Condition Description Source <p>| Vitality Zone | All units gain <code>x%</code> max HP, healing reduced by <code>x%</code> | HP | | Power Surge | Attack increased by <code>x%</code>, defense reduced by <code>x%</code> | Attack | | Mystic Realm | Magic damage increased by <code>x%</code>, physical damage reduced by <code>x%</code> | Magic | | Iron Wall | Physical defense increased by <code>x%</code>, speed reduced by <code>x%</code> | Physical Defense | | Magic Barrier | Magic defense increased by <code>x%</code>, attack reduced by <code>x%</code> | Magic Defense | | Swift Current | Speed increased by <code>x%</code>, defense reduced by <code>x%</code> | Speed | | Fortune Field | Critical hit chance increased by <code>x%</code>, defense reduced by <code>x%</code> | Luck |</p>"},{"location":"technical/game-mechanics/status-effects/","title":"Status Effects Reference","text":"<p>Overview</p> <p>This document provides a comprehensive reference for all status effects in the combat system, organized by their primary function and impact on gameplay.</p>"},{"location":"technical/game-mechanics/status-effects/#status-effects","title":"Status Effects","text":""},{"location":"technical/game-mechanics/status-effects/#damage-effects","title":"Damage Effects","text":"Effect Description <p>| Damage | Target loses <code>x</code> amount of health | | Drain | Target loses <code>x</code> health. User gains <code>x%</code> of drain as health | | Burn | Target loses <code>x</code> health over time | | Bleed | Target loses <code>x</code> health when performing actions | | True Damage | Target loses <code>x</code> health, ignoring defenses | | Counter | When hit, deal <code>x</code> damage back to attacker | | Shatter | Break target's shields and deal <code>x</code> damage |</p>"},{"location":"technical/game-mechanics/status-effects/#defensive-effects","title":"Defensive Effects","text":"Effect Description <p>| Shield | Gain temporary health that absorbs <code>x</code> damage | | Barrier | Reduce all incoming damage by <code>x%</code> | | Reflect | Return <code>x%</code> of received damage to attacker | | Immune | Cannot be affected by specified damage type or status | | Guard | Take <code>x%</code> reduced damage from next attack | | Absorb | Convert incoming damage of specific type to healing | | Evasion | <code>x%</code> chance to avoid attacks |</p>"},{"location":"technical/game-mechanics/status-effects/#recovery-effects","title":"Recovery Effects","text":"Effect Description <p>| Heal | Restore <code>x</code> health | | Regenerate | Recover <code>x</code> health over time | | Cleanse | Remove all negative status effects | | Revive | Restore from defeat with <code>x%</code> health | | Lifesteal | Heal for <code>x%</code> of damage dealt | | Restore | Replenish <code>x</code> amount of resource (mana/energy) | | Purify | Remove all status effects, positive and negative |</p>"},{"location":"technical/game-mechanics/status-effects/#debuffs","title":"Debuffs","text":"Effect Description <p>| Weaken | Reduce damage output by <code>x%</code> | | Vulnerable | Take <code>x%</code> increased damage | | Silence | Cannot use abilities | | Stun | Cannot act | | Root | Cannot move | | Slow | Reduce speed by <code>x%</code> | | Blind | Reduce accuracy by <code>x%</code> |</p>"},{"location":"technical/game-mechanics/status-effects/#buffs","title":"Buffs","text":"Effect Description <p>| Strengthen | Increase damage output by <code>x%</code> | | Haste | Increase speed by <code>x%</code> | | Empower | Abilities cost <code>x%</code> less resource | | Fortify | Increase defense by <code>x%</code> | | Precision | Increase accuracy by <code>x%</code> | | Energize | Gain <code>x</code> additional resource per turn | | Inspire | Gain <code>x%</code> critical strike chance |</p>"},{"location":"technical/game-mechanics/status-effects/#control-effects","title":"Control Effects","text":"Effect Description <p>| Charm | Target temporarily fights for opposite side | | Fear | Target cannot approach user | | Taunt | Target must attack user | | Confuse | <code>x%</code> chance to act randomly | | Sleep | Cannot act until damaged | | Paralyze | <code>x%</code> chance to skip turn | | Banish | Remove from battle for <code>x</code> turns |</p>"},{"location":"technical/game-mechanics/status-effects/#utility-effects","title":"Utility Effects","text":"Effect Description <p>| Mark | Target receives <code>x%</code> increased damage from marked source | | Link | Share damage and healing with linked target | | Copy | Duplicate target's last used ability | | Transform | Change into different form with new abilities | | Stance | Enter special state with unique effects | | Channel | Charge powerful effect over multiple turns | | Lock | Prevent status effects from being applied or removed |</p>"},{"location":"technical/game-mechanics/targeting/","title":"Targeting System Reference","text":"<p>Overview</p> <p>This document details the various targeting mechanisms available in the combat system, including how different abilities and effects select their targets.</p>"},{"location":"technical/game-mechanics/targeting/#target-types","title":"Target Types","text":"Target Type Description <p>| Self | Effect applies to <code>s</code> only | | Single Enemy | Effect applies to <code>t</code> only | | All Entities | Effect applies to <code>s</code> and <code>t</code> | | Field | Effect applies to <code>f</code>, affecting conditions | | Random | Effect applies to random choice between <code>s</code> or <code>t</code> | | Both | Effect applies to <code>s</code> and <code>t</code> equally | | None | Effect applies to <code>f</code> without targeting | | Reflected | Effect originates from <code>s</code> but applies to <code>t</code> | | Either | Effect can be applied to choice of <code>s</code> or <code>t</code> | | Last Hit | Effect applies to last entity (<code>s</code> or <code>t</code>) that took damage |</p>"},{"location":"technical/game-mechanics/targeting/#targeting-keys","title":"Targeting Keys","text":"<ul> <li> <p><code>s</code>: source/self (the entity using the ability)</p> </li> <li> <p><code>t</code>: target (the enemy entity)</p> </li> <li> <p><code>f</code>: field (the battle environment)</p> </li> </ul> <p>Implementation Details</p> <p>When implementing targeting logic, ensure proper validation of target type against the ability being used. Some abilities may have restrictions on valid targets based on their effects or the current battle conditions.</p>"},{"location":"technical/hardware/ai-hat-plus/","title":"AI HAT+ Hardware Specifications","text":""},{"location":"technical/hardware/ai-hat-plus/#overview","title":"Overview","text":"<p>The 26 TOPS variant of the Raspberry Pi AI HAT+ provides neural network acceleration through the Hailo-8 neural network inference accelerator. This hardware accelerator enables high-performance AI processing for The Path (AI-Pi) game system.</p>"},{"location":"technical/hardware/ai-hat-plus/#hardware-specifications","title":"Hardware Specifications","text":"<pre><code>AI_Accelerator:\n  model: \"Hailo-8\"\n\n  performance: \"26 TOPS\"\n  interface: \"PCIe 2.0 x1\"\n  power_efficiency: \"2.5 TOPS/W\"\n\nMemory_Requirements:\n  dedicated_memory: \"2GB reserved\"\n  buffer_memory: \"512MB for inference\"\n  model_storage: \"1GB recommended\"\n\nPerformance_Modes:\n  max_performance:\n    tops: \"26\"\n    power: \"10.4W\"\n    use_case: \"Multiple concurrent AI models\"\n  balanced:\n    tops: \"19.5\"\n    power: \"7.8W\"\n    use_case: \"Standard gameplay\"\n  power_saving:\n    tops: \"13\"\n    power: \"5.2W\"\n    use_case: \"Battery operation\"\n</code></pre>"},{"location":"technical/hardware/ai-hat-plus/#integration-points","title":"Integration Points","text":""},{"location":"technical/hardware/ai-hat-plus/#pcie-communication","title":"PCIe Communication","text":"<pre><code>from hailo_platform import HailoPlatform, DeviceType\n\ndef initialize_hailo():\n    \"\"\"Initialize Hailo device with performance mode\"\"\"\n    platform = HailoPlatform()\n    device = platform.create_device(DeviceType.PCIE)\n    device.set_power_mode(\"performance\")  # 26 TOPS mode\n\n    return device\n\ndef optimize_model(model_path: str) -&gt; HailoModel:\n\n    \"\"\"Optimize model for Hailo-8 hardware\"\"\"\n\n    optimizer = HailoOptimizer(\n        target_platform=\"hailo8\",\n        optimization_level=3,\n        power_mode=\"performance\"\n    )\n    return optimizer.optimize(model_path)\n</code></pre>"},{"location":"technical/hardware/ai-hat-plus/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code>class HailoMonitor:\n    def __init__(self):\n        self.device = initialize_hailo()\n\n    def get_metrics(self) -&gt; dict:\n\n        \"\"\"Get real-time performance metrics\"\"\"\n\n        return {\n            'temperature': self.device.temperature,\n            'power_consumption': self.device.power_consumption,\n            'utilization': self.device.utilization,\n            'memory_usage': self.device.memory_usage,\n            'inference_time': self.device.last_inference_time\n        }\n\n    def check_thermal_throttling(self) -&gt; bool:\n\n        \"\"\"Monitor for thermal throttling\"\"\"\n        return self.device.temperature &gt; 85  # Celsius\n</code></pre>"},{"location":"technical/hardware/ai-hat-plus/#model-optimization","title":"Model Optimization","text":""},{"location":"technical/hardware/ai-hat-plus/#hardware-specific-optimizations","title":"Hardware-Specific Optimizations","text":"<pre><code>class ModelOptimizer:\n    def __init__(self):\n        self.optimizer = HailoOptimizer()\n\n    def optimize_for_gameplay(self, model: HailoModel) -&gt; HailoModel:\n\n        \"\"\"Optimize model for gameplay requirements\"\"\"\n        return self.optimizer.optimize(\n            model,\n            target_fps=60,\n            max_power=10.4,\n            precision=\"mixed\"\n        )\n\n    def quantize_model(self, model: HailoModel) -&gt; HailoModel:\n\n        \"\"\"Quantize model for optimal performance\"\"\"\n        return self.optimizer.quantize(\n            model,\n            calibration_set=self.get_calibration_data(),\n            optimization_level=3\n        )\n</code></pre>"},{"location":"technical/hardware/ai-hat-plus/#performance-requirements","title":"Performance Requirements","text":""},{"location":"technical/hardware/ai-hat-plus/#inference-performance","title":"Inference Performance","text":"<pre><code>Minimum_Requirements:\n  inference_time: \"&lt;5ms\"\n  model_size: \"&lt;500MB\"\n  concurrent_models: 4\n  memory_usage: \"&lt;2GB\"\n\nMonitoring_Thresholds:\n  temperature: \"85\u00b0C max\"\n  power: \"10.4W max\"\n  utilization: \"90% max\"\n  memory: \"90% max\"\n</code></pre>"},{"location":"technical/hardware/ai-hat-plus/#error-handling","title":"Error Handling","text":"<pre><code>class HailoError(Exception):\n    \"\"\"Base exception for Hailo-related errors\"\"\"\n\n    pass\n\nclass HailoInitError(HailoError):\n    \"\"\"Raised when Hailo device initialization fails\"\"\"\n    pass\n\nclass HailoPerformanceError(HailoError):\n    \"\"\"Raised when performance requirements aren't met\"\"\"\n    pass\n\ndef handle_hailo_error(error: HailoError) -&gt; None:\n\n    \"\"\"Handle Hailo-specific errors\"\"\"\n\n    if isinstance(error, HailoInitError):\n        # Try reinitializing with lower performance mode\n\n        initialize_hailo(power_mode=\"balanced\")\n    elif isinstance(error, HailoPerformanceError):\n        # Scale down model complexity\n\n        reduce_model_complexity()\n</code></pre>"},{"location":"technical/hardware/ai-hat-plus/#integration-requirements","title":"Integration Requirements","text":""},{"location":"technical/hardware/ai-hat-plus/#driver-installation","title":"Driver Installation","text":"<pre><code># Install Hailo drivers and runtime\n\nsudo apt-get update\n\nsudo apt-get install -y hailo-driver\n\nsudo apt-get install -y hailo-runtime\n\n# Verify installation\n\nhailo-pcie-status\n</code></pre>"},{"location":"technical/hardware/ai-hat-plus/#python-dependencies","title":"Python Dependencies","text":"<pre><code>hailo-platform&gt;=4.x.x\n\nhailo-runtime&gt;=4.x.x\n\nhailo-monitor&gt;=1.x.x\n</code></pre>"},{"location":"technical/hardware/ai-hat-plus/#power-management","title":"Power Management","text":"<pre><code>def set_power_mode(mode: str) -&gt; None:\n\n    \"\"\"Set Hailo power mode based on requirements\"\"\"\n    device = initialize_hailo()\n\n    modes = {\n        'max_performance': {\n            'tops': 26,\n            'power_limit': 10.4\n        },\n        'balanced': {\n            'tops': 19.5,\n            'power_limit': 7.8\n        },\n        'power_saving': {\n            'tops': 13,\n            'power_limit': 5.2\n        }\n    }\n\n    config = modes[mode]\n    device.set_power_mode(mode, config)\n</code></pre>"},{"location":"technical/hardware/raspberry-pi-5/","title":"Raspberry Pi 5 Hardware Specifications","text":""},{"location":"technical/hardware/raspberry-pi-5/#overview","title":"Overview","text":"<p>The Raspberry Pi 5 serves as the core computing platform for The Path (AI-Pi), providing the necessary processing power, graphics capabilities, and I/O interfaces for the game system.</p>"},{"location":"technical/hardware/raspberry-pi-5/#hardware-specifications","title":"Hardware Specifications","text":"<pre><code>Processor:\n  model: \"Broadcom BCM2712\"\n  cpu:\n    architecture: \"Arm Cortex-A76\"\n\n    cores: 4\n    frequency: \"2.4GHz\"\n    features:\n      - \"Cryptographic Extension\"\n\n      - \"512KB per-core L2 caches\"\n\n      - \"2MB shared L3 cache\"\n\nGraphics:\n  gpu: \"VideoCore VII\"\n  apis:\n    - \"OpenGL ES 3.1\"\n\n    - \"Vulkan 1.2\"\n\n  features:\n    - \"Dual 4Kp60 HDMI with HDR\"\n\n    - \"4Kp60 HEVC decoder\"\n\nMemory:\n  type: \"LPDDR4X-4267\"\n\n  size: \"8GB\"\n  bandwidth: \"34.1 GB/s\"\n  allocation:\n    gpu: \"1GB reserved\"\n    system: \"7GB available\"\n\nConnectivity:\n  wifi: \"Dual-band 802.11ac\"\n\n  bluetooth: \"5.0 / BLE\"\n  ethernet: \"Gigabit with PoE+ support\"\n  usb:\n    - \"2 \u00d7 USB 3.0 (5Gbps)\"\n\n    - \"2 \u00d7 USB 2.0\"\n\nStorage:\n  primary: \"microSD with SDR104 mode\"\n  expansion: \"PCIe 2.0 x1\"\n\nDisplay_Interfaces:\n  hdmi: \"2 \u00d7 4Kp60 outputs\"\n  mipi: \"2 \u00d7 4-lane 1.5Gbps transceivers\"\n\nPower:\n  input: \"5V/5A via USB-C\"\n\n  features:\n    - \"Power Delivery support\"\n\n    - \"Power button\"\n\n    - \"Real-time clock (RTC)\"\n</code></pre>"},{"location":"technical/hardware/raspberry-pi-5/#system-configuration","title":"System Configuration","text":""},{"location":"technical/hardware/raspberry-pi-5/#memory-management","title":"Memory Management","text":"<pre><code># /boot/config.txt\n\ngpu_mem=1024        # Reserve 1GB for GPU\n\nmax_framebuffers=2  # For dual display support\n\nover_voltage=6      # For 2.4GHz operation\n</code></pre>"},{"location":"technical/hardware/raspberry-pi-5/#power-management","title":"Power Management","text":"<pre><code>class RPi5PowerManager:\n    def __init__(self):\n        self.cpu_governors = ['powersave', 'ondemand', 'performance']\n        self.current_governor = 'ondemand'\n\n    def set_performance_mode(self):\n        \"\"\"Configure for maximum performance\"\"\"\n        self.set_cpu_governor('performance')\n        self.set_gpu_frequency('max')\n        self.enable_turbo()\n\n    def set_balanced_mode(self):\n        \"\"\"Configure for balanced operation\"\"\"\n        self.set_cpu_governor('ondemand')\n        self.set_gpu_frequency('auto')\n        self.disable_turbo()\n\n    def set_power_save_mode(self):\n        \"\"\"Configure for power saving\"\"\"\n        self.set_cpu_governor('powersave')\n        self.set_gpu_frequency('min')\n        self.disable_turbo()\n</code></pre>"},{"location":"technical/hardware/raspberry-pi-5/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code>class RPi5Monitor:\n    def __init__(self):\n        self.vcgencmd = '/usr/bin/vcgencmd'\n\n    def get_system_metrics(self) -&gt; dict:\n\n        \"\"\"Get comprehensive system metrics\"\"\"\n        return {\n            'cpu': {\n                'temperature': self.get_cpu_temp(),\n                'frequency': self.get_cpu_freq(),\n                'governor': self.get_cpu_governor()\n            },\n            'gpu': {\n                'memory': self.get_gpu_memory(),\n                'frequency': self.get_gpu_freq()\n            },\n            'memory': {\n                'total': self.get_memory_total(),\n                'available': self.get_memory_available(),\n                'gpu_reserved': self.get_gpu_memory_reserved()\n            },\n            'power': {\n                'voltage': self.get_voltage(),\n                'throttled': self.get_throttled_state()\n            }\n        }\n\n    def check_thermal_throttling(self) -&gt; bool:\n\n        \"\"\"Check if system is thermal throttling\"\"\"\n        return self.get_cpu_temp() &gt; 80  # Celsius\n</code></pre>"},{"location":"technical/hardware/raspberry-pi-5/#thermal-management","title":"Thermal Management","text":"<pre><code>Cooling_Requirements:\n  idle_temp_target: \"&lt;50\u00b0C\"\n  load_temp_target: \"&lt;75\u00b0C\"\n  throttle_temp: \"80\u00b0C\"\n\nRecommended_Cooling:\n  - \"Active cooling fan\"\n\n  - \"Heatsink on CPU/GPU\"\n\n  - \"Thermal pads on memory\"\n</code></pre>"},{"location":"technical/hardware/raspberry-pi-5/#performance-targets","title":"Performance Targets","text":"<pre><code>CPU_Performance:\n  single_thread: \"2.4GHz sustained\"\n  multi_thread: \"2.4GHz all cores\"\n  thermal_limit: \"80\u00b0C\"\n\nGPU_Performance:\n  vulkan: \"Full 1.2 feature set\"\n  opengl: \"OpenGL ES 3.1\"\n  display: \"Dual 4K@60Hz\"\n\nMemory_Performance:\n  bandwidth: \"34.1 GB/s\"\n  latency: \"&lt;20ns\"\n\nIO_Performance:\n  usb3: \"5Gbps per port\"\n  ethernet: \"1Gbps\"\n  pcie: \"5Gbps (PCIe 2.0 x1)\"\n</code></pre>"},{"location":"technical/hardware/raspberry-pi-5/#production-information","title":"Production Information","text":"<ul> <li> <p>Model: Raspberry Pi 5 (8GB)</p> </li> <li> <p>Production lifetime: Until January 2036</p> </li> <li> <p>Compliance: Full list at pip.raspberrypi.com</p> </li> </ul>"},{"location":"technical/health/","title":"Health Monitoring","text":""},{"location":"technical/health/#overview","title":"Overview","text":"<p>The AI-Pi project implements comprehensive health monitoring across all services to ensure system reliability and quick issue detection.</p>"},{"location":"technical/health/#architecture","title":"Architecture","text":"<pre><code>graph TD\n    A[Health Monitor] --&gt; B[Client Health]\n\n    A --&gt; C[Server Health]\n\n    A --&gt; D[AI Health]\n\n    A --&gt; E[MongoDB Health]\n\n    B --&gt; F[WebSocket]\n\n    C --&gt; F\n\n    D --&gt; F\n\n    E --&gt; F\n\n    F --&gt; G[Health Dashboard]\n</code></pre>"},{"location":"technical/health/#health-check-protocol","title":"Health Check Protocol","text":"<p>Each service implements a standardized health check endpoint that returns:</p> <pre><code>{\n  \"status\": \"string\",      // \"healthy\" or \"unhealthy\"\n  \"timestamp\": \"number\",   // Unix timestamp in milliseconds\n  \"version\": \"string\",     // Service version\n  \"service\": \"string\",     // Service name\n  \"dependencies\": {        // Status of dependent services\n    \"service1\": \"string\",  // \"connected\" or \"disconnected\"\n    \"service2\": \"string\"\n  }\n}\n</code></pre>"},{"location":"technical/health/#service-health-endpoints","title":"Service Health Endpoints","text":"Service Endpoint Port <p>| Client   | /health         | 3000  | | Server   | /health         | 8080  | | AI       | /health         | 5000  | | MongoDB  | (Internal)      | 27017 |</p>"},{"location":"technical/health/#docker-integration","title":"Docker Integration","text":"<p>Docker Compose configures health checks for each service:</p> <pre><code>healthcheck:\n  test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:&lt;port&gt;/health\"]\n\n  interval: 30s\n  timeout: 10s\n  retries: 3\n</code></pre>"},{"location":"technical/health/#monitoring-tools","title":"Monitoring Tools","text":"<ol> <li>Docker Health</li> </ol> <pre><code>docker ps  # View container health\n\ndocker inspect  # Detailed health info\n</code></pre> <ol> <li>Health Check Script</li> </ol> <pre><code>./scripts/check-health.sh  # Check all services\n</code></pre> <ol> <li>Logging</li> </ol> <pre><code>docker-compose logs  # View service logs\n</code></pre>"},{"location":"technical/health/#error-handling","title":"Error Handling","text":"<ol> <li> <p>Automatic Recovery</p> </li> <li> <p>Services attempt to reconnect to dependencies</p> </li> <li> <p>Docker restarts unhealthy containers</p> </li> <li> <p>Notifications</p> </li> <li> <p>Log critical health issues</p> </li> <li> <p>Alert on repeated failures</p> </li> </ol>"},{"location":"technical/health/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Implementation</p> </li> <li> <p>Keep health checks lightweight</p> </li> <li> <p>Include relevant metrics</p> </li> <li> <p>Handle timeouts gracefully</p> </li> <li> <p>Monitoring</p> </li> <li> <p>Check health regularly</p> </li> <li> <p>Log health status changes</p> </li> <li> <p>Track dependency health</p> </li> <li> <p>Maintenance</p> </li> <li> <p>Update health checks with new features</p> </li> <li> <p>Review health metrics regularly</p> </li> <li> <p>Test failure scenarios</p> </li> </ol>"},{"location":"technical/health/ai/","title":"AI Service Health Monitoring","text":""},{"location":"technical/health/ai/#overview","title":"Overview","text":"<p>The AI service implements health monitoring to track model loading, inference performance, and system resources on the Raspberry Pi.</p>"},{"location":"technical/health/ai/#implementation","title":"Implementation","text":""},{"location":"technical/health/ai/#1-health-check-endpoint","title":"1. Health Check Endpoint","text":"<pre><code># src/health/routes.py\n\nfrom flask import jsonify\nfrom time import time\nimport psutil\nimport tensorflow as tf\n\nfrom .model import check_model_loaded\nfrom .system import check_system_resources\n\n@app.route('/health')\ndef health():\n    model_status = check_model_loaded()\n    system_status = check_system_resources()\n\n    return jsonify({\n        'status': 'healthy' if model_status and system_status else 'unhealthy',\n        'timestamp': int(time() * 1000),\n\n        'version': '1.0.0',\n        'service': 'ai',\n        'dependencies': {\n            'model': 'loaded' if model_status else 'unloaded',\n            'system': system_status\n        }\n    })\n</code></pre>"},{"location":"technical/health/ai/#2-model-health","title":"2. Model Health","text":"<pre><code># src/health/model.py\n\nimport tensorflow as tf\nimport numpy as np\nfrom typing import Dict\n\nclass ModelHealth:\n    def __init__(self, model_path: str):\n        self.interpreter = tf.lite.Interpreter(model_path=model_path)\n        self.interpreter.allocate_tensors()\n        self.last_inference = 0\n        self.inference_times = []\n\n    def check_model_loaded(self) -&gt; bool:\n\n        try:\n            # Test inference with dummy input\n\n            input_details = self.interpreter.get_input_details()\n            dummy_input = np.zeros(input_details[0]['shape'], dtype=np.float32)\n\n            self.interpreter.set_tensor(input_details[0]['index'], dummy_input)\n            self.interpreter.invoke()\n            return True\n        except Exception as e:\n            print(f\"Model health check failed: {e}\")\n            return False\n\n    def track_inference(self, duration_ms: float):\n        \"\"\"Track inference times for monitoring\"\"\"\n        self.inference_times.append(duration_ms)\n        if len(self.inference_times) &gt; 100:\n            self.inference_times.pop(0)\n\n    def get_stats(self) -&gt; Dict[str, float]:\n\n        \"\"\"Get inference statistics\"\"\"\n        if not self.inference_times:\n            return {\n                'avg_inference_ms': 0,\n                'max_inference_ms': 0,\n                'min_inference_ms': 0\n            }\n\n        return {\n            'avg_inference_ms': np.mean(self.inference_times),\n            'max_inference_ms': np.max(self.inference_times),\n            'min_inference_ms': np.min(self.inference_times)\n        }\n</code></pre>"},{"location":"technical/health/ai/#3-system-health","title":"3. System Health","text":"<pre><code># src/health/system.py\n\nimport psutil\nfrom typing import Dict\n\ndef check_system_resources() -&gt; Dict[str, float]:\n\n    \"\"\"Check system resource usage\"\"\"\n    try:\n        cpu_percent = psutil.cpu_percent(interval=1)\n        memory = psutil.virtual_memory()\n        disk = psutil.disk_usage('/')\n\n        # Check thresholds\n\n        if (cpu_percent &gt; 90 or\n            memory.percent &gt; 90 or\n            disk.percent &gt; 90):\n            return 'overloaded'\n\n        return 'normal'\n    except Exception as e:\n        print(f\"System health check failed: {e}\")\n        return 'unknown'\n</code></pre>"},{"location":"technical/health/ai/#docker-integration","title":"Docker Integration","text":""},{"location":"technical/health/ai/#1-health-check-configuration","title":"1. Health Check Configuration","text":"<pre><code># docker-compose.yml\n\nservices:\n  ai:\n    build:\n      context: ./ai\n      dockerfile: ../docker/dev/ai.Dockerfile\n    healthcheck:\n      test: [\"CMD\", \"wget\", \"-qO-\", \"http://localhost:5000/health\"]\n\n      interval: 30s\n      timeout: 10s\n      retries: 3\n</code></pre>"},{"location":"technical/health/ai/#2-dockerfile-setup","title":"2. Dockerfile Setup","text":"<pre><code># docker/dev/ai.Dockerfile\n\nFROM python:3.11-slim\n\n# Health check dependencies\n\nRUN apt-get update &amp;&amp; apt-get install -y wget curl\n\nWORKDIR /app/ai\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY . .\n\n# Health check setup\n\nHEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \\\n\n    CMD wget -qO- http://localhost:5000/health || exit 1\n\nEXPOSE 5000\nCMD [\"python\", \"main.py\"]\n</code></pre>"},{"location":"technical/health/ai/#error-handling","title":"Error Handling","text":""},{"location":"technical/health/ai/#1-model-recovery","title":"1. Model Recovery","text":"<pre><code># src/model/recovery.py\n\nimport time\nfrom typing import Optional\nimport tensorflow as tf\n\nclass ModelRecovery:\n    def __init__(self, model_path: str):\n        self.model_path = model_path\n        self.interpreter: Optional[tf.lite.Interpreter] = None\n        self.load_attempts = 0\n\n    def load_model(self) -&gt; bool:\n\n        \"\"\"Load model with retry logic\"\"\"\n        if self.load_attempts &gt;= 3:\n            raise Exception(\"Failed to load model after 3 attempts\")\n\n        try:\n            self.interpreter = tf.lite.Interpreter(model_path=self.model_path)\n            self.interpreter.allocate_tensors()\n            self.load_attempts = 0\n            return True\n        except Exception as e:\n            self.load_attempts += 1\n            print(f\"Model load attempt {self.load_attempts} failed: {e}\")\n            time.sleep(self.load_attempts * 2)  # Exponential backoff\n\n            return False\n</code></pre>"},{"location":"technical/health/ai/#2-resource-management","title":"2. Resource Management","text":"<pre><code># src/health/resources.py\n\nimport psutil\nimport gc\nfrom typing import Dict\n\nclass ResourceManager:\n    def __init__(self):\n        self.warning_threshold = 80  # Percentage\n\n        self.critical_threshold = 90  # Percentage\n\n    def check_resources(self) -&gt; Dict[str, str]:\n\n        \"\"\"Check system resources and take action if needed\"\"\"\n        cpu = psutil.cpu_percent(interval=1)\n        memory = psutil.virtual_memory()\n\n        status = {\n            'cpu': 'normal',\n            'memory': 'normal'\n        }\n\n        # Handle high CPU\n\n        if cpu &gt; self.critical_threshold:\n            status['cpu'] = 'critical'\n        elif cpu &gt; self.warning_threshold:\n            status['cpu'] = 'warning'\n\n        # Handle high memory\n\n        if memory.percent &gt; self.critical_threshold:\n            status['memory'] = 'critical'\n            gc.collect()  # Force garbage collection\n\n        elif memory.percent &gt; self.warning_threshold:\n            status['memory'] = 'warning'\n\n        return status\n</code></pre>"},{"location":"technical/health/ai/#monitoring","title":"Monitoring","text":""},{"location":"technical/health/ai/#1-health-check-script","title":"1. Health Check Script","text":"<pre><code>#!/bin/bash\n\n# scripts/check-ai-health.sh\n\ncheck_ai() {\n    response=$(curl -s http://localhost:5000/health)\n\n    status=$(echo $response | jq -r '.status')\n\n    if [ \"$status\" = \"healthy\" ]; then\n        echo \"AI service is healthy\"\n        return 0\n    else\n        echo \"AI service is unhealthy\"\n        echo \"Response: $response\"\n        return 1\n    fi\n}\n\ncheck_ai\n</code></pre>"},{"location":"technical/health/ai/#2-logging","title":"2. Logging","text":"<pre><code># src/utils/logger.py\n\nimport logging\nfrom typing import Optional\nfrom datetime import datetime\n\nclass AILogger:\n    def __init__(self, log_path: Optional[str] = None):\n        self.logger = logging.getLogger('ai_service')\n        self.logger.setLevel(logging.INFO)\n\n        if log_path:\n            handler = logging.FileHandler(log_path)\n        else:\n            handler = logging.StreamHandler()\n\n        formatter = logging.Formatter(\n            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n\n        )\n        handler.setFormatter(formatter)\n        self.logger.addHandler(handler)\n\n    def log_inference(self, duration_ms: float, success: bool):\n        \"\"\"Log inference attempt\"\"\"\n        self.logger.info(\n            f\"Inference completed: duration={duration_ms}ms success={success}\"\n        )\n\n    def log_health(self, health_status: dict):\n        \"\"\"Log health check\"\"\"\n        self.logger.info(f\"Health check: {health_status}\")\n</code></pre>"},{"location":"technical/health/client/","title":"Client Health Monitoring","text":""},{"location":"technical/health/client/#overview","title":"Overview","text":"<p>The client service implements health monitoring to track the React application's status and its connections to the server and WebSocket.</p>"},{"location":"technical/health/client/#implementation","title":"Implementation","text":""},{"location":"technical/health/client/#1-health-check-endpoint","title":"1. Health Check Endpoint","text":"<pre><code>// src/health/health.ts\nimport express from 'express';\nimport { checkServerConnection, checkWebSocket } from './checks';\n\nconst app = express();\n\napp.get('/health', async (req, res) =&gt; {\n    const serverHealth = await checkServerConnection();\n    const wsHealth = await checkWebSocket();\n\n    res.json({\n        status: serverHealth &amp;&amp; wsHealth ? 'healthy' : 'unhealthy',\n        timestamp: Date.now(),\n        version: process.env.REACT_APP_VERSION,\n        service: 'client',\n        dependencies: {\n            server: serverHealth ? 'connected' : 'disconnected',\n            websocket: wsHealth ? 'connected' : 'disconnected'\n        }\n    });\n});\n</code></pre>"},{"location":"technical/health/client/#2-connection-checks","title":"2. Connection Checks","text":"<pre><code>// src/health/checks.ts\nimport axios from 'axios';\nimport { socket } from '../websocket';\n\nexport async function checkServerConnection(): Promise&lt;boolean&gt; {\n    try {\n        const response = await axios.get(\n            `${process.env.REACT_APP_API_URL}/health`,\n            { timeout: 5000 }\n        );\n        return response.status === 200;\n    } catch {\n        return false;\n    }\n}\n\nexport function checkWebSocket(): Promise&lt;boolean&gt; {\n    return new Promise((resolve) =&gt; {\n        if (socket.connected) {\n            resolve(true);\n            return;\n        }\n\n        const timeout = setTimeout(() =&gt; resolve(false), 5000);\n\n        socket.once('connect', () =&gt; {\n            clearTimeout(timeout);\n            resolve(true);\n        });\n\n        socket.connect();\n    });\n}\n</code></pre>"},{"location":"technical/health/client/#3-health-monitor-component","title":"3. Health Monitor Component","text":"<pre><code>// src/components/HealthMonitor.tsx\nimport React, { useEffect, useState } from 'react';\nimport { Alert } from '@mui/material';\n\nexport const HealthMonitor: React.FC = () =&gt; {\n    const [isHealthy, setIsHealthy] = useState(true);\n\n    useEffect(() =&gt; {\n        const checkHealth = async () =&gt; {\n            try {\n                const response = await fetch('/health');\n                const health = await response.json();\n                setIsHealthy(health.status === 'healthy');\n            } catch {\n                setIsHealthy(false);\n            }\n        };\n\n        checkHealth();\n        const interval = setInterval(checkHealth, 30000);\n        return () =&gt; clearInterval(interval);\n    }, []);\n\n    if (!isHealthy) {\n        return (\n            &lt;Alert severity=\"error\"&gt;\n                Connection issues detected. Please refresh the page.\n            &lt;/Alert&gt;\n        );\n    }\n\n    return null;\n};\n</code></pre>"},{"location":"technical/health/client/#docker-integration","title":"Docker Integration","text":""},{"location":"technical/health/client/#1-health-check-configuration","title":"1. Health Check Configuration","text":"<pre><code># docker-compose.yml\n\nservices:\n  client:\n    build:\n      context: ./client\n      dockerfile: ../docker/dev/client.Dockerfile\n    healthcheck:\n      test: [\"CMD\", \"wget\", \"-qO-\", \"http://localhost:3000/health\"]\n\n      interval: 30s\n      timeout: 10s\n      retries: 3\n</code></pre>"},{"location":"technical/health/client/#2-dockerfile-setup","title":"2. Dockerfile Setup","text":"<pre><code># docker/dev/client.Dockerfile\n\nFROM node:18-alpine\n\n# Health check dependencies\n\nRUN apk add --no-cache wget curl\n\nWORKDIR /app/client\nCOPY package*.json ./\n\nRUN npm install\nCOPY . .\n\n# Health check setup\n\nHEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \\\n\n    CMD wget -qO- http://localhost:3000/health || exit 1\n\nEXPOSE 3000\nCMD [\"npm\", \"start\"]\n</code></pre>"},{"location":"technical/health/client/#error-handling","title":"Error Handling","text":""},{"location":"technical/health/client/#1-connection-recovery","title":"1. Connection Recovery","text":"<pre><code>// src/websocket/reconnect.ts\nimport { socket } from './socket';\n\nexport function setupReconnection() {\n    let retries = 0;\n    const maxRetries = 5;\n\n    socket.on('disconnect', () =&gt; {\n        if (retries &lt; maxRetries) {\n            setTimeout(() =&gt; {\n                retries++;\n                socket.connect();\n            }, Math.min(1000 * retries, 5000));\n\n        } else {\n            console.error('Max reconnection attempts reached');\n        }\n    });\n\n    socket.on('connect', () =&gt; {\n        retries = 0;\n    });\n}\n</code></pre>"},{"location":"technical/health/client/#2-error-boundary","title":"2. Error Boundary","text":"<pre><code>// src/components/ErrorBoundary.tsx\nimport React, { Component, ErrorInfo } from 'react';\nimport { Alert } from '@mui/material';\n\ninterface Props {\n    children: React.ReactNode;\n}\n\ninterface State {\n    hasError: boolean;\n}\n\nexport class ErrorBoundary extends Component&lt;Props, State&gt; {\n    state = { hasError: false };\n\n    static getDerivedStateFromError() {\n        return { hasError: true };\n    }\n\n    componentDidCatch(error: Error, info: ErrorInfo) {\n        console.error('Client error:', error, info);\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return (\n                &lt;Alert severity=\"error\"&gt;\n                    Something went wrong. Please refresh the page.\n                &lt;/Alert&gt;\n            );\n        }\n\n        return this.props.children;\n    }\n}\n</code></pre>"},{"location":"technical/health/client/#monitoring","title":"Monitoring","text":""},{"location":"technical/health/client/#1-health-check-script","title":"1. Health Check Script","text":"<pre><code>#!/bin/bash\n\n# scripts/check-client-health.sh\n\ncheck_client() {\n    response=$(curl -s http://localhost:3000/health)\n\n    status=$(echo $response | jq -r '.status')\n\n    if [ \"$status\" = \"healthy\" ]; then\n        echo \"Client is healthy\"\n        return 0\n    else\n        echo \"Client is unhealthy\"\n        echo \"Response: $response\"\n        return 1\n    fi\n}\n\ncheck_client\n</code></pre>"},{"location":"technical/health/client/#2-logging","title":"2. Logging","text":"<pre><code>// src/utils/logger.ts\nexport const logger = {\n    error: (message: string, error?: Error) =&gt; {\n        console.error(message, error);\n        // Send to logging service\n    },\n\n    warn: (message: string) =&gt; {\n        console.warn(message);\n        // Send to logging service\n    },\n\n    info: (message: string) =&gt; {\n        console.info(message);\n        // Send to logging service\n    }\n};\n</code></pre>"},{"location":"technical/health/client/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Regular Health Checks</p> </li> <li> <p>Monitor every 30 seconds</p> </li> <li> <p>Quick timeout (5s max)</p> </li> <li> <p>Limited retries</p> </li> <li> <p>Error Recovery</p> </li> <li> <p>Automatic reconnection</p> </li> <li> <p>User notifications</p> </li> <li> <p>Graceful degradation</p> </li> <li> <p>Performance</p> </li> <li> <p>Lightweight checks</p> </li> <li> <p>Minimal dependencies</p> </li> <li> <p>Efficient logging</p> </li> </ol>"},{"location":"technical/health/server/","title":"Server Health Monitoring","text":""},{"location":"technical/health/server/#overview","title":"Overview","text":"<p>The server implements comprehensive health monitoring to track the Go application's status, database connections, and AI service integration.</p>"},{"location":"technical/health/server/#implementation","title":"Implementation","text":""},{"location":"technical/health/server/#1-health-check-handler","title":"1. Health Check Handler","text":"<pre><code>// internal/health/handler.go\npackage health\n\nimport (\n    \"encoding/json\"\n    \"net/http\"\n    \"time\"\n)\n\ntype HealthResponse struct {\n    Status       string            `json:\"status\"`\n    Timestamp    int64            `json:\"timestamp\"`\n    Version      string           `json:\"version\"`\n    Service      string           `json:\"service\"`\n    Dependencies map[string]string `json:\"dependencies\"`\n}\n\nfunc NewHealthHandler(checker *HealthChecker) http.HandlerFunc {\n\n    return func(w http.ResponseWriter, r *http.Request) {\n\n        mongoHealth := checker.CheckMongo()\n        aiHealth := checker.CheckAIService()\n\n        health := HealthResponse{\n            Status:    \"healthy\",\n            Timestamp: time.Now().UnixMilli(),\n            Version:   \"1.0.0\",\n            Service:   \"server\",\n            Dependencies: map[string]string{\n                \"mongodb\":    mongoHealth,\n                \"ai_service\": aiHealth,\n            },\n        }\n\n        if mongoHealth != \"connected\" || aiHealth != \"connected\" {\n            health.Status = \"unhealthy\"\n        }\n\n        w.Header().Set(\"Content-Type\", \"application/json\")\n\n        json.NewEncoder(w).Encode(health)\n    }\n}\n</code></pre>"},{"location":"technical/health/server/#2-health-checker","title":"2. Health Checker","text":"<pre><code>// internal/health/checker.go\npackage health\n\nimport (\n    \"context\"\n    \"time\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n\n    \"go.mongodb.org/mongo-driver/mongo/readpref\"\n\n)\n\ntype HealthChecker struct {\n    mongo     *mongo.Client\n\n    aiService string\n}\n\nfunc (c *HealthChecker) CheckMongo() string {\n\n    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\n    defer cancel()\n\n    err := c.mongo.Ping(ctx, readpref.Primary())\n    if err != nil {\n        return \"disconnected\"\n    }\n    return \"connected\"\n}\n\nfunc (c *HealthChecker) CheckAIService() string {\n\n    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\n    defer cancel()\n\n    req, err := http.NewRequestWithContext(ctx, \"GET\",\n        c.aiService + \"/health\", nil)\n    if err != nil {\n        return \"disconnected\"\n    }\n\n    resp, err := http.DefaultClient.Do(req)\n    if err != nil || resp.StatusCode != http.StatusOK {\n        return \"disconnected\"\n    }\n    return \"connected\"\n}\n</code></pre>"},{"location":"technical/health/server/#3-websocket-health","title":"3. WebSocket Health","text":"<pre><code>// internal/websocket/health.go\npackage websocket\n\nimport (\n    \"sync\"\n    \"time\"\n)\n\ntype ConnectionHealth struct {\n    mu    sync.RWMutex\n    conns map[string]*Connection\n\n}\n\nfunc (h *ConnectionHealth) Monitor() {\n\n    ticker := time.NewTicker(30 * time.Second)\n\n    for range ticker.C {\n        h.mu.RLock()\n        for id, conn := range h.conns {\n            if !conn.IsHealthy() {\n                go conn.Reconnect()\n            }\n        }\n        h.mu.RUnlock()\n    }\n}\n\nfunc (h *ConnectionHealth) Add(id string, conn *Connection) {\n\n    h.mu.Lock()\n    defer h.mu.Unlock()\n    h.conns[id] = conn\n}\n\nfunc (h *ConnectionHealth) Remove(id string) {\n\n    h.mu.Lock()\n    defer h.mu.Unlock()\n    delete(h.conns, id)\n}\n</code></pre>"},{"location":"technical/health/server/#docker-integration","title":"Docker Integration","text":""},{"location":"technical/health/server/#1-health-check-configuration","title":"1. Health Check Configuration","text":"<pre><code># docker-compose.yml\n\nservices:\n  server:\n    build:\n      context: ./server\n      dockerfile: ../docker/dev/server.Dockerfile\n    healthcheck:\n      test: [\"CMD\", \"wget\", \"-qO-\", \"http://localhost:8080/health\"]\n\n      interval: 30s\n      timeout: 10s\n      retries: 3\n</code></pre>"},{"location":"technical/health/server/#2-dockerfile-setup","title":"2. Dockerfile Setup","text":"<pre><code># docker/dev/server.Dockerfile\n\nFROM golang:1.21-alpine\n\n# Health check dependencies\n\nRUN apk add --no-cache wget curl\n\nWORKDIR /app/server\nCOPY go.* ./\n\nRUN go mod download\nCOPY . .\n\n# Health check setup\n\nHEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \\\n\n    CMD wget -qO- http://localhost:8080/health || exit 1\n\nEXPOSE 8080\nCMD [\"go\", \"run\", \"cmd/main.go\"]\n</code></pre>"},{"location":"technical/health/server/#error-handling","title":"Error Handling","text":""},{"location":"technical/health/server/#1-middleware","title":"1. Middleware","text":"<pre><code>// internal/middleware/recovery.go\npackage middleware\n\nimport (\n    \"log\"\n    \"net/http\"\n)\n\nfunc Recovery(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\n        defer func() {\n            if err := recover(); err != nil {\n                log.Printf(\"panic: %v\", err)\n                http.Error(w,\n                    \"Internal server error\",\n                    http.StatusInternalServerError)\n            }\n        }()\n        next.ServeHTTP(w, r)\n    })\n}\n</code></pre>"},{"location":"technical/health/server/#2-connection-recovery","title":"2. Connection Recovery","text":"<pre><code>// internal/websocket/connection.go\npackage websocket\n\nimport (\n    \"time\"\n    \"github.com/gorilla/websocket\"\n)\n\ntype Connection struct {\n    conn     *websocket.Conn\n\n    attempts int\n}\n\nfunc (c *Connection) Reconnect() error {\n\n    if c.attempts &gt;= 5 {\n        return errors.New(\"max reconnection attempts reached\")\n    }\n\n    backoff := time.Duration(c.attempts) * time.Second\n\n    time.Sleep(backoff)\n\n    // Attempt reconnection\n    newConn, err := c.dial()\n    if err != nil {\n        c.attempts++\n        return err\n    }\n\n    c.conn = newConn\n    c.attempts = 0\n    return nil\n}\n</code></pre>"},{"location":"technical/health/server/#monitoring","title":"Monitoring","text":""},{"location":"technical/health/server/#1-health-check-script","title":"1. Health Check Script","text":"<pre><code>#!/bin/bash\n\n# scripts/check-server-health.sh\n\ncheck_server() {\n    response=$(curl -s http://localhost:8080/health)\n\n    status=$(echo $response | jq -r '.status')\n\n    if [ \"$status\" = \"healthy\" ]; then\n        echo \"Server is healthy\"\n        return 0\n    else\n        echo \"Server is unhealthy\"\n        echo \"Response: $response\"\n        return 1\n    fi\n}\n\ncheck_server\n</code></pre>"},{"location":"technical/health/server/#2-logging","title":"2. Logging","text":"<pre><code>// internal/logger/logger.go\npackage logger\n\nimport (\n    \"log\"\n    \"os\"\n)\n\ntype Logger struct {\n    info  *log.Logger\n\n    warn  *log.Logger\n\n    error *log.Logger\n\n}\n\nfunc New() *Logger {\n\n    return &amp;Logger{\n        info:  log.New(os.Stdout, \"INFO: \", log.LstdFlags),\n        warn:  log.New(os.Stdout, \"WARN: \", log.LstdFlags),\n        error: log.New(os.Stderr, \"ERROR: \", log.LstdFlags),\n    }\n}\n</code></pre>"},{"location":"technical/setup/docker/","title":"Docker Setup","text":""},{"location":"technical/setup/docker/#overview","title":"Overview","text":"<p>The project uses Docker for local development and deployment. Each service runs in its own container with health monitoring.</p>"},{"location":"technical/setup/docker/#development-environment","title":"Development Environment","text":""},{"location":"technical/setup/docker/#1-prerequisites","title":"1. Prerequisites","text":"<ul> <li> <p>Docker Engine 20.10+</p> </li> <li> <p>Docker Compose 2.2+</p> </li> <li> <p>Make (optional, for convenience scripts)</p> </li> </ul>"},{"location":"technical/setup/docker/#2-directory-structure","title":"2. Directory Structure","text":"<pre><code>aipi/\n\u251c\u2500\u2500 docker/\n\u2502   \u251c\u2500\u2500 dev/\n\u2502   \u2502   \u251c\u2500\u2500 client.Dockerfile\n\u2502   \u2502   \u251c\u2500\u2500 server.Dockerfile\n\u2502   \u2502   \u2514\u2500\u2500 ai.Dockerfile\n\u2502   \u2514\u2500\u2500 prod/\n\u2502       \u251c\u2500\u2500 client.Dockerfile\n\u2502       \u251c\u2500\u2500 server.Dockerfile\n\u2502       \u2514\u2500\u2500 ai.Dockerfile\n\u2514\u2500\u2500 docker-compose.yml\n</code></pre>"},{"location":"technical/setup/docker/#3-base-images","title":"3. Base Images","text":"<pre><code># dev/base.Dockerfile\n\nFROM ubuntu:22.04\n\n# Install common dependencies\n\nRUN apt-get update &amp;&amp; apt-get install -y \\\n\n    curl \\\n    wget \\\n    git \\\n    build-essential \\\n\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Set environment\n\nENV DEBIAN_FRONTEND=noninteractive\nENV TZ=UTC\n</code></pre>"},{"location":"technical/setup/docker/#4-service-images","title":"4. Service Images","text":""},{"location":"technical/setup/docker/#client-service","title":"Client Service","text":"<ul> <li> <p>React development server</p> </li> <li> <p>Hot reloading enabled</p> </li> <li> <p>Development tools mounted</p> </li> <li> <p>Port 3000 exposed</p> </li> </ul>"},{"location":"technical/setup/docker/#server-service","title":"Server Service","text":"<ul> <li> <p>Go development environment</p> </li> <li> <p>Live reload with Air</p> </li> <li> <p>Debug port exposed</p> </li> <li> <p>Health monitoring</p> </li> </ul>"},{"location":"technical/setup/docker/#ai-service","title":"AI Service","text":"<ul> <li> <p>Python development environment</p> </li> <li> <p>TensorFlow Lite runtime</p> </li> <li> <p>Model files mounted</p> </li> <li> <p>Health monitoring</p> </li> </ul>"},{"location":"technical/setup/docker/#configuration","title":"Configuration","text":""},{"location":"technical/setup/docker/#environment-variables","title":"Environment Variables","text":""},{"location":"technical/setup/docker/#development","title":"Development","text":"<ul> <li> <p><code>DOCKER_BUILDKIT=1</code>: Enable BuildKit</p> </li> <li> <p><code>COMPOSE_DOCKER_CLI_BUILD=1</code>: Use BuildKit</p> </li> <li> <p><code>NODE_ENV=development</code>: Client mode</p> </li> <li> <p><code>GO_ENV=development</code>: Server mode</p> </li> <li> <p><code>PYTHON_ENV=development</code>: AI mode</p> </li> </ul>"},{"location":"technical/setup/docker/#production","title":"Production","text":"<ul> <li> <p><code>NODE_ENV=production</code>: Client mode</p> </li> <li> <p><code>GO_ENV=production</code>: Server mode</p> </li> <li> <p><code>PYTHON_ENV=production</code>: AI mode</p> </li> <li> <p><code>TZ=UTC</code>: Timezone setting</p> </li> </ul>"},{"location":"technical/setup/docker/#volume-mounts","title":"Volume Mounts","text":""},{"location":"technical/setup/docker/#development_1","title":"Development","text":"<ul> <li> <p>Source code directories</p> </li> <li> <p>Node modules</p> </li> <li> <p>Go modules</p> </li> <li> <p>Python virtual environment</p> </li> <li> <p>Development tools</p> </li> </ul>"},{"location":"technical/setup/docker/#production_1","title":"Production","text":"<ul> <li> <p>Configuration files</p> </li> <li> <p>SSL certificates</p> </li> <li> <p>Static assets</p> </li> <li> <p>Model files</p> </li> </ul>"},{"location":"technical/setup/docker/#health-monitoring","title":"Health Monitoring","text":""},{"location":"technical/setup/docker/#endpoints","title":"Endpoints","text":""},{"location":"technical/setup/docker/#client-service_1","title":"Client Service","text":"<ul> <li> <p>Health check: <code>:3000/health</code></p> </li> <li> <p>Metrics: <code>:3000/metrics</code></p> </li> <li> <p>Status: <code>:3000/status</code></p> </li> </ul>"},{"location":"technical/setup/docker/#server-service_1","title":"Server Service","text":"<ul> <li> <p>Health check: <code>:8080/health</code></p> </li> <li> <p>Metrics: <code>:8080/metrics</code></p> </li> <li> <p>Status: <code>:8080/status</code></p> </li> </ul>"},{"location":"technical/setup/docker/#ai-service_1","title":"AI Service","text":"<ul> <li> <p>Health check: <code>:5000/health</code></p> </li> <li> <p>Metrics: <code>:5000/metrics</code></p> </li> <li> <p>Status: <code>:5000/status</code></p> </li> </ul>"},{"location":"technical/setup/docker/#monitoring-tools","title":"Monitoring Tools","text":"<ul> <li> <p>Container stats</p> </li> <li> <p>Resource usage</p> </li> <li> <p>Error logging</p> </li> <li> <p>Performance metrics</p> </li> </ul>"},{"location":"technical/setup/docker/#usage","title":"Usage","text":""},{"location":"technical/setup/docker/#development_2","title":"Development","text":""},{"location":"technical/setup/docker/#1-starting-services","title":"1. Starting Services","text":"<pre><code># Build and start all services\n\ndocker-compose up -d\n</code></pre>"},{"location":"technical/setup/docker/#2-viewing-logs","title":"2. Viewing Logs","text":"<pre><code># All services\n\ndocker-compose logs -f\n\n# Specific service\n\ndocker-compose logs -f [service]\n</code></pre>"},{"location":"technical/setup/docker/#3-stopping-services","title":"3. Stopping Services","text":"<pre><code># Stop all services\n\ndocker-compose down\n\n# Stop and remove volumes\n\ndocker-compose down -v\n</code></pre>"},{"location":"technical/setup/docker/#production_2","title":"Production","text":""},{"location":"technical/setup/docker/#1-building-images","title":"1. Building Images","text":"<pre><code># Build all services\n\ndocker-compose -f docker-compose.prod.yml build\n\n# Build specific service\n\ndocker-compose -f docker-compose.prod.yml build [service]\n</code></pre>"},{"location":"technical/setup/docker/#2-deployment","title":"2. Deployment","text":"<pre><code># Start production stack\n\ndocker-compose -f docker-compose.prod.yml up -d\n\n# Scale services\n\ndocker-compose -f docker-compose.prod.yml up -d --scale [service]=N\n</code></pre>"},{"location":"technical/setup/docker/#troubleshooting","title":"Troubleshooting","text":""},{"location":"technical/setup/docker/#common-issues","title":"Common Issues","text":"<ul> <li> <p>Container startup failures</p> </li> <li> <p>Network connectivity</p> </li> <li> <p>Volume permissions</p> </li> <li> <p>Resource constraints</p> </li> </ul>"},{"location":"technical/setup/docker/#debug-tools","title":"Debug Tools","text":"<ul> <li> <p>Container logs</p> </li> <li> <p>Health check endpoints</p> </li> <li> <p>Resource monitoring</p> </li> <li> <p>Network inspection</p> </li> </ul>"},{"location":"world_building/balance_and_meta/","title":"Combat System Balance and Meta","text":""},{"location":"world_building/balance_and_meta/#overview","title":"Overview","text":"<p>This document outlines the core principles and considerations for balancing The Path's combat system, drawing from game balance theory by Ian Schreiber and Brenda Romero. It covers character design, combat mechanics, testing methodologies, and meta-game considerations.</p>"},{"location":"world_building/balance_and_meta/#character-class-design","title":"Character Class Design","text":""},{"location":"world_building/balance_and_meta/#core-design-principles","title":"Core Design Principles","text":""},{"location":"world_building/balance_and_meta/#unique-mechanics","title":"Unique Mechanics","text":"<ul> <li> <p>Each class must have distinctive mechanics that define their playstyle</p> </li> <li> <p>Mechanics can include:</p> <ul> <li> <p>Unique resource management</p> </li> <li> <p>Special ability interactions</p> </li> <li> <p>Modified combat rules</p> </li> </ul> </li> <li> <p>Mechanics should feel natural to the class theme</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#role-versatility","title":"Role Versatility","text":"<ul> <li> <p>Classes should have primary roles with multiple specializations</p> </li> <li> <p>Example specializations for tank role:</p> <ul> <li> <p>Crowd control focus</p> </li> <li> <p>Damage mitigation</p> </li> <li> <p>Self-healing capabilities</p> </li> </ul> </li> <li> <p>Versatility prevents one-dimensional gameplay</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#synergies-and-counters","title":"Synergies and Counters","text":"<ul> <li> <p>Design natural synergies between classes</p> </li> <li> <p>Implement soft counters, not hard shutdowns</p> </li> <li> <p>Base interactions on:</p> <ul> <li> <p>Damage types</p> </li> <li> <p>Buff/debuff systems</p> </li> <li> <p>Resource management</p> </li> </ul> </li> <li> <p>Maintain strategic options even in unfavorable matchups</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#ability-cost-curves","title":"Ability Cost Curves","text":"<ul> <li> <p>Base costs for standard effects (damage/healing)</p> </li> <li> <p>Additional costs for:</p> <ul> <li> <p>Special effects</p> </li> <li> <p>Range increases</p> </li> <li> <p>Area of effect</p> </li> </ul> </li> <li> <p>Cost-to-benefit ratio should scale appropriately</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#combat-system-mechanics","title":"Combat System Mechanics","text":""},{"location":"world_building/balance_and_meta/#fundamental-pillars","title":"Fundamental Pillars","text":""},{"location":"world_building/balance_and_meta/#core-elements","title":"Core Elements","text":"<ul> <li> <p>Genre: Turn-based tactical combat</p> </li> <li> <p>Time: Strategic planning between turns</p> </li> <li> <p>Pacing: Balanced action economy</p> </li> <li> <p>Feel: Impactful abilities with clear feedback</p> </li> <li> <p>Participants: Solo and team scenarios</p> </li> <li> <p>Progression: Character growth and mastery</p> </li> <li> <p>Volume: Encounter frequency and duration</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#combat-feel-vs-mathematical-balance","title":"Combat Feel vs Mathematical Balance","text":"<ul> <li> <p>Subjective feel must align with objective balance</p> </li> <li> <p>Consider:</p> <ul> <li> <p>Visual impact</p> </li> <li> <p>Sound design</p> </li> <li> <p>Animation timing</p> </li> <li> <p>Numerical feedback</p> </li> </ul> </li> </ul>"},{"location":"world_building/balance_and_meta/#combat-constraints","title":"Combat Constraints","text":"<ul> <li> <p>Frequency of encounters</p> </li> <li> <p>Length of battles</p> </li> <li> <p>Number of actions per turn</p> </li> <li> <p>Hit frequency and impact</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#advanced-mechanics","title":"Advanced Mechanics","text":""},{"location":"world_building/balance_and_meta/#situational-balance","title":"Situational Balance","text":"<ul> <li> <p>Ability effectiveness varies with context</p> </li> <li> <p>Environmental factors affect strategy</p> </li> <li> <p>Different damage types for different scenarios</p> </li> <li> <p>Encourage strategic adaptation</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#transitivity-and-intransitivity","title":"Transitivity and Intransitivity","text":"<ul> <li> <p>Transitive relationships (A &gt; B &gt; C)</p> </li> <li> <p>Intransitive elements (rock-paper-scissors)</p> </li> <li> <p>Balance between predictable and dynamic interactions</p> </li> <li> <p>Prevent dominant strategies</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#feedback-loops","title":"Feedback Loops","text":"<ul> <li> <p>Positive feedback:</p> <ul> <li> <p>Momentum building</p> </li> <li> <p>Power scaling</p> </li> <li> <p>Victory reinforcement</p> </li> </ul> </li> <li> <p>Negative feedback:</p> <ul> <li> <p>Comeback mechanics</p> </li> <li> <p>Power limiting</p> </li> <li> <p>Balance preservation</p> </li> </ul> </li> <li> <p>Careful management of loop intensity</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#examples-from-the-path","title":"Examples from The Path","text":""},{"location":"world_building/balance_and_meta/#class-mechanics-examples","title":"Class Mechanics Examples","text":"<ul> <li> <p>Unique Resource Systems</p> <ul> <li> <p>Conjuror: Echo mechanic for spell repetition</p> </li> <li> <p>Zealot: Emotional intensity stacking</p> </li> <li> <p>Crystal Vanguard: Damage-to-defense conversion</p> </li> <li> <p>The Blessed: Divine grace enhancement</p> </li> </ul> </li> <li> <p>Role Specialization Examples</p> <ul> <li> <p>Crystal Vanguard Tank Variants:</p> <ul> <li> <p>Shield Focus: Maximum damage mitigation</p> </li> <li> <p>Golem Master: Crowd control through summons</p> </li> <li> <p>Crystal Core: Self-sustain through mineral absorption</p> </li> </ul> </li> </ul> </li> <li> <p>Synergy Examples</p> <ul> <li> <p>Conjuror + The Blessed: Enhanced healing through echo effects</p> </li> <li> <p>Crystal Vanguard + Zealot: Protected mobility for emotional buildup</p> </li> <li> <p>The Blessed + Zealot: Divine protection during emotional peaks</p> </li> </ul> </li> <li> <p>Soft Counter Examples</p> <ul> <li> <p>Zealot vs Conjuror: High mobility to pressure low health</p> </li> <li> <p>Crystal Vanguard vs Zealot: Damage absorption reduces emotional gain</p> </li> <li> <p>Conjuror vs Crystal Vanguard: Spiritual damage bypasses physical defense</p> </li> </ul> </li> </ul>"},{"location":"world_building/balance_and_meta/#combat-system-examples","title":"Combat System Examples","text":"<ul> <li> <p>Situational Effectiveness</p> <ul> <li> <p>Conjuror's echo spells in narrow corridors</p> </li> <li> <p>Crystal Vanguard's mineral absorption near crystal formations</p> </li> <li> <p>Zealot's mobility advantage in open spaces</p> </li> <li> <p>The Blessed's divine protection in team formations</p> </li> </ul> </li> <li> <p>Feedback Loop Management</p> <ul> <li> <p>Positive: Zealot's emotional intensity building momentum</p> </li> <li> <p>Negative: Crystal Vanguard's defense scaling with damage taken</p> </li> <li> <p>Balanced: Conjuror's echo timing requiring strategic planning</p> </li> </ul> </li> <li> <p>Resource Economy</p> <ul> <li> <p>Energy costs scale with ability impact:</p> <ul> <li> <p>Basic attack: 1 energy</p> </li> <li> <p>Special ability: 2-3 energy</p> </li> <li> <p>Ultimate ability: 4-5 energy</p> </li> </ul> </li> <li> <p>Cooldown balance:</p> <ul> <li> <p>Quick abilities: 1-2 turns</p> </li> <li> <p>Major abilities: 3-4 turns</p> </li> <li> <p>Ultimate abilities: 5+ turns</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"world_building/balance_and_meta/#class-balance","title":"Class Balance","text":""},{"location":"world_building/balance_and_meta/#offensive-classes","title":"Offensive Classes","text":"<ul> <li> <p>Primal Shifter: High mobility and versatility</p> </li> <li> <p>Conjuror: Strong magical damage and control</p> </li> <li> <p>Zealot: Physical damage and emotional empowerment</p> </li> <li> <p>Wraithwood Seer: Psychic damage and mind control</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#defensive-classes","title":"Defensive Classes","text":"<ul> <li> <p>Crystal Vanguard: High physical defense and team protection</p> </li> <li> <p>The Blessed: Support and healing focus</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#class-synergies","title":"Class Synergies","text":""},{"location":"world_building/balance_and_meta/#offensive-pairs","title":"Offensive Pairs","text":"<ul> <li> <p>Primal Shifter + Conjuror: Mobility and magical burst</p> </li> <li> <p>Zealot + Crystal Vanguard: Physical damage with protection</p> </li> <li> <p>Wraithwood Seer + Conjuror: Psychic control and magical burst</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#defensive-pairs","title":"Defensive Pairs","text":"<ul> <li> <p>Crystal Vanguard + The Blessed: Maximum team protection</p> </li> <li> <p>Wraithwood Seer + The Blessed: Vision and healing support</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#testing-and-analysis","title":"Testing and Analysis","text":""},{"location":"world_building/balance_and_meta/#data-collection","title":"Data Collection","text":""},{"location":"world_building/balance_and_meta/#granular-analysis","title":"Granular Analysis","text":"<ul> <li> <p>Win rates by class and matchup</p> </li> <li> <p>Individual ability usage stats</p> </li> <li> <p>Damage output metrics</p> </li> <li> <p>Resource efficiency tracking</p> </li> <li> <p>Player behavior patterns</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#statistical-methods","title":"Statistical Methods","text":"<ul> <li> <p>Ensure significant sample sizes</p> </li> <li> <p>A/B testing for specific changes</p> </li> <li> <p>Progression charts for rewards</p> </li> <li> <p>Heat maps for battle analysis</p> </li> <li> <p>Monte Carlo simulations for scenarios</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#ai-driven-testing","title":"AI-Driven Testing","text":""},{"location":"world_building/balance_and_meta/#adaptive-ai-system","title":"Adaptive AI System","text":"<ul> <li> <p>Adjusts to player skill</p> </li> <li> <p>Learns from player behavior</p> </li> <li> <p>Avoids perfect optimization</p> </li> <li> <p>Tests balance in various scenarios</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#ai-balance-tools","title":"AI Balance Tools","text":"<ul> <li> <p>Exploit detection</p> </li> <li> <p>Strategy validation</p> </li> <li> <p>Edge case testing</p> </li> <li> <p>Situational analysis</p> </li> <li> <p>Intransitive decision making</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#meta-game-elements","title":"Meta-Game Elements","text":""},{"location":"world_building/balance_and_meta/#economy-systems","title":"Economy Systems","text":""},{"location":"world_building/balance_and_meta/#resource-management","title":"Resource Management","text":"<ul> <li> <p>Health and Energy balance</p> </li> <li> <p>Special resource mechanics</p> </li> <li> <p>Item and equipment balance</p> </li> <li> <p>Trading considerations</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#economic-controls","title":"Economic Controls","text":"<ul> <li> <p>Open vs closed economies</p> </li> <li> <p>Inflation management</p> </li> <li> <p>Power creep prevention</p> </li> <li> <p>Trading limitations</p> </li> <li> <p>Gift mechanics</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#player-experience","title":"Player Experience","text":""},{"location":"world_building/balance_and_meta/#engagement-elements","title":"Engagement Elements","text":"<ul> <li> <p>Visual and audio feedback</p> </li> <li> <p>Clear ability impacts</p> </li> <li> <p>Satisfying interactions</p> </li> <li> <p>Strategic depth</p> </li> <li> <p>Learning curve</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#strategic-depth","title":"Strategic Depth","text":"<ul> <li> <p>Decision making complexity</p> </li> <li> <p>Build diversity</p> </li> <li> <p>Tactical options</p> </li> <li> <p>Risk vs reward</p> </li> <li> <p>Perfect imbalance</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#meta-evolution","title":"Meta Evolution","text":""},{"location":"world_building/balance_and_meta/#long-term-considerations","title":"Long-term Considerations","text":"<ul> <li> <p>Power creep management</p> </li> <li> <p>Content scaling</p> </li> <li> <p>Meta diversity</p> </li> <li> <p>Balance iterations</p> </li> <li> <p>Community feedback</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#cognitive-factors","title":"Cognitive Factors","text":"<ul> <li> <p>Player agency vs choice paralysis</p> </li> <li> <p>Cognitive bias awareness</p> </li> <li> <p>Strategic intuition</p> </li> <li> <p>Learning progression</p> </li> <li> <p>Skill expression</p> </li> </ul>"},{"location":"world_building/balance_and_meta/#implementation-process","title":"Implementation Process","text":""},{"location":"world_building/balance_and_meta/#continuous-balance","title":"Continuous Balance","text":"<ol> <li> <p>Regular Monitoring</p> <ul> <li> <p>Track win rates</p> </li> <li> <p>Analyze ability usage</p> </li> <li> <p>Monitor resource efficiency</p> </li> <li> <p>Observe player behavior</p> </li> </ul> </li> <li> <p>Testing Cycle</p> <ul> <li> <p>Identify issues</p> </li> <li> <p>Design solutions</p> </li> <li> <p>Test changes</p> </li> <li> <p>Gather feedback</p> </li> <li> <p>Implement updates</p> </li> </ul> </li> <li> <p>Documentation</p> <ul> <li> <p>Record changes</p> </li> <li> <p>Document rationale</p> </li> <li> <p>Update guidelines</p> </li> <li> <p>Track metrics</p> </li> <li> <p>Share insights</p> </li> </ul> </li> </ol>"},{"location":"world_building/balance_and_meta/#class-specific-balance","title":"Class-Specific Balance","text":"<p>See individual class documentation for detailed balance considerations:</p> <ul> <li> <p>Conjuror</p> </li> <li> <p>Crystal Vanguard</p> </li> <li> <p>Zealot</p> </li> <li> <p>The Blessed</p> </li> <li> <p>Primal Shifter</p> </li> <li> <p>Wraithwood Seer</p> </li> </ul>"},{"location":"world_building/classes/","title":"Character Classes","text":""},{"location":"world_building/classes/#overview","title":"Overview","text":"<p>This document details all character classes in The Path, including their abilities, stats, and progression paths.</p>"},{"location":"world_building/classes/#class-details","title":"Class Details","text":""},{"location":"world_building/classes/#primal-shifter","title":"Primal Shifter","text":"<p>Description: A druidic trickster who can tap into their primal nature to augment their body with aspects of different creatures, each augmentation bestowing unique abilities.</p> <p>Core Traits:</p> <ul> <li> <p>Strengths: High evasion, extremely versatile due to diverse augmentations</p> </li> <li> <p>Weaknesses: Low health and physical attack</p> </li> <li> <p>Inheritance: Layered Legacy - Retains some bonuses of the previous aspect upon changing, allowing strategic layering of augmentations</p> </li> </ul> <p>Stats:</p> Stat Value <p>| Health | 62 | | P.Attack | 55 | | P.Defense | 40 | | M.Attack | 62 | | M.Defense | 42 | | Speed | 61 |</p> <p>Progression:</p> <ol> <li> <p>Wolf Aspect: Augments the body with wolf-like features, increasing speed and evasion</p> </li> <li> <p>Snake Aspect: Gains snake-like attributes, allowing for poisonous attacks and increased evasion</p> </li> <li> <p>Buzzard Aspect: Develops buzzard-like traits, allowing for aerial attacks and increased sight</p> </li> <li> <p>Aloe Vera Aspect: Develops traits of the aloe vera plant, healing over time and providing beneficial auras</p> </li> <li>Doppelganger: Creates a duplicate of the Primal Shifter, effectively doubling evasion and abilities</li> </ol>"},{"location":"world_building/classes/#conjuror","title":"Conjuror","text":"<p>Description: A spiritualist who imbues objects with magical energy, communicates with spirits, creates potions, and wields elemental powers.</p> <p>Core Traits:</p> <ul> <li> <p>Strengths: High spiritual attack, versatile with both offensive and supportive abilities</p> </li> <li> <p>Weaknesses: Low physical power and health</p> </li> <li> <p>Inheritance: Echoing Resonance - Enhances spoken-word magic, causing spells to echo and repeat their effects after a delay</p> </li> </ul> <p>Stats:</p> Stat Value <p>| Health | 38 | | P.Attack | 60 | | P.Defense | 63 | | M.Attack | 65 | | M.Defense | 61 | | Speed | 41 |</p> <p>Progression:</p> <ol> <li>Spirit Embrace: Channels the energy of Obeni, enhancing healing and supportive abilities</li> <li>Illusion Weaver: Embraces Lingaki's essence, augmenting elusive and deceptive skills</li> <li>Harmony Aura: Unleashes Zuberi's influence, improving team coordination</li> <li>Potion of Simisola: Crafts potent potions with enhanced effects</li> <li>Awakening: Gains affiliation with conceptual entities (Love, Lies, Music, Drugs, Money)</li> </ol>"},{"location":"world_building/classes/#crystal-vanguard","title":"Crystal Vanguard","text":"<p>Description: A leader and guide who draws power from crystals, minerals, and metals, using them to forge weapons and armor.</p> <p>Core Traits:</p> <ul> <li> <p>Strengths: High health and physical defence, capable of both combat and supportive roles</p> </li> <li> <p>Weaknesses: Lower speed and spiritual attack</p> </li> <li> <p>Inheritance: Crystal Core - Absorbs damage dealt and converts it into stacking defence buffs</p> </li> </ul> <p>Stats:</p> Stat Value <p>| Health | 54 | | P.Attack | 39 | | P.Defense | 63 | | M.Attack | 62 | | M.Defense | 39 | | Speed | 58 |</p> <p>Progression:</p> <ol> <li>Crystal Blade: Creates a blade of hardened crystal for physical damage</li> <li>Mineral Armor: Forms dense mineral armor for increased defence</li> <li>Crystalize: Encases enemies in crystal, reducing speed and evasion</li> <li>Gem Resonance: Provides unique buffs based on gem type</li> <li>Golem Call: Summons sacred stone golems with unique bonuses</li> </ol>"},{"location":"world_building/classes/#zealot","title":"Zealot","text":"<p>Description: A warrior that values cathartic release and unbridled passion, channeling emotions into physical combat with dance-like precision.</p> <p>Core Traits:</p> <ul> <li> <p>Strengths: High physical attack, mobility, emotional empowerment</p> </li> <li> <p>Weaknesses: Low defence, susceptible to control effects</p> </li> <li> <p>Inheritance: Emotional Trance - Gains stacking bonuses as emotional intensity grows</p> </li> </ul> <p>Stats:</p> Stat Value <p>| Health | 45 | | P.Attack | 50 | | P.Defense | 52 | | M.Attack | 52 | | M.Defense | 52 | | Speed | 52 |</p> <p>Progression:</p> <ol> <li>Blade Dance: Increases physical attack and grants mobility</li> <li>Zealot's Fury: Enhances critical strikes and attack speed</li> <li>Emotional Release: Heals and empowers based on emotional intensity</li> <li>Whirling Defence: Creates a protective whirlwind</li> <li>Dance of the Ancestors: Channels ancestral power</li> </ol>"},{"location":"world_building/classes/#the-blessed","title":"The Blessed","text":"<p>Description: The chosen disciples of Luminara, providing support through blessings, divine shields, and sacred auras.</p> <p>Core Traits:</p> <ul> <li> <p>Strengths: Healing, support, buffs/debuffs</p> </li> <li> <p>Weaknesses: Low physical attack, dependent on allies</p> </li> <li> <p>Inheritance: Luminara's Embrace - Enhances healing and protection spells</p> </li> </ul> <p>Stats:</p> Stat Value <p>| Health | 54 | | P.Attack | 50 | | P.Defense | 51 | | M.Attack | 45 | | M.Defense | 50 | | Speed | 53 |</p> <p>Progression:</p> <ol> <li>Blessing of Light: Heals and enhances ally abilities</li> <li>Divine Shield: Grants protective shields</li> <li>Sacred Aura: Creates buff/debuff aura</li> <li>Luminara's Wrath: Curses enemies with weakening effects</li> <li>Embrace of the Divine: Enhances all support abilities</li> </ol>"},{"location":"world_building/classes/#wraithwood-seer","title":"Wraithwood Seer","text":"<p>Description: Hidden within the mystical Wraithwood Grove, known for their Extra-Sensory Perception (ESP) and psychic powers. They communicate through telepathy, see visions, and manipulate objects with their minds.</p> <p>Core Traits:</p> <ul> <li> <p>Strengths: Psychic attacks, visions, short-range control</p> </li> <li> <p>Weaknesses: Low physical defence, vulnerable to disruptions</p> </li> <li> <p>Inheritance: Cosmic Insight - Gains knowledge of hidden weaknesses, enhancing magical effectiveness</p> </li> </ul> <p>Stats:</p> Stat Value <p>| Health | 45 | | P.Attack | 40 | | P.Defense | 35 | | M.Attack | 70 | | M.Defense | 65 | | Speed | 55 |</p> <p>Progression:</p> <ol> <li>Psychic Bolt: Ranged magical attack that reveals weaknesses</li> <li>Vision of Fate: Grants foresight, enhancing evasion and anticipation</li> <li>Mind Control: Takes control of an enemy's mind for a short duration</li> <li>Telekinetic Barrier: Creates a psychic shield that absorbs damage</li> <li>Wraithwood Awakening: Unleashes the power of Wraithwood Grove</li> </ol>"},{"location":"world_building/classes/#mechanics","title":"Mechanics","text":""},{"location":"world_building/classes/#crystal-vanguard_1","title":"Crystal Vanguard","text":"<p>The Crystal Vanguard harnesses the power of crystal manipulation for both offense and defense.</p>"},{"location":"world_building/classes/#core-abilities","title":"Core Abilities","text":"<ul> <li> <p>Crystal Shield: Generate protective barriers</p> </li> <li> <p>Crystal Spike: Create and launch crystal projectiles</p> </li> <li> <p>Resonance Field: Area control through crystal harmonics</p> </li> </ul>"},{"location":"world_building/classes/#resource-management","title":"Resource Management","text":"<ul> <li> <p>Crystal Energy: Primary resource for abilities</p> </li> <li> <p>Resonance Points: Secondary resource for enhanced effects</p> </li> </ul>"},{"location":"world_building/classes/#wraithwood-seer_1","title":"Wraithwood Seer","text":"<p>Masters of natural energy who can commune with the ancient spirits of the Wraithwood.</p>"},{"location":"world_building/classes/#core-abilities_1","title":"Core Abilities","text":"<ul> <li> <p>Spirit Sight: Reveal hidden elements</p> </li> <li> <p>Nature's Grasp: Control vegetation</p> </li> <li> <p>Spiritual Convergence: Channel spirit energy</p> </li> </ul>"},{"location":"world_building/classes/#resource-management_1","title":"Resource Management","text":"<ul> <li> <p>Spirit Energy: Primary resource</p> </li> <li> <p>Wraithwood Essence: Builds up during spirit communion</p> </li> </ul>"},{"location":"world_building/classes/#primal-shifter_1","title":"Primal Shifter","text":"<p>Adaptable warriors who can transform between different primal forms.</p>"},{"location":"world_building/classes/#core-abilities_2","title":"Core Abilities","text":"<ul> <li> <p>Primal Shift: Transform between forms</p> </li> <li> <p>Bestial Surge: Enhanced mobility</p> </li> <li> <p>Feral Strike: Form-specific attacks</p> </li> </ul>"},{"location":"world_building/classes/#resource-management_2","title":"Resource Management","text":"<ul> <li> <p>Primal Energy: Shared resource pool</p> </li> <li> <p>Form Timer: Transformation duration</p> </li> </ul>"},{"location":"world_building/classes/#balancing","title":"Balancing","text":""},{"location":"world_building/classes/#class-interactions","title":"Class Interactions","text":"<ol> <li>Crystal Vanguard vs Wraithwood Seer</li> <li> <p>Vanguard's crystals can disrupt spirit communion</p> </li> <li> <p>Seer's nature control can block crystal formation</p> </li> <li> <p>Wraithwood Seer vs Primal Shifter</p> </li> <li> <p>Spirit sight reveals shifter's true form</p> </li> <li> <p>Primal forms can resist spirit control</p> </li> <li> <p>Primal Shifter vs Crystal Vanguard</p> </li> <li> <p>Different forms have varying crystal resistance</p> </li> <li> <p>Crystal barriers can limit transformation utility</p> </li> </ol>"},{"location":"world_building/classes/#power-distribution","title":"Power Distribution","text":"<p>Each class follows these power allocation rules:</p> <ol> <li>Offensive Capabilities (33%)</li> <li> <p>Direct damage</p> </li> <li> <p>Control effects</p> </li> <li> <p>Utility skills</p> </li> <li> <p>Defensive Options (33%)</p> </li> <li> <p>Damage mitigation</p> </li> <li> <p>Escape mechanics</p> </li> <li> <p>Resource regeneration</p> </li> <li> <p>Utility Features (33%)</p> </li> <li> <p>Movement abilities</p> </li> <li> <p>Resource generation</p> </li> <li> <p>Team support</p> </li> </ol>"},{"location":"world_building/classes/#balance-considerations","title":"Balance Considerations","text":"<ol> <li>Resource Management</li> <li> <p>All classes have primary and secondary resources</p> </li> <li> <p>Resource generation rates are standardized</p> </li> <li> <p>Maximum resource pools are balanced</p> </li> <li> <p>Ability Timing</p> </li> <li> <p>Core abilities have similar cooldowns</p> </li> <li> <p>Ultimate abilities charge at consistent rates</p> </li> <li> <p>Crowd control durations are normalized</p> </li> <li> <p>Counter Play</p> </li> <li> <p>Each class has clear strengths and weaknesses</p> </li> <li> <p>All powerful abilities have telegraphed windups</p> </li> <li> <p>Resource depletion creates vulnerability windows</p> </li> </ol>"},{"location":"world_building/classes/#class-comparisons","title":"Class Comparisons","text":""},{"location":"world_building/classes/#stat-distribution","title":"Stat Distribution","text":"Class Health Physical Magical Speed Total <p>| Primal Shifter | 62 | 47.5 | 52 | 61 | 322 | | Conjuror | 38 | 61.5 | 63 | 41 | 328 | | Crystal Vanguard | 54 | 51 | 50.5 | 58 | 315 | | Zealot | 45 | 51 | 52 | 52 | 303 | | The Blessed | 54 | 50.5 | 47.5 | 53 | 303 | | Wraithwood Seer | 45 | 37.5 | 67.5 | 55 | 310 |</p> <p>Note: Physical/Magical scores are averages of respective Attack/Defense stats</p>"},{"location":"world_building/classes/#role-analysis","title":"Role Analysis","text":"<ul> <li> <p>Tank: Crystal Vanguard (high P.Defense), Zealot (balanced defenses)</p> </li> <li> <p>Damage: Conjuror (highest M.Attack), Wraithwood Seer (highest magical damage), Primal Shifter (balanced damage)</p> </li> <li> <p>Support: The Blessed (balanced stats), Crystal Vanguard (control)</p> </li> <li> <p>Utility: Primal Shifter (high mobility), Wraithwood Seer (control and vision), Zealot (consistent stats)</p> </li> </ul>"},{"location":"world_building/classes/#team-compositions","title":"Team Compositions","text":"<ul> <li> <p>Balanced: Crystal Vanguard + Conjuror + The Blessed</p> </li> <li> <p>Aggressive: Zealot + Primal Shifter + Conjuror</p> </li> <li> <p>Defensive: Crystal Vanguard + The Blessed + Conjuror</p> </li> <li> <p>Control: Crystal Vanguard + Wraithwood Seer + The Blessed</p> </li> <li> <p>Psychic: Wraithwood Seer + Conjuror + Primal Shifter</p> </li> </ul>"},{"location":"world_building/foundations/","title":"World Building Foundations","text":""},{"location":"world_building/foundations/#overview","title":"Overview","text":"<p>The Path creates a rich digital fantasy world that draws from the deep wells of Hoodoo, Conjure, and Rootwork traditions. This document outlines our approach to world building and the core elements that shape our universe.</p>"},{"location":"world_building/foundations/#cultural-foundations","title":"Cultural Foundations","text":""},{"location":"world_building/foundations/#spiritual-traditions","title":"Spiritual Traditions","text":"<ul> <li> <p>Hoodoo: African American folk magic and spiritual practices</p> </li> <li> <p>Conjure: Traditional magical and healing practices</p> </li> <li> <p>Rootwork: Natural healing and spiritual work using roots and herbs</p> </li> </ul>"},{"location":"world_building/foundations/#historical-context","title":"Historical Context","text":"<ul> <li> <p>African traditions and beliefs</p> </li> <li> <p>Indigenous American influences</p> </li> <li> <p>European folk practices</p> </li> <li> <p>Caribbean spiritual elements</p> </li> </ul>"},{"location":"world_building/foundations/#world-elements","title":"World Elements","text":""},{"location":"world_building/foundations/#the-path","title":"The Path","text":"<ul> <li> <p>A metaphysical journey of growth and discovery</p> </li> <li> <p>Connection between physical and spiritual realms</p> </li> <li> <p>Ancient knowledge passed through generations</p> </li> </ul>"},{"location":"world_building/foundations/#locations","title":"Locations","text":"<ul> <li> <p>Sacred Grounds: Places of power and ritual</p> </li> <li> <p>Natural Spaces: Woods, rivers, crossroads</p> </li> <li> <p>Urban Elements: Modern contexts and adaptations</p> </li> </ul>"},{"location":"world_building/foundations/#characters","title":"Characters","text":""},{"location":"world_building/foundations/#character-origins","title":"Character Origins","text":"<ul> <li> <p>Family traditions and lineages</p> </li> <li> <p>Spiritual awakening and calling</p> </li> <li> <p>Mentorship and guidance</p> </li> </ul>"},{"location":"world_building/foundations/#character-classes","title":"Character Classes","text":"<ul> <li> <p>Rooted in traditional roles and practices</p> </li> <li> <p>Adapted for modern context</p> </li> <li> <p>Balanced for gameplay</p> </li> </ul>"},{"location":"world_building/foundations/#design-pillars","title":"Design Pillars","text":""},{"location":"world_building/foundations/#authenticity","title":"Authenticity","text":"<ul> <li> <p>Respectful representation of traditions</p> </li> <li> <p>Accurate cultural references</p> </li> <li> <p>Community-informed development</p> </li> </ul>"},{"location":"world_building/foundations/#accessibility","title":"Accessibility","text":"<ul> <li> <p>Clear introduction to concepts</p> </li> <li> <p>Gradual learning curve</p> </li> <li> <p>Modern interpretations</p> </li> </ul>"},{"location":"world_building/foundations/#engagement","title":"Engagement","text":"<ul> <li> <p>Interactive learning</p> </li> <li> <p>Dynamic storytelling</p> </li> <li> <p>Personal connection</p> </li> </ul>"},{"location":"world_building/foundations/#implementation","title":"Implementation","text":""},{"location":"world_building/foundations/#visual-design","title":"Visual Design","text":"<ul> <li> <p>Symbolic elements</p> </li> <li> <p>Natural materials</p> </li> <li> <p>Traditional colors</p> </li> <li> <p>Modern aesthetics</p> </li> </ul>"},{"location":"world_building/foundations/#narrative-elements","title":"Narrative Elements","text":"<ul> <li> <p>Personal journeys</p> </li> <li> <p>Community connections</p> </li> <li> <p>Historical ties</p> </li> <li> <p>Modern challenges</p> </li> </ul>"},{"location":"world_building/foundations/#gameplay-integration","title":"Gameplay Integration","text":"<ul> <li> <p>Ritual mechanics</p> </li> <li> <p>Natural elements</p> </li> <li> <p>Traditional tools</p> </li> <li> <p>Spiritual growth</p> </li> </ul>"},{"location":"world_building/foundations/#development-guidelines","title":"Development Guidelines","text":""},{"location":"world_building/foundations/#research","title":"Research","text":"<ul> <li> <p>Historical documentation</p> </li> <li> <p>Community consultation</p> </li> <li> <p>Contemporary practices</p> </li> <li> <p>Academic sources</p> </li> </ul>"},{"location":"world_building/foundations/#representation","title":"Representation","text":"<ul> <li> <p>Respectful adaptation</p> </li> <li> <p>Cultural accuracy</p> </li> <li> <p>Modern relevance</p> </li> <li> <p>Community feedback</p> </li> </ul>"},{"location":"world_building/foundations/#balance","title":"Balance","text":"<ul> <li> <p>Gameplay mechanics</p> </li> <li> <p>Cultural elements</p> </li> <li> <p>Player engagement</p> </li> <li> <p>Educational value</p> </li> </ul>"},{"location":"world_building/mythology-folklore/","title":"African-American Spiritual Traditions","text":"<p>Cultural Sensitivity Note</p> <p>This article discusses living spiritual traditions that deserve respect and understanding. Many aspects of these practices remain private within practicing communities.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#overview","title":"Overview","text":"<p>The spiritual traditions of Hoodoo, Louisiana Voodoo, Rootwork, and Conjure represent distinct yet interrelated African American religious and magical practices that developed in the American South. These traditions emerged from the convergence of various African spiritual systems, particularly those from West and Central Africa, along with influences from Native American healing practices and European folk magic.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#terminology","title":"Terminology","text":"<ol> <li> <p>Hoodoo: A system of African American folk magic that emerged in the American South, drawing heavily from Central African religious traditions</p> </li> <li> <p>Louisiana Voodoo: Also known as New Orleans Voodoo, a distinct African American religion that developed along the Mississippi River valley</p> </li> <li> <p>Rootwork: A practice focusing on the use of roots and herbs for spiritual and healing purposes</p> </li> <li> <p>Conjure: A term often used interchangeably with Hoodoo, referring to spiritual work and folk magic practices</p> </li> </ol>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#historical-development","title":"Historical Development","text":"","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#origins-and-evolution","title":"Origins and Evolution","text":"<ol> <li> <p>African Roots</p> <ul> <li> <p>Primary influences from West Central African and Senegambian traditions</p> </li> <li> <p>Incorporation of Yoruba and Kongo spiritual practices</p> </li> <li> <p>Preservation of African cosmological concepts</p> </li> </ul> </li> <li> <p>Colonial Period</p> <ul> <li> <p>Adaptation of practices during slavery</p> </li> <li> <p>Integration with Catholic symbolism</p> </li> <li> <p>Development of distinct regional variations</p> </li> </ul> </li> <li> <p>Post-Emancipation</p> <ul> <li> <p>Emergence of public practitioners</p> </li> <li> <p>Formation of spiritual churches</p> </li> <li> <p>Continuation of private family traditions</p> </li> </ul> </li> </ol> <p>Historical Context</p> <p>These traditions developed as ways to preserve African spiritual knowledge while adapting to the harsh realities of slavery and its aftermath in the American South.</p> <p>Understanding the Traditions</p> <p>While often conflated in popular media, Hoodoo, Voodoo, Rootwork, and Conjure are distinct yet interrelated traditions. Voodoo is a formal religion with organized clergy and congregations, particularly strong in New Orleans, while Hoodoo, Rootwork, and Conjure are folk practices focused on practical problem-solving through spiritual means.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#beliefs-and-practices","title":"Beliefs and Practices","text":"","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#core-concepts","title":"Core Concepts","text":"<ol> <li> <p>Divine Forces</p> <ul> <li> <p>Supreme Creator (influenced by both African and Christian concepts)</p> </li> <li> <p>Nature spirits and ancestral forces</p> </li> <li> <p>Catholic saints (often syncretized with African deities)</p> </li> </ul> </li> <li> <p>Spiritual Power</p> <ul> <li> <p>Personal spiritual force</p> </li> <li> <p>Connection to ancestors</p> </li> <li> <p>Relationship with nature</p> </li> </ul> </li> <li> <p>Sacred Spaces</p> <ul> <li> <p>Crossroads as spiritual intersections</p> </li> <li> <p>Rivers and bodies of water</p> </li> <li> <p>Graveyards and burial grounds</p> </li> </ul> </li> </ol> <p>Syncretism</p> <p>These traditions often blend African spiritual concepts with Catholic saints and Native American practices, creating unique systems of belief and practice.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#regional-traditions","title":"Regional Traditions","text":"","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#louisiana-voodoo","title":"Louisiana Voodoo","text":"<ol> <li> <p>Religious Structure</p> <ul> <li> <p>Organized clergy and congregations</p> </li> <li> <p>Formal rituals and ceremonies</p> </li> <li> <p>Integration with Catholic practices</p> </li> </ul> </li> <li> <p>Key Practices</p> <ul> <li> <p>Spirit veneration and possession</p> </li> <li> <p>Creation of gris-gris (protective amulets)</p> </li> <li> <p>Communal ceremonies and festivals</p> </li> </ul> </li> <li> <p>Historical Figures</p> <ul> <li> <p>Marie Laveau (famous Voodoo Queen)</p> </li> <li> <p>Doctor John (influential practitioner)</p> </li> <li> <p>Other notable priests and priestesses</p> </li> </ul> </li> </ol>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#lowcountry-traditions","title":"Lowcountry Traditions","text":"<ol> <li> <p>Gullah-Geechee Influence</p> <ul> <li> <p>Preserved African practices</p> </li> <li> <p>Unique linguistic traditions</p> </li> <li> <p>Isolated cultural development</p> </li> </ul> </li> <li> <p>Root Doctors</p> <ul> <li> <p>Specialized botanical knowledge</p> </li> <li> <p>Traditional healing practices</p> </li> <li> <p>Spiritual counseling</p> </li> </ul> </li> </ol> <p>Regional Adaptation</p> <p>Each region developed its own distinctive practices based on local conditions, available materials, and specific cultural influences.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#sacred-practices","title":"Sacred Practices","text":"<p>African American spiritual traditions combine West and Central African religious concepts with elements of Christianity and Native American traditions. These practices developed through centuries of cultural preservation and adaptation, serving both spiritual and practical needs of communities facing oppression and hardship.</p> <p>These traditions are complex spiritual systems that continue to provide meaning, healing, and protection to their practitioners. They played crucial roles in maintaining community solidarity, preserving cultural identity, and providing mechanisms for addressing both spiritual and material concerns.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#the-crossroads-tradition","title":"The Crossroads Tradition","text":"<ol> <li> <p>Spiritual Significance</p> <ul> <li> <p>Meeting point between physical and spiritual realms</p> </li> <li> <p>Location for divine communication</p> </li> <li> <p>Site of spiritual transformation</p> </li> <li> <p>Place of learning and initiation</p> </li> </ul> </li> <li> <p>Traditional Practices</p> <ul> <li> <p>Midnight ceremonies</p> </li> <li> <p>Offering rituals</p> </li> <li> <p>Spiritual cleansing</p> </li> <li> <p>Teaching and initiation</p> </li> </ul> </li> <li> <p>African Origins</p> <ul> <li> <p>Yoruba concepts of spiritual crossings</p> </li> <li> <p>Kongo cosmogram influences</p> </li> <li> <p>West African ritual traditions</p> </li> </ul> </li> </ol> <p>Historical Context</p> <p>Crossroads gained additional significance during slavery as safe spaces for practicing traditional spirituality away from surveillance. The tradition combines West and Central African concepts of spiritual intersections with practical necessity.</p> <p>Sacred Knowledge</p> <p>Many specific details of crossroads practices remain private within practicing communities and should not be shared publicly.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#sacred-tools-and-materials","title":"Sacred Tools and Materials","text":"<p>The material culture of African American spiritual traditions reflects both the ingenuity of practitioners and their strong connection to the natural world. Practitioners historically worked with whatever materials were available to them, transforming ordinary items into powerful spiritual tools through proper preparation and ritual use.</p> <p>Practitioners developed extensive knowledge of local plants and materials, creating a sophisticated system of correspondence between natural items and spiritual purposes. This knowledge was carefully preserved and passed down through generations, adapting to changing circumstances while maintaining core principles.</p> <ol> <li> <p>Natural Materials</p> <ul> <li> <p>Roots and herbs for healing</p> </li> <li> <p>Minerals and crystals</p> </li> <li> <p>Sacred woods</p> </li> <li> <p>Natural waters</p> </li> </ul> </li> <li> <p>Ritual Tools</p> <ul> <li> <p>Candles and lights</p> </li> <li> <p>Oils and incense</p> </li> <li> <p>Sacred vessels</p> </li> <li> <p>Ritual implements</p> </li> </ul> </li> <li> <p>Personal Items</p> <ul> <li> <p>Mojo bags and pouches</p> </li> <li> <p>Protective amulets</p> </li> <li> <p>Prayer beads</p> </li> <li> <p>Sacred cloths</p> </li> </ul> </li> </ol> <p>Regional Variations</p> <p>Different regions developed their own specific uses for local materials. For example, coastal practitioners might use seashells and ocean water, while those inland might work more with river rocks and spring water.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#spiritual-forces","title":"Spiritual Forces","text":"<p>The cosmology of African American spiritual traditions presents a complex understanding of divine and spiritual forces. These traditions maintain a sophisticated hierarchy of spiritual entities, from the supreme creator to various spirits and ancestral forces. This spiritual framework reflects both African religious concepts and adaptations made during the colonial and post-colonial periods.</p> <p>These traditions recognize multiple levels of spiritual reality, with various forces and entities capable of influencing the material world. This worldview emphasizes the interconnectedness of all things and the importance of maintaining proper relationships with spiritual forces through ritual and respect.</p> <ol> <li> <p>Divine Hierarchy</p> <ul> <li> <p>Supreme Creator (Bondye/God)</p> </li> <li> <p>Lesser deities and spirits</p> </li> <li> <p>Ancestral spirits</p> </li> <li> <p>Nature spirits</p> </li> </ul> </li> <li> <p>Types of Spirits</p> <ul> <li> <p>Crossroads guardians</p> </li> <li> <p>Water spirits</p> </li> <li> <p>Forest spirits</p> </li> <li> <p>Ancestral guides</p> </li> </ul> </li> <li> <p>Spirit Communication</p> <ul> <li> <p>Prayer and meditation</p> </li> <li> <p>Dreams and visions</p> </li> <li> <p>Divination practices</p> </li> <li> <p>Spirit possession (in some traditions)</p> </li> </ul> </li> </ol> <p>Religious Syncretism</p> <p>Many spirits in these traditions have become associated with Catholic saints, creating a unique blend of African and Christian religious elements. This syncretism helped preserve African spiritual concepts during times of religious oppression.</p> <p>Cultural Sensitivity</p> <p>These spirits are viewed as real divine forces by practitioners, not merely as folklore or superstition. Their names and specific attributes are often kept private within practicing communities.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#traditional-methods","title":"Traditional Methods","text":"<ol> <li> <p>Cleansing and Protection</p> <ul> <li> <p>Ritual baths (prepared with specific herbs)</p> </li> <li> <p>Smoke cleansing ceremonies</p> </li> <li> <p>Home protection rituals</p> </li> <li> <p>Personal cleansing practices</p> </li> </ul> </li> <li> <p>Divination Methods</p> <ul> <li> <p>Card reading</p> </li> <li> <p>Bone reading</p> </li> <li> <p>Dream interpretation</p> </li> <li> <p>Natural signs and omens</p> </li> </ul> </li> <li> <p>Healing Practices</p> <ul> <li> <p>Herbal remedies</p> </li> <li> <p>Spiritual cleansing</p> </li> <li> <p>Prayer and meditation</p> </li> <li> <p>Energy work</p> </li> </ul> </li> </ol> <p>Knowledge Transmission</p> <p>Traditional knowledge is passed down through:</p> <ol> <li>Family lineages</li> <li> <p>Mentor-student relationships</p> </li> <li> <p>Oral traditions</p> </li> <li>Practical apprenticeships</li> </ol>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#protection-and-healing-traditions","title":"Protection and Healing Traditions","text":"<p>Protection and healing form the cornerstone of African American spiritual traditions, reflecting both practical necessity and significant spiritual wisdom. These practices evolved during times of extreme hardship, providing both physical and spiritual shelter for communities under threat. The sophisticated methods developed during this period continue to serve practitioners today, adapted to address modern challenges while maintaining traditional principles.</p> <p>These traditions recognize the interconnected nature of physical, spiritual, and emotional well-being. Practitioners developed comprehensive systems of healing that addressed both visible and invisible causes of affliction, creating holistic approaches to wellness that predated modern integrative medicine by centuries.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#protective-practices","title":"Protective Practices","text":"<p>Protective practices in African American spiritual traditions include a wide range of methods, from the preparation of protective charms to the establishment of spiritual barriers around homes and communities. These practices combine material components with spiritual work, creating layered systems of protection that address both everyday and supernatural threats.</p> <ol> <li> <p>Personal Protection</p> <ul> <li> <p>Mojo bags and gris-gris</p> </li> <li> <p>Carried amulets and charms</p> </li> <li> <p>Personal rituals and prayers</p> </li> <li> <p>Spiritual baths and cleansings</p> </li> </ul> </li> <li> <p>Home Protection</p> <ul> <li> <p>Threshold protections</p> </li> <li> <p>Corner and doorway rituals</p> </li> <li> <p>Window and chimney guards</p> </li> <li> <p>Yard and garden work</p> </li> </ul> </li> <li> <p>Community Protection</p> <ul> <li> <p>Group ceremonies</p> </li> <li> <p>Communal prayers</p> </li> <li> <p>Protective rituals</p> </li> <li> <p>Blessing ceremonies</p> </li> </ul> </li> </ol> <p>Historical Context</p> <p>These protective traditions developed during times of severe oppression, providing both spiritual and practical protection for individuals and communities.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#healing-practices","title":"Healing Practices","text":"<ol> <li> <p>Spiritual Cleansing</p> <ul> <li> <p>Ritual baths with specific herbs</p> </li> <li> <p>Smoke cleansing ceremonies</p> </li> <li> <p>Prayer and meditation</p> </li> <li> <p>Energy clearing methods</p> </li> </ul> </li> <li> <p>Physical Healing</p> <ul> <li> <p>Herbal remedies and tonics</p> </li> <li> <p>Poultices and compresses</p> </li> <li> <p>Healing prayers and chants</p> </li> <li> <p>Traditional bodywork</p> </li> </ul> </li> <li> <p>Emotional Healing</p> <ul> <li> <p>Counseling and guidance</p> </li> <li> <p>Dream interpretation</p> </li> <li> <p>Spirit communication</p> </li> <li> <p>Ancestor work</p> </li> </ul> </li> </ol> <p>Medical Note</p> <p>Traditional healing practices often work in conjunction with modern medicine. They should not be viewed as replacements for professional medical care.</p> <p>Regional Variations</p> <p>Healing methods vary by region and community, with practitioners adapting their work to local plants and traditions.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#sacred-times-and-places","title":"Sacred Times and Places","text":"<p>The understanding of sacred time and space in African American spiritual traditions reflects significant philosophical and practical wisdom. These traditions recognize certain times and places as points of increased spiritual potency, where the barriers between the material and spiritual worlds become more permeable. This knowledge, preserved through generations, guides practitioners in choosing optimal moments and locations for spiritual work.</p> <p>This sophisticated understanding of sacred geography and temporal power draws from both African cosmological concepts and practical adaptations made during slavery and its aftermath. These traditions recognize that spiritual power flows in cycles, both daily and seasonal, and that certain locations serve as natural conduits for divine energy.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#sacred-times","title":"Sacred Times","text":"<ol> <li> <p>Daily Hours</p> <ul> <li> <p>Dawn (awakening and renewal)</p> </li> <li> <p>Noon (peak spiritual power)</p> </li> <li> <p>Dusk (transitions and closing)</p> </li> <li> <p>Midnight (deepest spiritual work)</p> </li> </ul> </li> <li> <p>Power Times</p> <ul> <li> <p>Between times (twilight)</p> </li> <li> <p>Planetary hours</p> </li> <li> <p>Moon phases</p> </li> <li> <p>Seasonal transitions</p> </li> </ul> </li> <li> <p>Traditional Observances</p> <ul> <li> <p>Community gatherings</p> </li> <li> <p>Personal devotions</p> </li> <li> <p>Ancestral commemorations</p> </li> <li> <p>Festival days</p> </li> </ul> </li> </ol>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#sacred-locations","title":"Sacred Locations","text":"<ol> <li> <p>Natural Places</p> <ul> <li> <p>Rivers and streams</p> </li> <li> <p>Ancient trees and groves</p> </li> <li> <p>Mountains and hills</p> </li> <li> <p>Coastal waters</p> </li> </ul> </li> <li> <p>Built Environments</p> <ul> <li> <p>Churches and temples</p> </li> <li> <p>Crossroads and intersections</p> </li> <li> <p>Thresholds and doorways</p> </li> <li> <p>Community gathering spaces</p> </li> </ul> </li> <li> <p>Spiritual Landmarks</p> <ul> <li> <p>Ancestral grounds</p> </li> <li> <p>Historical sites</p> </li> <li> <p>Places of power</p> </li> <li> <p>Traditional territories</p> </li> </ul> </li> </ol> <p>Local Adaptations</p> <p>Sacred spaces reflect both natural geography and community history. Urban practitioners often adapt traditional locations while maintaining spiritual principles.</p> <p>Time and Place</p> <p>The combination of proper timing and location significantly impacts spiritual work. Traditional practitioners carefully consider both elements.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#learning-and-initiation","title":"Learning and Initiation","text":"<p>The transmission of spiritual knowledge in African American traditions follows carefully structured protocols that ensure both the preservation of sacred wisdom and its appropriate use. These educational systems combine formal instruction with experiential learning, creating a comprehensive approach to spiritual education that develops both knowledge and wisdom.</p> <p>These traditions maintain their integrity through careful selection and training of new practitioners. The process of learning extends beyond simple information transfer, involving character development, ethical training, and the gradual awakening of spiritual abilities. This systematic approach ensures that knowledge is not only preserved but properly understood and respectfully applied.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#traditional-knowledge-transmission","title":"Traditional Knowledge Transmission","text":"<ol> <li> <p>Teacher-Student Relationships</p> <ul> <li> <p>Careful student selection</p> </li> <li> <p>Observation periods</p> </li> <li> <p>Gradual knowledge sharing</p> </li> <li> <p>Ethical guidelines</p> </li> </ul> </li> <li> <p>Family Traditions</p> <ul> <li> <p>Generational knowledge</p> </li> <li> <p>Family-specific practices</p> </li> <li> <p>Inherited responsibilities</p> </li> <li> <p>Ancestral connections</p> </li> </ul> </li> <li> <p>Community Learning</p> <ul> <li> <p>Group ceremonies</p> </li> <li> <p>Shared experiences</p> </li> <li> <p>Collective wisdom</p> </li> <li> <p>Cultural preservation</p> </li> </ul> </li> </ol>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#initiation-practices","title":"Initiation Practices","text":"<ol> <li> <p>Preparation Phase</p> <ul> <li> <p>Initial testing</p> </li> <li> <p>Basic teachings</p> </li> <li> <p>Character assessment</p> </li> <li> <p>Commitment evaluation</p> </li> </ul> </li> <li> <p>Learning Process</p> <ul> <li> <p>Progressive teachings</p> </li> <li> <p>Practical experience</p> </li> <li> <p>Spiritual development</p> </li> <li> <p>Traditional protocols</p> </li> </ul> </li> <li> <p>Final Initiation</p> <ul> <li> <p>Sacred ceremonies</p> </li> <li> <p>Knowledge confirmation</p> </li> <li> <p>Community recognition</p> </li> <li> <p>Spiritual empowerment</p> </li> </ul> </li> </ol> <p>Sacred Knowledge</p> <p>Many aspects of initiation and advanced teachings are kept private within practicing communities and should not be shared publicly.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#oral-traditions-and-stories","title":"Oral Traditions and Stories","text":"<p>Oral traditions serve as the primary vehicle for transmitting spiritual knowledge and cultural wisdom in African American spiritual traditions. These oral traditions preserved practical spiritual knowledge, historical memory, and cultural identity during periods when written documentation was either forbidden or dangerous. The stories, songs, and sayings contain layers of meaning, often incorporating coded information about spiritual practices, community history, and survival strategies.</p> <p>These oral traditions demonstrate remarkable resilience and adaptability, evolving to address changing circumstances while maintaining core spiritual principles. The sophisticated use of metaphor, symbolism, and multiple levels of meaning reflects both the wisdom of their creators and the necessity of preserving knowledge in forms that could survive oppression.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#teaching-stories","title":"Teaching Stories","text":"<p>Teaching stories in these traditions serve multiple purposes, functioning as both educational tools and repositories of spiritual wisdom. These narratives often weave together practical instruction, moral guidance, and historical memory, creating multi-layered texts that reward repeated study and reflection.</p> <ol> <li> <p>Moral Teachings</p> <ul> <li> <p>Consequence narratives</p> </li> <li> <p>Spiritual respect lessons</p> </li> <li> <p>Harmony guidelines</p> </li> <li> <p>Traditional values</p> </li> </ul> </li> <li> <p>Historical Tales</p> <ul> <li> <p>Community histories</p> </li> <li> <p>Ancestor stories</p> </li> <li> <p>Cultural preservation</p> </li> <li> <p>Traditional methods</p> </li> </ul> </li> <li> <p>Sacred Histories</p> <ul> <li> <p>Community lineages</p> </li> <li> <p>Notable practitioners</p> </li> <li> <p>Spiritual encounters</p> </li> <li> <p>Traditional teachings</p> </li> </ul> </li> </ol> <p>Preservation</p> <p>These stories were traditionally preserved through oral transmission, often encoded in songs, prayers, and ritual practices to ensure their survival through generations.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#regional-variations","title":"Regional Variations","text":"<p>African American spiritual traditions demonstrate significant regional diversity, reflecting both the different African cultural influences in various areas and local environmental and social conditions. Practitioners adapted their work to local plants, materials, and conditions, creating distinct regional variations of these traditions.</p> <p>These regional differences extend beyond material adaptations to include unique ritual forms, specific spiritual entities, and particular methods of practice. These variations demonstrate both the adaptability of these traditions and their strong connection to specific places and communities.</p> <ol> <li> <p>Mississippi Delta Traditions</p> <ul> <li> <p>River-based practices</p> </li> <li> <p>Cotton field workings</p> </li> <li> <p>Blues music integration</p> </li> <li> <p>Local plant traditions</p> </li> </ul> </li> <li> <p>Coastal Traditions</p> <ul> <li> <p>Sea island practices</p> </li> <li> <p>Ocean-based rituals</p> </li> <li> <p>Shell and sand work</p> </li> <li> <p>Maritime customs</p> </li> </ul> </li> <li> <p>Urban Adaptations</p> <ul> <li> <p>City-based practices</p> </li> <li> <p>Modern materials</p> </li> <li> <p>Adapted sacred spaces</p> </li> <li> <p>Contemporary methods</p> </li> </ul> </li> </ol>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#cultural-impact-and-legacy","title":"Cultural Impact and Legacy","text":"<p>The influence of African American spiritual traditions extends far beyond their immediate religious context, shaping American culture in significant and lasting ways. These traditions have influenced American music, art, literature, and social movements, contributing to the broader cultural landscape of the United States.</p> <p>These traditions provided communities with resources for resistance, healing, and cultural preservation during periods of extreme oppression. Their impact continues today, offering insights into community building, holistic healing, and spiritual development that remain relevant in contemporary contexts.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#historical-influence","title":"Historical Influence","text":"<ol> <li> <p>Community Functions</p> <ul> <li> <p>Social healing and support</p> </li> <li> <p>Conflict resolution</p> </li> <li> <p>Protection of communities</p> </li> <li> <p>Preservation of traditions</p> </li> </ul> </li> <li> <p>Cultural Expressions</p> <ul> <li> <p>Music (especially blues and spirituals)</p> </li> <li> <p>Dance and movement</p> </li> <li> <p>Visual arts and symbols</p> </li> <li> <p>Oral traditions</p> </li> </ul> </li> </ol>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#contemporary-significance","title":"Contemporary Significance","text":"<ol> <li> <p>Modern Adaptations</p> <ul> <li> <p>Urban practice methods</p> </li> <li> <p>Integration with modern healthcare</p> </li> <li> <p>Use of new materials</p> </li> <li> <p>Online communities</p> </li> </ul> </li> <li> <p>Cultural Preservation</p> <ul> <li> <p>Traditional teaching methods</p> </li> <li> <p>Family lineages</p> </li> <li> <p>Community education</p> </li> <li> <p>Academic documentation</p> </li> </ul> </li> </ol> <p>Living Tradition</p> <p>These practices continue to evolve and adapt while maintaining their core spiritual and cultural values. Modern practitioners often balance traditional methods with contemporary needs.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#references-and-further-reading","title":"References and Further Reading","text":"<ol> <li> <p>Academic Sources</p> <ul> <li> <p>Studies of African American spirituality</p> </li> <li> <p>Historical documentation</p> </li> <li> <p>Anthropological research</p> </li> <li> <p>Cultural preservation efforts</p> </li> </ul> </li> <li> <p>Community Resources</p> <ul> <li> <p>Oral histories</p> </li> <li> <p>Traditional teachings</p> </li> <li> <p>Cultural centers</p> </li> <li> <p>Educational programs</p> </li> </ul> </li> </ol>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#ethical-considerations","title":"Ethical Considerations","text":"<p>The documentation and discussion of African American spiritual traditions require careful attention to ethical considerations and cultural sensitivity. These are living traditions that continue to serve vital roles in contemporary communities. The responsibility to respect these traditions extends beyond academic interest to include issues of cultural preservation, community autonomy, and spiritual authenticity.</p> <p>Historically, these traditions have often been misrepresented, appropriated, or exploited by outsiders. This history creates a special obligation for researchers, practitioners, and students to approach these traditions with respect, humility, and awareness of their continuing significance to practicing communities.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#respecting-traditions","title":"Respecting Traditions","text":"<p>Respect for these traditions involves more than simple acknowledgment of their historical importance. It requires understanding and honoring the protocols, boundaries, and sacred knowledge that these traditions maintain. This respect includes recognizing what should not be shared or documented, as well as understanding the proper contexts for learning and transmission.</p> <ol> <li> <p>Sacred Knowledge</p> <ul> <li> <p>Protection of private teachings</p> </li> <li> <p>Proper learning channels</p> </li> <li> <p>Community protocols</p> </li> <li> <p>Traditional hierarchies</p> </li> </ul> </li> <li> <p>Appropriate Engagement</p> <ul> <li> <p>Respectful approach to learning</p> </li> <li> <p>Community permission</p> </li> <li> <p>Cultural context</p> </li> <li> <p>Recognition of living traditions</p> </li> </ul> </li> <li> <p>Cultural Preservation</p> <ul> <li> <p>Documentation with respect</p> </li> <li> <p>Community consultation</p> </li> <li> <p>Protection of sacred knowledge</p> </li> <li> <p>Support for traditional practitioners</p> </li> </ul> </li> </ol> <p>Cultural Sensitivity</p> <p>These are living spiritual traditions that continue to serve vital roles in their communities. Approach with respect and understanding.</p>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#bibliography","title":"Bibliography","text":"","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#primary-sources","title":"Primary Sources","text":"<ol> <li>Anderson, Jeffrey E. \"Conjure in African American Society.\" Louisiana State University Press, 2005.</li> <li>Brown, Karen McCarthy. \"Mama Lola: A Vodou Priestess in Brooklyn.\" University of California Press, 2001.</li> <li>Chireau, Yvonne P. \"Black Magic: Religion and the African American Conjuring Tradition.\" University of California Press, 2003.</li> </ol>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]},{"location":"world_building/mythology-folklore/#additional-resources","title":"Additional Resources","text":"<ol> <li>Fandrich, Ina J. \"The Mysterious Voodoo Queen, Marie Laveau: A Study of Powerful Female Leadership in Nineteenth Century New Orleans.\" Routledge, 2005.</li> <li>Long, Carolyn Morrow. \"Spiritual Merchants: Religion, Magic, and Commerce.\" University of Tennessee Press, 2001.</li> <li>Mitchell, Faith. \"Hoodoo Medicine: Gullah Herbal Remedies.\" Summerhouse Press, 1999.</li> </ol>","tags":["spiritual-traditions","cultural-heritage","folk-practices","african-american-culture"]}]}